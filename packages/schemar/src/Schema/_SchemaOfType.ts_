// â €â“¥ 2022     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { IsAny } from '@voltiso/util'

import type * as s from '~'

export type SchemaOfType<T> = [T] extends [never]
	? s.Never
	: IsAny<T> extends true
	? s.Any
	: unknown extends T
	? s.Unknown
	: boolean extends T
	? s.Boolean
	: T extends s.InferableLiteral
	? s.Literal<T>
	: T extends void
	? s.Void
	: T extends (infer El)[]
	? El extends s.Schemable
		? s.MutableArray<El>
		: s.MutableArray<SchemaOfType<El>>
	: T extends readonly (infer El)[]
	? El extends s.Schemable
		? s.ReadonlyArray<El>
		: s.ReadonlyArray<SchemaOfType<El>>
	: s.CustomTypeOnly<{ Input: T; Output: T }>
