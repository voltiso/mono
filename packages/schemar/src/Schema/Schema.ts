// â €â“¥ 2022     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { NotProvided, OptionalArgument } from '@voltiso/util'

import type { CustomSchema, ISchema } from '.'

export type Schema<T extends OptionalArgument<unknown> = NotProvided> = [
	T,
] extends [never]
	? SimpleSchema<never>
	: T extends NotProvided
	? ISchema
	: SimpleSchema<T>

export type $Schema<T extends OptionalArgument<unknown> = NotProvided> =
	T extends any ? Schema<T> : never

export interface SimpleSchema<T>
	extends CustomSchema<{ Output: T; Input: T }> {}
