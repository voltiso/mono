// â €â“¥ 2025     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import { SCHEMA_NAME } from '_'

import type { Schema, Schema$ } from '~'

import type { BivariantUnknownFunction } from './UnknownFunctionOptions'

export interface IUnknownFunction<
	T extends BivariantUnknownFunction = BivariantUnknownFunction,
> extends Schema<T> {
	readonly [SCHEMA_NAME]: 'UnknownFunction'
}

export interface IUnknownFunction$<
	T extends BivariantUnknownFunction = BivariantUnknownFunction,
> extends Schema$<T> {
	readonly [SCHEMA_NAME]: 'UnknownFunction'
}

export function isUnknownFunctionSchema(x: unknown): x is IUnknownFunction$ {
	return (x as IUnknownFunction | null)?.[SCHEMA_NAME] === 'UnknownFunction'
}
