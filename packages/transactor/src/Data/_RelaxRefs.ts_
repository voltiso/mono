// â €â“¥ 2024     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { $$Schema, $$Schemable } from '@voltiso/schemar'
import type { $Merge_, Callable, Newable, Primitive } from '@voltiso/util'

import type { DocTagFromBrand } from '~/brand'
import type { DocRefLike, WeakDocRefLike } from '~/DocRef'

export type RelaxRefs<S extends $$Schemable> = S extends $$Schema & {
	Output: unknown
	Input: unknown
}
	? SimplifySchema<
			$Merge_<
				S,
				{
					Output: RelaxRefs.ForData<S['Output']>
					Input: RelaxRefs.ForData<S['Input']>
				}
			>
	  >
	: RelaxRefs.ForData<S>

export namespace RelaxRefs {
	export type ForData<T> = T extends WeakDocRefLike
		? T extends DocRefLike
			? DocRefLike<DocTagFromBrand<T>>
			: WeakDocRefLike<DocTagFromBrand<T>>
		: T extends Primitive | Callable | Newable
		? T
		: T extends object
		? {
				[k in keyof T]: ForData<T[k]>
		  }
		: T
}
