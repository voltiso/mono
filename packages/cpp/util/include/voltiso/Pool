#pragma once
#include <voltiso/_>

#include "voltiso/DynamicArray"
#include "voltiso/Handle"
#include "voltiso/getParameter/Type"
#include "voltiso/parameter"

#include <tuple>

#ifndef VOLTISO_DEBUG_POOL
#define VOLTISO_DEBUG_POOL VOLTISO_DEBUG
#endif

namespace VOLTISO_NAMESPACE {

namespace pool {
template <class Final, class Parameters> class Custom;
} // namespace pool

namespace pool::_ {
template <class Item> struct Slot {
  union {
    Storage<Item> storage;
    Slot *next; // must be zero-filled manually
  };

  //   template <class... Args> Slot(Args &&...args) {
  //     storage.construct(std::forward<Args>(args)...);
  //   }
};

template <class Parameters> struct Block {
  using Item = getParameter::Type<parameter::Item, Parameters>;
  using Allocator = getParameter::Type<parameter::Allocator, Parameters>;

  Slot<Item> *allocationStart;
  Slot<Item> *allocationEnd;

  //   static_assert(is_trivially_relocatable<decltype(numBytes)>);
  //   static_assert(is_trivially_relocatable<decltype(allocation)>);

  Block(size_t numItems) {
    auto numBytes = numItems * sizeof(Slot<Item>);
    auto handle = Singleton<Allocator>::instance().allocateBytes(numBytes);
    static_assert(sizeof(Slot<Item> *) == sizeof(handle));
    this->allocationStart = std::bit_cast<Slot<Item> *>(handle);
    this->allocationEnd = this->allocationStart + numItems;
    std::memset(this->allocationStart, 0, numBytes);
  }

  Block(const Block &) = delete;
  Block &operator=(const Block &) = delete;

  ~Block() {
    auto numBytes = (std::byte *)allocationEnd - (std::byte *)allocationStart;
    Singleton<Allocator>::instance().freeBytes(
        typename Allocator::Handle(allocationStart), numBytes);
  }
};
} // namespace pool::_

template <class Parameters>
static constexpr auto is_trivially_relocatable<pool::_::Block<Parameters>> =
    true;

//

namespace pool {
template <class Final, class Parameters, bool IS_CONST> class Accessor {
  using Pool = Custom<Final, Parameters>;
  using MaybeConstPool = std::conditional_t<IS_CONST, const Pool, Pool>;

  using Item = typename Pool::Item;
  using MaybeConstItem = std::conditional_t<IS_CONST, const Item, Item>;

  using Handle = typename Pool::Handle;

  static_assert(std::is_same_v<typename Handle::Type, Item *>);

public:
  const Handle handle;
  //   _::Slot<MaybeConstItem> *slot;

private:
  MaybeConstPool &pool;

private:
  friend Pool;
  Accessor(MaybeConstPool &pool, const Handle &handle) noexcept
      : handle(handle), pool(pool) {}

  Accessor(MaybeConstPool &pool, _::Slot<MaybeConstItem> *slot) noexcept
      : handle(slot), pool(pool) {}

  Accessor(const Accessor &) = delete;
  Accessor &operator=(const Accessor &) = delete;

public:
  MaybeConstItem &item() noexcept {
    return *std::bit_cast<MaybeConstItem *>(handle);
  }
  const Item &item() const noexcept {
    return *std::bit_cast<const Item *>(handle);
  }

  MaybeConstItem &operator*() noexcept { return item(); }
  const Item &operator*() const noexcept { return item(); }

  MaybeConstItem *operator->() noexcept { return &item(); }
  const Item *operator->() const noexcept { return &item(); }

  template <bool C = IS_CONST, std::enable_if_t<!C> * = nullptr>
  operator Item &() noexcept {
    return item();
  }

  operator const Item &() const noexcept { return item(); }

  operator Handle() const noexcept { return handle; }
  operator bool() const noexcept { return handle; }

  template <bool C = IS_CONST, std::enable_if_t<!C> * = nullptr>
  void erase() const {
    pool.erase(handle);
  }
};
} // namespace pool

//

namespace pool {

// Current implementation does not ever release memory to the system.
// In the future, it's possible to keep free-lists per block, but additional
// indirection would make things a little bit slower.
template <class Final, class Parameters>
class Custom
    : public Singleton<
          getParameter::Type<parameter::Allocator, Parameters>>::Guard {
  //   static_assert(std::is_base_of_v<Custom, Final>);

public:
  using Item = getParameter::Type<parameter::Item, Parameters>;
  using Allocator = getParameter::Type<parameter::Allocator, Parameters>;

  using Handle = Handle ::WithType<Item *>::template WithBrand<Final>;

  using Accessor = pool::Accessor<Final, Parameters, false>;
  using ConstAccessor = pool::Accessor<Final, Parameters, true>;

  static_assert(std::is_same_v<typename Handle::Type, Item *>);

private:
  using Slot = _::Slot<Item>;

private:
  DynamicArray<_::Block<Parameters>> blocks;
  Slot *anyFreeSlot = nullptr;

  // below values could be read from last block instead
  Slot *remainingStart = nullptr;
  Slot *remainingEnd = nullptr;

  size_t numSlots = 0;

  friend Accessor;
  friend ConstAccessor;

#if VOLTISO_DEBUG_POOL
public:
  ~Custom() {
    size_t numSlotsInChain = 0;
    auto nextSlot = anyFreeSlot;
    while (nextSlot) {
      ++numSlotsInChain;
      nextSlot = nextSlot->next;
    }
    auto numSlotsInLastBlock = remainingEnd - remainingStart;
    DCHECK_EQ(numSlotsInChain + numSlotsInLastBlock, numSlots);
  }
#endif

public:
  ConstAccessor operator[](Handle handle) const noexcept {
    return ConstAccessor(*this, handle);
  }

  Accessor operator[](Handle handle) noexcept {
    return Accessor(*this, handle);
  }

  template <class... Args> Accessor insert(Args &&...args) {
    if (anyFreeSlot) [[likely]] {
      auto slot = anyFreeSlot;
      anyFreeSlot = anyFreeSlot->next;
      new (&slot->storage) Item(std::forward<Args>(args)...);
      return Accessor(*this, slot);
    } else if (remainingStart != remainingEnd) [[likely]] {
      auto slot = remainingStart;
      ++remainingStart;
      new (&slot->storage) Item(std::forward<Args>(args)...);
      return Accessor(*this, slot);
    } else [[unlikely]] {
      auto numNewSlots = numSlots + 1;
      DCHECK_GE(numNewSlots, 1);
      blocks.push(numNewSlots);
      numSlots += numNewSlots;
      remainingStart = blocks.last().allocationStart;
      remainingEnd = blocks.last().allocationEnd;
      auto slot = remainingStart;
      ++remainingStart;
      new (&slot->storage) Item(std::forward<Args>(args)...);
      return Accessor(*this, slot);
    }
  }

  void erase(const Handle &handle) noexcept {
    DCHECK(handle);
    auto slot = std::bit_cast<_::Slot<Item> *>(handle);
    static_assert(sizeof(slot) == sizeof(Handle));
    slot->storage.destroy();
    slot->next = this->anyFreeSlot;
    this->anyFreeSlot = slot;
  }

private:
  auto &allocator() const { return Allocator::instance(); }

public:
  template <class Parameter>
  class With : public Custom<With<Parameter>,
                             decltype(std::tuple_cat(
                                 std::declval<std::tuple<Parameter>>(),
                                 std::declval<Parameters>()))> {};

  template <class NewItem> using WithItem = With<parameter::Item<NewItem>>;

  template <class NewAllocator>
  using WithAllocator = With<parameter::Allocator<NewAllocator>>;
}; // class Custom
} // namespace pool

template <class Item>
class Pool final
    : public pool::Custom<Pool<Item>, std::tuple<parameter::Item<Item>>> {
  using Base = pool::Custom<Pool<Item>, std::tuple<parameter::Item<Item>>>;
  using Base::Base;
};

} // namespace VOLTISO_NAMESPACE
