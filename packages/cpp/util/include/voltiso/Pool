#pragma once
#include <voltiso/_>

#include "voltiso/DynamicArray"
#include "voltiso/Object"
#include "voltiso/Storage"

#include <bit>
#include <cstdlib>

#ifndef VOLTISO_DEBUG_POOL
#define VOLTISO_DEBUG_POOL VOLTISO_DEBUG
#endif

#if VOLTISO_DEBUG_POOL
#include "glog/logging.h"
#endif

namespace VOLTISO_NAMESPACE::pool {
struct Defaults {
  using Item = void; // must override
  using Allocator = allocator::Malloc;
  using Brand = void;
};

using DefaultOptions = Options<Defaults>;

//

template <class _Options> class Build : public Object<_Options> {
  using Self = Build;
  using Base = Object<_Options>;

public:
  using Options = _Options;
  using Item = Options::Item;
  using Allocator = Options::Allocator;

private:
  using DynamicArray = DynamicArray<int>::template Allocator_<Allocator>;

private:
  struct Slot {
    union {
      Storage<Item> storage;
      DynamicArray::Handle
          next; // recursive definition; wrong Item type; need to cast
    };

    template <class... Args> Slot(Args &&...args) {
      storage.construct(std::forward<Args>(args)...);
    }
  };

  using Slots = DynamicArray::template Item_<Slot>;
  Slots slots;
  Slots::Handle anyFree = Slots::Handle::null;
  using SlotHandle = Slots::Handle;

public:
  template <class Type>
  using CustomHandle = Handle ::Type_<Type>::template Brand_<Self>;
  using Handle = CustomHandle<typename Slots::Handle::Type>;

  static_assert(std::has_single_bit(sizeof(Item)));

#if VOLTISO_DEBUG_POOL
  ~Build() { CHECK(slots.numItems == 0 || anyFree != Slots::Handle::null); }
#endif

public:
  Build() = default;
  Build(Self &&) = default;

  // private:
  //   friend singleton::perThread;
  //   constexpr BUILD() noexcept = default;

  // public:
  //   static constexpr auto &get() { return singleton::perThread::get<Self>();
  //   }

public:
  template <class... Args> Handle construct(Args &&...args) {
    if (anyFree == Slots::Handle::null) [[unlikely]] {
      auto newItem = slots.push(std::forward<Args>(args)...);
      slots[newItem].storage.construct();
      return Handle(newItem.value);
    } else [[likely]] {
      auto handle = anyFree;
      anyFree =
          SlotHandle(slots[anyFree].next.value); // wrong Handle type; need cast
      slots[handle].storage.construct(std::forward<Args>(args)...);
      return Handle(handle.value);
    }
  }

  void destroy(const Handle &handle) {
    DCHECK_NE(handle, Handle::null);
    slots[handle.value].storage.destroy();
    // wrong Handle type; need cast
    slots[handle.value].next = typename DynamicArray::Handle(anyFree.value);
    anyFree = SlotHandle(handle.value);
  }

  Item &operator[](const Handle &handle) {
    DCHECK_NE(handle, Handle::null);
    return (Item &)slots[handle.value];
  }

  const Item &operator[](const Handle &handle) const {
    return const_cast<Self &>(*this)[handle];
  }
};
} // namespace VOLTISO_NAMESPACE::pool
VOLTISO_OBJECT_FINAL(pool)
VOLTISO_OBJECT_TRIVIALLY_RELOCATABLE(pool)

namespace VOLTISO_NAMESPACE {
template <class Item>
using Pool = pool::Final<pool::DefaultOptions::Item_<Item>>;
} // namespace VOLTISO_NAMESPACE
