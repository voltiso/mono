#pragma once
#include <voltiso/_>

#include "voltiso/Entry"

namespace VOLTISO_NAMESPACE {
template <class _Pool> class Bst {
private:
  using Self = Bst;

public:
  using Pool = _Pool;
  using Handle = typename Pool::Handle;
  using Item = typename Pool::Item;
  using Value = GetValue<Item>;

private:
  Pool &v;

public:
  Bst(Pool &pool) : v(pool) {}
  // Bst(Self &&) = default;

public:
  // find first node that is `>= value`
  Handle _find(const Handle &root, const Value &value) {
    auto node = root;
    auto cand = node;
    while (node) {
      if (value < getValue(v[node])) {
        node = v[node]->children[0];
      } else {
        cand = node;
        node = v[node]->children[1];
      }
    }
    return cand;
  }

public:
  //            x                   y                            |
  //           / \                 / \                           |
  //          a   y      ->	      x   c                          |
  //             / \             / \                             |
  //            b   c           a   b                            |
  Handle rotateLeft(const Handle &x) {
    auto y = v[x].children[1];
    v[x].children[1] = v[y].children[0];
    v[y].children[0] = x;
    return y;
  }

  //            x                   y                            |
  //           / \                 / \                           |
  //          y   c      ->	      a   x                          |
  //         / \                     / \                         |
  // 	      a   b                   b   c                        |
  Handle rotateRight(const Handle &x) {
    auto y = v[x].children[0];
    v[x].children[0] = v[y].children[1];
    v[y].children[1] = x;
    return y;
  }
}; // struct bst

} // namespace VOLTISO_NAMESPACE
