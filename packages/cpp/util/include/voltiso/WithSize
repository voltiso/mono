#pragma once
#include <voltiso/_>

#include <experimental/type_traits>
#include <type_traits>

namespace VOLTISO_NAMESPACE {

/**
 * It's not required to derive from this interface. You may prefer to define
 * `size()` yourself in your own interface in order to avoid multiple
 * inheritance.
 */
struct WithSize {
  virtual int size() const = 0;
};

/**
 * It's not required to derive from this interface. You may prefer to define
 * `copy()` yourself in your own interface in order to avoid multiple
 * inheritance.
 */
template <class Derived> struct WithSizeCrtp : WithSize {
  static_assert(std::is_class_v<Derived>);
  static_assert(std::is_final_v<Derived>);
  static_assert(std::is_base_of_v<WithSizeCrtp, Derived>);

  int size() const override { return sizeof(Derived); }
};

} // namespace VOLTISO_NAMESPACE
