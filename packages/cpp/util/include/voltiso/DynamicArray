#pragma once
#include "voltiso/singleton"
#include <voltiso/_>

#include <voltiso/Allocation>
#include <voltiso/Array>
#include <voltiso/allocator/Malloc>
#include <voltiso/handle/Custom>
#include <voltiso/handle/Handle>
#include <voltiso/is_derived_from_template>
#include <voltiso/is_trivially_relocatable>
#include <voltiso/memory/Iterator>
#include <voltiso/storage/Storage>

#include <glog/logging.h>

#include <cstddef>

namespace VOLTISO_NAMESPACE::dynamicArray::_ {
// rounds up to power-of-2
template <class Item>
static constexpr size_t getNumBytesForNumItems(size_t numItems) noexcept {
  auto numBytes = sizeof(Item) * numItems;
  // numBytes = std::bit_ceil(numBytes);
  return numBytes;
}

template <class Options> struct Base {
  using Allocation =
      Allocation::WithAllocator<typename Options::Allocator>::template WithItem<
          Storage<typename Options::Item>>;
  static_assert(!std::is_same_v<typename Allocation::Item, void>);
};

template <class Options> struct DataMembersNoInPlace : Base<Options> {
protected:
  Base<Options>::Allocation allocation;
};

template <class Options> struct DataMembersInPlace : Base<Options> {
protected:
  union {
    Storage<typename Base<Options>::Allocation> allocation;
    Array<Storage<typename Options::Item>, Options::IN_PLACE> inPlaceItems;
  };
  // DataMembersInPlace() = default;
};

template <class Options>
using DataMembers =
    std::conditional_t<(Options::IN_PLACE > 0), DataMembersInPlace<Options>,
                       DataMembersNoInPlace<Options>>;
} // namespace VOLTISO_NAMESPACE::dynamicArray::_

//

namespace VOLTISO_NAMESPACE::dynamicArray {
struct DefaultOptions {
  using Item = int; // need to override
  using Allocator = allocator::Malloc;
  static constexpr size_t IN_PLACE = 0;
};

template <class _Options> class BUILD : public _::DataMembers<_Options> {
  using Self = BUILD;

public:
  using Options = _Options;
  using Item = Options::Item;
  using Allocator = Options::Allocator;

  static_assert(is_trivially_relocatable<Item>,
                "`Item` must be marked as trivially relocatable using "
                "`is_trivially_relocatable<Item> = true`");

  template <class Int> using CustomHandle = handle::Custom<Self, Int>;
  using Handle = Handle<Self>;

public:
  size_t const numItems = 0;
  size_t const numSlots = Options::IN_PLACE;

  const auto &allocator() const {
    return singleton::perThread::get<Self::Allocator>();
  }

  ~BUILD() {
    for (size_t i = 0; i < numItems; ++i) {
      (*this)[i].~Item();
    }
  }

  void _assumeRelocated() {
    if (numItems > Options::IN_PLACE) [[unlikely]] {
      this->allocation._assumeRelocated();
    }
    (size_t &)this->numItems = 0;
  }

  BUILD() = default;

  BUILD(std::initializer_list<Item> items) {
    setNumSlots(items.size());
    for (auto &item : items) {
      push(item);
    }
  }

  // BUILD(BUILD&& other) noexcept = default;
  // BUILD& operator=(BUILD&& other) noexcept = default;

  explicit BUILD(const Self &other) = default;
  BUILD(Self &&other) noexcept = default;

  template <class Other,
            class = std::enable_if_t<is_derived_from_template<Other, BUILD>>>
  explicit BUILD(const Other &other) {
    setNumSlots(other.numItems);
    for (size_t i = 0; i < other.numItems; ++i) {
      push(other[i]);
    }
  }

  Self &operator=(const Self &other) {
    if (this == &other) [[unlikely]]
      return *this;
    setNumSlots(other.numItems);
    const_cast<size_t &>(numItems) = other.numItems;
    for (size_t i = 0; i < other.numItems; ++i) {
      push(other[i]);
    }
    return *this;
  }

  Self &operator=(Self &&other) noexcept {
    DCHECK_NE(this, &other);
    this->~Self();
    static_assert(is_trivially_relocatable<Self>);
    static_assert(is_trivially_relocatable<Item>);
    memcpy(this, &other, sizeof(Self)); // trivially relocatable
    other._assumeRelocated();
    return *this;
  }

  template <class... Args>
  static Self createWithNumItems(size_t numItems, Args &&...args) {
    Self self;
    (size_t &)self.numItems = numItems;
    (size_t &)self.numSlots = numItems;

    auto item = Item(std::forward<Args>(args)...);

    if constexpr (Options::IN_PLACE == 0) {
      self.allocation = Self::Allocation::allocateItems(numItems);
    } else {
      if (numItems > Options::IN_PLACE) [[unlikely]] {
        self.allocation.construct(Self::Allocation::allocateItems(numItems));
      }
    }

    auto memory = &self[0];

    for (size_t i = 0; i < numItems; ++i) {
      new (memory + i) Item(item);
    }
    return self;
  }

  // will be rounded up to power-of-2
  auto setNumSlots(size_t newNumSlots) {
    static_assert(!std::is_same_v<Item, void>);
    static_assert(!std::is_same_v<typename Self::Allocation::Item, void>);
    static_assert(is_trivially_relocatable<Item>);
    // newNumSlots = std::bit_ceil(newNumSlots);
    if constexpr (Options::IN_PLACE == 0) {
      for (size_t i = newNumSlots; i < numSlots; ++i) {
        this->allocation[i].item().~Item();
      }
      this->allocation.setNumSlots(newNumSlots);
    } else {
      if (newNumSlots <= Options::IN_PLACE) [[likely]] {
        if (numSlots <= Options::IN_PLACE) [[likely]] {
          for (size_t i = newNumSlots; i < numSlots; ++i) {
            this->inPlaceItems[i].item().~Item();
          }
        } else [[unlikely]] {
          static_assert(is_trivially_relocatable<Item>);
          auto oldData = &this->allocation.item()[0];
          for (size_t i = newNumSlots; i < numSlots; ++i) {
            oldData[i].item().~Item();
          }
          memcpy(&this->inPlaceItems[0], oldData, sizeof(Item) * newNumSlots);
          allocator().freeBytes(oldData);
        }
      } else [[unlikely]] {
        DCHECK_GT(newNumSlots, numSlots);
        if (numSlots <= Options::IN_PLACE) [[likely]] {
          auto allocation = Self::Allocation::allocateItems(newNumSlots);
          memcpy(&allocation[0], &this->inPlaceItems[0],
                 sizeof(Item) * numSlots);
          // LOG(INFO) << allocation[0].item().value;
          this->allocation.construct(std::move(allocation));
          // LOG(INFO) << this->allocation.item()[0].item().value;
        } else [[unlikely]] {
          for (size_t i = newNumSlots; i < numSlots; ++i) {
            this->allocation.item()[i].item().~Item();
          }
          this->allocation.item().setNumSlots(newNumSlots);
        }
      }
    }
    (size_t &)this->numSlots = newNumSlots;
  }

  Storage<Item> *slots() {
    if constexpr (Options::IN_PLACE == 0) {
      return &this->allocation[0];
    } else {
      if (numSlots <= Options::IN_PLACE) [[likely]] {
        return this->inPlaceItems.items;
      } else [[unlikely]] {
        return &this->allocation.item()[0];
      }
    }
  }

  const Storage<Item> *slots() const {
    return const_cast<Self &>(*this).slots();
  }

  template <class Index> Item &operator[](const CustomHandle<Index> &handle) {
    DCHECK_LT(handle.value, numItems);
    return *(Item *)&(*this)[handle.value];
  }

  template <class Index>
  const Item &operator[](const CustomHandle<Index> &handle) const {
    DCHECK_LT(handle.value, numItems);
    return *(const Item *)&(*this)[handle.value];
  }

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  Item &operator[](const Index &index) {
    DCHECK_LT(index, numItems);
    if constexpr (Options::IN_PLACE > 0) {
      if (numSlots <= Options::IN_PLACE) [[likely]] {
        return this->inPlaceItems[index].item();
      } else [[unlikely]] {
        return this->allocation.item()[index].item();
      }
    } else {
      return this->allocation[index].item();
    }
  }

  Item &first() { return (*this)[0]; }
  const Item &first() const { return (*this)[0]; }

  Item &last() { return (*this)[numItems - 1]; }
  const Item &last() const { return (*this)[numItems - 1]; }

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  const Item &operator[](const Index &index) const {
    return const_cast<Self &>(*this)[index];
  }

  Handle push(const Item &item) { return push<>(item); }

  template <class... Args> Handle push(Args &&...args) {
    DCHECK_LE(numItems, this->numSlots);

    if (numItems == this->numSlots) [[unlikely]] {
      this->grow();
    }

    DCHECK_LT(numItems, this->numSlots);

    if constexpr (Options::IN_PLACE == 0) {
      this->allocation[numItems].construct(std::forward<Args>(args)...);
    } else {
      if (numSlots <= Options::IN_PLACE) [[likely]] {
        DCHECK_LT(numItems, Options::IN_PLACE);
        new (&this->inPlaceItems[numItems]) Item(std::forward<Args>(args)...);
      } else [[unlikely]] {
        this->allocation.item()[numItems].construct(
            std::forward<Args>(args)...);
      }
    }

    auto handle = Handle(numItems);
    ++(size_t &)numItems;
    DCHECK(numItems);
    return handle;
  }

  void grow() {
    // LOG(INFO) << "grow";
    auto newNumSlots = this->numSlots << 1;
    if constexpr (Options::IN_PLACE == 0) {
      if (!newNumSlots) [[unlikely]]
        newNumSlots = 1;
    }
    DCHECK_GT(newNumSlots, this->numSlots);
    this->setNumSlots(newNumSlots);
  }

  // cannot perfect-forward
  template <class... Args>
  void setNumItems(size_t newNumItems, Args &&...args) {
    if (newNumItems < numItems) {
      for (size_t i = numItems; i < newNumItems; ++i) {
        slots()[i].item().~Item();
      }
    } else if (newNumItems > numItems) [[likely]] {
      if (newNumItems > this->numSlots) [[unlikely]] {
        setNumSlots(newNumItems);
      }
      auto address = slots();
      if constexpr (std::is_copy_constructible_v<Item>) {
        auto item = Item(std::forward<Args>(args)...);
        for (size_t i = numItems; i < newNumItems; ++i) {
          new (address + i) Item(item);
        }
      } else {
        for (size_t i = numItems; i < newNumItems; ++i) {
          new (address + i) Item(args...); // no std::forward (values reused)
        }
      }
    }
    const_cast<size_t &>(numItems) = newNumItems;
  }

  void clear() {
    for (size_t i = 0; i < numItems; ++i) {
      slots()[i].item().~Item();
    }
    const_cast<size_t &>(numItems) = 0;
  }

  Item pop() {
    DCHECK_GT(numItems, 0);
    auto lastIndex = numItems - 1;
    auto item = std::move((*this)[lastIndex]);
    (*this)[lastIndex].~Item();
    const_cast<size_t &>(numItems) = lastIndex;
    return item;
  }

  /**
   *  - Invalidates on resize
   *  - Invalidates on relocation
   */
  class Iterator final : public memory::IteratorCrtp<Item, Iterator> {
  public:
    using Self = Iterator;
    using Base = memory::IteratorCrtp<Item, Iterator>;

    using Item = Item;

    using Base::Base;
  };

  /**
   *  - Invalidates on resize
   *  - Invalidates on relocation
   */
  class ConstIterator final
      : public memory::ConstIteratorCrtp<Item, ConstIterator> {
  public:
    using Self = ConstIterator;
    using Base = memory::ConstIteratorCrtp<Item, ConstIterator>;

    using Item = Item;

    using Base::Base;
  };

  // private:
  // Iterator _end; // cannot store pointer to self (we're relocatable)

  Iterator begin() { return &this->allocation[0].item(); }
  Iterator end() { return &this->allocation[0].item() + this->numItems; }

  template <class NewAllocator>
  using WithAllocator = BUILD<override::Allocator_<NewAllocator, Options>>;

  template <size_t NEW_IN_PLACE>
  using WithInPlace = BUILD<override::IN_PLACE_<NEW_IN_PLACE, Options>>;
};
} // namespace VOLTISO_NAMESPACE::dynamicArray

//

//

namespace VOLTISO_NAMESPACE {

template <class Options>
constexpr auto is_trivially_relocatable<dynamicArray::BUILD<Options>> = true;

template <class Item>
using DynamicArray =
    dynamicArray::BUILD<override::Item_<Item, dynamicArray::DefaultOptions>>;
} // namespace VOLTISO_NAMESPACE
