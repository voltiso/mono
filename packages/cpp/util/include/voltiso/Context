#pragma once
#include <voltiso/_>

namespace VOLTISO_NAMESPACE::context::_ {
template <class T> inline T const *&getPointer() {
  static T const *value = nullptr;
  return value;
}
}; // namespace VOLTISO_NAMESPACE::context::_

namespace VOLTISO_NAMESPACE::context {
template <class T> inline T const &get() { return *_::getPointer<T>(); }

template <class T> struct Guard {
  Guard(const T &value) : _previous(_::getPointer<T>()) {
    _::getPointer<T>() = &value;
  }

  ~Guard() { _::getPointer<T>() = _previous; }

private:
  T const *_previous;
};

/** Using `context::Guard` will usually be easier */
template <class T, class Function>
inline void runWith(const T &value, const Function &function) {
  auto guard = Guard<T>(value);
  function();
}

} // namespace VOLTISO_NAMESPACE::context
