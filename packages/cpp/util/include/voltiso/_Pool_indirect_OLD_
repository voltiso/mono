#pragma once
#include <voltiso/_>

#include "voltiso/DynamicArray"
#include "voltiso/Object"
#include "voltiso/Storage"

#include <cstdlib>
#include <type_traits>

#ifndef VOLTISO_DEBUG_POOL
#define VOLTISO_DEBUG_POOL VOLTISO_DEBUG
#endif

#if VOLTISO_DEBUG_POOL
#include "glog/logging.h"
#endif

//

namespace VOLTISO_NAMESPACE::pool {
template <class Final, class Parameters> class Custom;
} // namespace VOLTISO_NAMESPACE::pool

//

namespace VOLTISO_NAMESPACE::pool::_ {
template <class Final, class Parameters> class ConstAccessor {
private:
  using Custom = Custom<Final, Parameters>;
  using Handle = typename Custom::Handle;
  using SlotHandle = typename Custom::SlotHandle;

private:
  friend Custom;
  ConstAccessor(const Handle &handle, const Custom &self)
      : handle(handle), self(self) {}

private:
  using Item = typename Custom::Item;

public:
  const Item &item() const { return self.slots[handle.value]->storage.item(); }
  const Item &operator*() const { return item(); }
  const Item *operator->() const { return &item(); }

  // auto handle() const {return handle; }
  operator Handle() const { return handle; }

public:
  const Handle handle;

protected:
  const Custom &self;
};

template <class Final, class Parameters>
class Accessor : public ConstAccessor<Final, Parameters> {
private:
  using Base = ConstAccessor<Final, Parameters>;
  using Base::Base;
  using Custom = Custom<Final, Parameters>;
  using Item = Custom::Item;
  using DynamicArray = typename Custom::DynamicArray;
  using Handle = typename Custom::Handle;
  using SlotHandle = typename Custom::SlotHandle;
  Custom &self() { return const_cast<Custom &>(Base::self); }

public:
  Item &item() { return self().slots[this->handle.value]->storage.item(); }
  Item &operator*() { return item(); }
  Item *operator->() { return &item(); }

public:
  void erase() {
    DCHECK_NE(this->handle, Handle::null);
    self().slots[this->handle.value]->storage.destroy();
    // wrong Handle type; need cast
    self().slots[this->handle.value]->next =
        typename DynamicArray::Handle(self().anyFree.value);
    self().anyFree = SlotHandle(this->handle.value);
  }
};
} // namespace VOLTISO_NAMESPACE::pool::_

//

namespace std {
template <class Final, class Parameters>
ostream &
operator<<(ostream &os,
           const VOLTISO_NAMESPACE::pool::_::ConstAccessor<Final, Parameters>
               &accessor) {
  return os << "Pool::ConstAccessor(" << accessor.handle.value << ")";
}

template <class Final, class Parameters>
ostream &operator<<(
    ostream &os,
    const VOLTISO_NAMESPACE::pool::_::Accessor<Final, Parameters> &accessor) {
  return os << "Pool::Accessor(" << accessor.handle.value << ")";
}
} // namespace std

//

namespace VOLTISO_NAMESPACE::pool {
// struct Defaults {
//   using Item = void; // must override
//   using Allocator = allocator::Malloc;
//   using Brand = void;
// };

// using DefaultOptions = Options<Defaults>;

//

// class Base {};

template <class Final, class Parameters>
class Custom
    : public Object<Final>,
      public Singleton<
          getParameter::Type<parameter::Allocator, Parameters>>::Guard {
  using Self = Custom;
  using Base = Object<Final>;

public:
  using Item = getParameter::Type<parameter::Item, Parameters>;
  using Allocator = getParameter::Type<parameter::Allocator, Parameters>;

private:
  using DynamicArray = DynamicArray<int>::template WithAllocator<Allocator>;

private:
  struct Slot {
    union {
      Storage<Item> storage;
      DynamicArray::Handle
          next; // recursive definition; wrong Item type; need to cast
    };

    template <class... Args> Slot(Args &&...args) {
      storage.construct(std::forward<Args>(args)...);
    }
  };

  using Slots = DynamicArray::template WithItem<Slot>;
  Slots slots;
  Slots::Handle anyFree = Slots::Handle::null;
  using SlotHandle = Slots::Handle;

public:
  template <class Type>
  using CustomHandle = Handle ::WithType<Type>::template WithBrand<Self>;
  using Handle = CustomHandle<typename Slots::Handle::Type>;

  // static_assert(std::has_single_bit(sizeof(Item)));

  ~Custom() {
    // std::cout << "Pool::~Build()" << std::endl;
    if constexpr (std::is_trivially_destructible_v<Item>) {
      // noop
    } else {
      if (anyFree == Slots::Handle::null) [[unlikely]] {
        for (size_t i = 0; i < slots.numItems; ++i) {
          slots[i]->storage.destroy();
        }
      } else [[likely]] {
        // ! slow
        using Free = DynamicArray::template WithItem<bool>;
        auto free = Free::createWithNumItems(slots.numItems, 0);
        auto anyFree = this->anyFree;
        while (anyFree != Slots::Handle::null) {
          free[anyFree.value] = true;
          anyFree = SlotHandle(slots[anyFree]->next.value);
        }
        for (size_t i = 0; i < slots.numItems; i++) {
          if (!free[i]) {
            slots[i]->storage.destroy();
          }
        }
      }
    }
  }

  // #if VOLTISO_DEBUG_POOL
  //   ~Build() { CHECK(slots.numItems == 0 || anyFree != Slots::Handle::null);
  //   }
  // #endif

public:
  Custom() = default;
  Custom(Self &&) = default;

  // private:
  //   friend singleton::perThread;
  //   constexpr BUILD() noexcept = default;

  // public:
  //   static constexpr auto &get() { return singleton::perThread::get<Self>();
  //   }

private:
  using Accessor = _::Accessor<Final, Parameters>;
  using ConstAccessor = _::ConstAccessor<Final, Parameters>;
  friend Accessor;
  friend ConstAccessor;

public:
  Accessor operator[](const Handle &handle) { return Accessor(handle, *this); }
  ConstAccessor operator[](const Handle &handle) const {
    return ConstAccessor(handle, *this);
  }

public:
  template <class... Args> Accessor insert(Args &&...args) {
    if (anyFree == Slots::Handle::null) [[unlikely]] {
      auto newItem = slots.push(std::forward<Args>(args)...);
      return Accessor(static_cast<Handle>(newItem.value), *this);
    } else [[likely]] {
      auto handle = anyFree;
      anyFree = SlotHandle(
          slots[anyFree]->next.value); // wrong Handle type; need cast
      slots[handle]->storage.construct(std::forward<Args>(args)...);
      return Accessor(static_cast<Handle>(handle.value), *this);
    }
  }

  // Item &operator[](const Handle &handle) {
  //   DCHECK_NE(handle, Handle::null);
  //   return (Item &)slots[handle.value];
  // }

  // const Item &operator[](const Handle &handle) const {
  //   return const_cast<Self &>(*this)[handle];
  // }

public:
  template <class Parameter>
  class With final : public Custom<With<Parameter>,
                                   decltype(std::tuple_cat(
                                       std::declval<std::tuple<Parameter>>(),
                                       std::declval<Parameters>()))> {};

  template <class T> using WithItem = With<parameter::Item<T>>;
  template <class T> using WithAllocator = With<parameter::Allocator<T>>;
  template <class T> using WithBrand = With<parameter::Brand<T>>;

}; // class Custom
} // namespace VOLTISO_NAMESPACE::pool
// VOLTISO_OBJECT_FINAL(pool)
// VOLTISO_OBJECT_TRIVIALLY_RELOCATABLE(pool)

namespace VOLTISO_NAMESPACE {
// template <class Item>
// using Pool = pool::Final<pool::DefaultOptions::Item_<Item>>;

template <class Item>
class Pool final
    : public pool::Custom<Pool<Item>, std::tuple<parameter::Item<Item>>> {};

// template <class Item = Any>
// using Pool = std::conditional_t<std::is_same_v<Item, Any>, pool::Base,
//                                 pool::Final<pool::DefaultOptions::Item_<Item>>>;

// namespace pool {
// class Virtual {
//   //
// };
// } // namespace pool

} // namespace VOLTISO_NAMESPACE
