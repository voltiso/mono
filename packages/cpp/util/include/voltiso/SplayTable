#pragma once

#include "voltiso/Entry"
#include "voltiso/Pool"
#include "voltiso/Splay"

namespace VOLTISO_NAMESPACE::splayTable {
template <class Final, class Parameters> class Custom;
template <class Parameters> class Final;
} // namespace VOLTISO_NAMESPACE::splayTable

namespace VOLTISO_NAMESPACE {
template <class Entry>
using SplayTable = splayTable::Final<std::tuple<parameter::Entry<Entry>>>;
} // namespace VOLTISO_NAMESPACE

namespace VOLTISO_NAMESPACE::splayTable::_ {
template <class Final, class Parameters> struct Node {
private:
  using Entry = getParameter::Type<parameter::Entry, Parameters>;
  using Allocator = getParameter::Type<parameter::Allocator, Parameters>;
  using Pool = Pool<int>::template WithAllocator<Allocator>; // need to cast
  using Handle = Pool::Handle::template WithBrand<void>;

public:
  Entry entry;
  Array<Handle, 2> children = {Handle::null, Handle::null};
};
} // namespace VOLTISO_NAMESPACE::splayTable::_

//

namespace VOLTISO_NAMESPACE::splayTable::_ {
template <class Final, class Parameters> class ConstAccessor {
protected:
  using Custom = Custom<Final, Parameters>;
  using Handle = Custom::Pool::Handle;
  using Key = Custom::Key;
  using Value = Custom::Value;

public:
  // const Handle handle;
  const Key key;
  const Custom &splayTable;
  const bool exists;

private:
  friend Custom;
  ConstAccessor(const Key &key, const Custom &splayTable, bool exists)
      : key(key), splayTable(splayTable), exists(exists) {}

public:
  const Value &get() const {
    DCHECK(this->exists);
    return getValue(this->splayTable.pool[this->splayTable.root]->entry);
  }

public:
  operator const Value &() const { return this->get(); }
  const Value &operator*() const { return this->get(); }
  const Value *operator->() const { return &this->get(); }
  const Value *operator&() const { return &this->get(); }
};

//

template <class Final, class Parameters>
class SetAccessor : public ConstAccessor<Final, Parameters> {
private:
  using Base = ConstAccessor<Final, Parameters>;
  using Base::Base;
  using Custom = Custom<Final, Parameters>;

protected:
  using Value = Base::Value;

public:
  void insert() {
    DCHECK(!this->exists);
    auto &root = const_cast<Custom::Pool::Handle &>(this->splayTable.root);
    this->splayTable._splay()(root).insert(this->key);
  }

public:
  Value &get() { return const_cast<Value &>(Base::get()); }

public:
  operator Value &() { return get(); }
  Value &operator*() { return get(); }
  Value *operator->() { return &get(); }
  Value *operator&() { return &get(); }
};

//

template <class Final, class Parameters>
class MapAccessor : public SetAccessor<Final, Parameters> {
private:
  using Base = SetAccessor<Final, Parameters>;
  using Base::Base;
  using Custom = Custom<Final, Parameters>;
  using Value = Custom::Value;

public:
  template <class... Args> auto &insert(Args &&...args) {
    DCHECK(!this->exists);
    auto &root = const_cast<Custom::Pool::Handle &>(this->splayTable.root);
    this->splayTable._splay()(root).insert(
        Entry{this->key, Value(std::forward<Args>(args)...)});
    const_cast<bool &>(this->exists) = true;
    return *this;
  }

  template <class... Args> auto &maybeInsert(Args &&...args) {
    if (!this->exists) {
      insert(std::forward<Args>(args)...);
    }
    return *this;
  }

  void erase() {
    DCHECK(this->exists);
    auto &root = const_cast<Custom::Pool::Handle &>(this->splayTable.root);
    this->splayTable._splay()(root).erase(this->key);
  }

  void maybeErase() {
    if (this->exists) {
      erase();
    }
  }
}; // class MapAccessor

template <class Final, class Parameters> class Iterator {
private:
  using Custom = Custom<Final, Parameters>;
  using Pool = Custom::Pool;

private:
  using Stack =
      DynamicArray<typename Pool::Handle>::template WithInPlaceOnly<32>;
  Stack stack;

private:
  Custom &splayTable;

private:
  friend Custom;
  Iterator(bool end, Custom &splayTable) : splayTable(splayTable) {
    if (!end) {
      auto current = splayTable.root;
      while (current) {
        stack.push(current);
        current = splayTable.pool[current]->children[0];
      }
    }
  }

public:
  void operator++() {
    DCHECK_GT(stack.numItems, 0);
    auto &pool = splayTable.pool;
    auto current = stack.last();
    if (pool[current]->children[1]) {
      current = pool[current]->children[1];
      stack.push(current);
      while (pool[current]->children[0]) {
        current = pool[current]->children[0];
        stack.push(current);
      }
    } else {
      do {
        current = stack.pop();
      } while (stack.numItems && pool[stack.last()]->children[1] == current);
    }
  }

  // ! only for `for auto`
  bool operator==(const Iterator &other) const {
    return stack.numItems == other.stack.numItems;
  }

  auto &operator*() const { return splayTable.pool[stack.last()]->entry; }
}; // class Iterator

} // namespace VOLTISO_NAMESPACE::splayTable::_

//

namespace VOLTISO_NAMESPACE::splayTable {
template <class Final, class Parameters> class Custom : public Object<Final> {
  using Self = Custom;

public:
  using Entry = getParameter::Type<parameter::Entry, Parameters>;
  using Key = GetKey<Entry>;
  using Value = GetValue<Entry>;
  using Allocator = getParameter::Type<parameter::Allocator, Parameters>;

  using ConstAccessor = _::ConstAccessor<Final, Parameters>;
  using Accessor = std::conditional_t<
      std::is_same_v<Value, Entry> || std::is_same_v<Value, void>,
      _::SetAccessor<Final, Parameters>, _::MapAccessor<Final, Parameters>>;
  friend ConstAccessor;
  friend _::SetAccessor<Final, Parameters>;
  friend _::MapAccessor<Final, Parameters>;

  // using ConstIterator = ConstIterator<Options>;
  using Iterator = _::Iterator<Final, Parameters>;
  friend Iterator;

private:
  using Node = _::Node<Final, Parameters>;
  using Pool = Pool<Node>::template WithAllocator<Allocator>;

private:
  Pool pool;
  Pool::Handle root = Pool::Handle::null;

public:
  ~Custom() { _destroy(root); }

private:
  void _destroy(Pool::Handle node) {
    if (!node) [[likely]] // optimize empty splay path (fast)
      return;

    DynamicArray<typename Pool::Handle> stack = {node};
    while (stack.numItems) {
      auto node = stack.pop();

      if (node->children[0]) [[likely]]
        stack.push(node->children[0]);

      if (node->children[1]) [[likely]]
        stack.push(node->children[1]);

      pool.erase(node);
    }
  }
  // // non-stack-overflow friendly
  // void _destroy(Pool::Handle node) {
  //   if (!node)
  //     return;

  //   _destroy(node->children[0]);
  //   _destroy(node->children[1]);
  //   pool.erase(node);
  // }

public:
  Custom() = default;
  Custom(std::initializer_list<Entry> entries) {
    for (auto &entry : entries) {
      if constexpr (std::is_same_v<Value, Entry> ||
                    std::is_same_v<Value, void>) {
        (*this)[entry].insert();
      } else {
        (*this)[getKey(entry)].insert(getValue(entry));
      }
    }
  }

private:
  auto _splay() const {
    auto &pool = const_cast<Pool &>(this->pool);
    return Splay<Pool>(pool);
  }

public:
  Accessor operator[](const Key &key) {
    auto splay = this->_splay();
    auto handle = splay(this->root).find(key);
    return Accessor{key, *this, handle != decltype(handle)::null};
  }
  ConstAccessor operator[](const Key &key) const {
    auto splay = this->_splay();
    auto handle = splay(this->root).find(key);
    return ConstAccessor{key, *this, handle != decltype(handle)::null};
  }

public:
  Iterator begin() { return Iterator(false, *this); }
  Iterator end() { return Iterator(true, *this); }
}; // class Custom

template <class Parameters>
class Final final : public Custom<Final<Parameters>, Parameters> {
  using Base = Custom<Final<Parameters>, Parameters>;
  using Base::Base;
}; // class Final

} // namespace VOLTISO_NAMESPACE::splayTable
