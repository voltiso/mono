#pragma once
#include <voltiso/_>

#include "voltiso/DynamicArray.hpp"
#include "voltiso/Entry"
#include "voltiso/Object"
#include "voltiso/Pool"
#include "voltiso/is_trivially_relocatable"

// ! todo: can be made faster by using a single growable allocation for both
// pool and buckets

namespace VOLTISO_NAMESPACE::hashTable {
template <class Final, class Parameters> class Custom;
} // namespace VOLTISO_NAMESPACE::hashTable

//

namespace VOLTISO_NAMESPACE::hashTable::_ {

template <class Final, class Parameters>
using GenericPool = Pool<int>::template WithAllocator<
    getParameter::Type<parameter::Allocator, Parameters>>;

template <class Final, class Parameters>
using GenericPoolHandle =
    typename GenericPool<Final, Parameters>::Handle::template WithBrand<void>;

template <class Final, class Parameters> struct Node {
  using GenericPoolHandle = GenericPoolHandle<Final, Parameters>;
  using Custom = Custom<Final, Parameters>;
  using Entry = Custom::Entry;
  Entry entry;
  GenericPoolHandle nextNode = GenericPoolHandle::null;
}; // struct Node

template <class Final, class Parameters>
using Pool = Pool<Node<Final, Parameters>>::template WithAllocator<
    getParameter::Type<parameter::Allocator, Parameters>>;

template <class Final, class Parameters> struct Bucket {
  using Node = Node<Final, Parameters>;
  using GenericPoolHandle = GenericPoolHandle<Final, Parameters>;
  GenericPoolHandle firstNode = GenericPoolHandle::null;
}; // struct Bucket

template <class Final, class Parameters>
using Buckets = DynamicArray<Bucket<Final, Parameters>>::template WithAllocator<
    getParameter::Type<parameter::Allocator, Parameters>>;

} // namespace VOLTISO_NAMESPACE::hashTable::_

//

namespace VOLTISO_NAMESPACE {
template <class Final, class Parameters>
static constexpr auto
    is_trivially_relocatable<hashTable::_::Bucket<Final, Parameters>> = true;
} // namespace VOLTISO_NAMESPACE

//

namespace VOLTISO_NAMESPACE::hashTable::_ {
template <class Final, class Parameters> class ConstAccessor {
private:
  using GenericPoolHandle = GenericPoolHandle<Final, Parameters>;
  using Custom = Custom<Final, Parameters>;
  using Key = typename Custom::Key;
  using Value = typename Custom::Value;
  using Buckets = typename Custom::Buckets;

protected:
  GenericPoolHandle const *const pHandle;
  // const GenericPoolHandle handle;
  const Buckets::Handle bucket;

public:
  const Key key;
  const bool exists;
  const Custom &hashTable;

protected:
  friend Custom;
  ConstAccessor(const GenericPoolHandle *pHandle, const Buckets::Handle &bucket,
                const Key &key, bool exists, const Custom &hashTable)
      : pHandle(pHandle), bucket(bucket), key(key), exists(exists),
        hashTable(hashTable) {}
  // const auto &hashTable() const { return _hashTable; }

  const Value &item() const {
    DCHECK(this->exists);
    return getValue(this->hashTable.pool[*this->pHandle]->entry);
  }

  // explicit operator bool() const { return exists; }

public:
  operator const Value &() const { return item(); }
  const Value &operator*() const { return item(); }
  const Value *operator->() const { return &item(); }
  const Value *operator&() const { return &item(); }
}; // class ConstAccessor

template <class Final, class Parameters>
class SetAccessor : public ConstAccessor<Final, Parameters> {
private:
  using Base = ConstAccessor<Final, Parameters>;
  using Base::Base;

private:
  using GenericPoolHandle = GenericPoolHandle<Final, Parameters>;
  using Custom = Custom<Final, Parameters>;
  using Value = typename Custom::Value;
  using Bucket = Bucket<Final, Parameters>;
  using Buckets = Buckets<Final, Parameters>;
  using Entry = typename Custom::Entry;

protected:
  auto &_hashTable() { return const_cast<Custom &>(this->hashTable); }
  auto &_handle() { return const_cast<GenericPoolHandle &>(*this->pHandle); }
  auto &_pool() { return this->_hashTable()._pool(); }
  auto &_buckets() { return this->_hashTable()._buckets(); }

public:
  void erase() {
    DCHECK(this->exists);
    auto &pool = _pool();
    auto node = pool[*this->pHandle];
    this->_handle() = node->nextNode;
    node.erase();
    --this->_hashTable()._numItems();
  }

public:
  void maybeErase() {
    if (this->exists) {
      erase();
    }
  }

protected:
  void _maybeGrow() {
    if (this->_hashTable().shouldGrow()) [[unlikely]] {
      // auto prevNumBuckets = this->_hashTable().buckets.numItems;
      this->_hashTable().grow();
      const_cast<Buckets::Handle &>(this->bucket) =
          this->_hashTable()._bucketIndex(this->key);
      // if (prevNumBuckets == 0) [[unlikely]] {
      // const_cast<GenericPoolHandle *&>(this->pHandle) =
      //     &this->_buckets()[this->bucket].item().firstNode;
      // }
    }
  }

public:
  void insert() {
    DCHECK(!this->exists);
    this->_maybeGrow();
    auto &pool = this->_pool();
    auto node = pool.insert(Entry{this->key}).handle;
    auto &buckets = this->_buckets();
    auto &bucket = buckets[this->bucket].item();
    pool[node]->nextNode = bucket.firstNode;
    bucket.firstNode = node;
    const_cast<GenericPoolHandle *&>(this->pHandle) = &bucket.firstNode;
    ++this->_hashTable()._numItems();
  }

  void set() {
    if (!this->exists) {
      insert();
    }
  }

  // explicit operator bool() const { return this->exists; }

public:
  Value &item() { return const_cast<Value &>(Base::item()); }
  operator Value &() { return item(); }
  Value &operator*() { return item(); }
  Value *operator->() { return &item(); }
  Value *operator&() { return &item(); }
}; // class SetAccessor

template <class Final, class Parameters>
class MapAccessor : public SetAccessor<Final, Parameters> {
private:
  using Base = SetAccessor<Final, Parameters>;
  using Base::Base;
  using Custom = Custom<Final, Parameters>;
  using Buckets = typename Custom::Buckets;
  using Value = typename Custom::Value;
  using GenericPoolHandle = GenericPoolHandle<Final, Parameters>;

public:
  template <class... Args> void insert(Args &&...args) {
    DCHECK(!this->exists);
    this->_maybeGrow();
    auto &pool = this->_pool();
    auto node =
        pool.insert(Entry{this->key, Value(std::forward<Args>(args)...)});
    auto &buckets = this->_buckets();
    auto &bucket = buckets[this->bucket].item();
    node->nextNode = bucket.firstNode;
    bucket.firstNode = node.handle;
    const_cast<GenericPoolHandle *&>(this->pHandle) = &bucket.firstNode;
    ++this->_hashTable()._numItems();
    const_cast<bool &>(this->exists) = true;
    // const_cast<GenericPoolHandle &>(this->handle) = node.handle;
  }

  template <class... Args> MapAccessor &maybeInsert(Args &&...args) {
    if (!this->exists) {
      insert(std::forward<Args>(args)...);
    }
    return *this;
  }

  template <class... Args> MapAccessor &maybeInsertLikely(Args &&...args) {
    if (!this->exists) [[likely]] {
      insert(std::forward<Args>(args)...);
    }
    return *this;
  }

  template <class... Args> MapAccessor &maybeInsertUnlikely(Args &&...args) {
    if (!this->exists) [[unlikely]] {
      insert(std::forward<Args>(args)...);
    }
    return *this;
  }

  template <class... Args> void update(Args &&...args) {
    DCHECK(this->exists);
    auto &bucket =
        const_cast<Buckets &>(this->hashTable().buckets)[this->handle.bucket];
    auto &value = getValue(bucket.entries[this->handle.entry]);
    value = Value(std::forward<Args>(args)...);
    // value.~Value();
    // new (&value) Value(std::forward<Args>(args)...);
  }

  template <class... Args> void set(Args &&...args) {
    if (this->exists) {
      update(std::forward<Args>(args)...);
    } else {
      insert(std::forward<Args>(args)...);
    }
  }

  template <class Other> auto &operator=(Other &&other) {
    set(std::forward<Other>(other));
    return *this;
  }
}; // class MapAccessor

template <class Final, class Parameters> class ConstIterator {
private:
  using Custom = Custom<Final, Parameters>;
  using Buckets = typename Custom::Buckets;
  using Pool = Pool<Final, Parameters>;
  using Entry = typename Custom::Entry;

private:
  Buckets::Handle bucket;
  Pool::Handle node;
  const Custom &hashTable;

private:
  friend Custom;
  ConstIterator(const Buckets::Handle &bucket, const Pool::Handle &node,
                const Custom &hashTable)
      : bucket(bucket), node(node), hashTable(hashTable) {}

public:
  /** @internal - works only for comparisons with .end() */
  bool operator!=(const ConstIterator &other) const {
    DCHECK_EQ(&hashTable, &other.hashTable);
    return this->node; // !
  }

  auto &operator++() {
    if (this->node) {
      auto &pool = this->hashTable.pool;
      this->node = pool[this->node]->nextNode;
    } else {
      ++bucket;
      auto &buckets = this->hashTable.buckets;
      this->node = buckets[bucket]->firstNode;
    }
    return *this;
  }

  const Entry &operator*() const {
    auto &pool = this->hashTable.pool;
    return pool[node]->entry;
  }
}; // class ConstIterator

template <class Final, class Parameters>
class Iterator : public ConstIterator<Final, Parameters> {
private:
  using Base = ConstIterator<Final, Parameters>;
  using Custom = Custom<Final, Parameters>;
  using Buckets = Buckets<Final, Parameters>;
  using Pool = Pool<Final, Parameters>;

private:
  friend Custom;
  Iterator(const Buckets::Handle &bucket, const Pool::Handle &node,
           Custom &hashTable)
      : Base(bucket, node, hashTable) {}
}; // class Iterator
} // namespace VOLTISO_NAMESPACE::hashTable::_

//

namespace VOLTISO_NAMESPACE::hashTable {
// struct Defaults {
//   using Entry = void; // need to override
//   using Allocator = allocator::Malloc;
// };

//

template <class Final, class Parameters> class Custom : public Object<Final> {
private:
  using Self = Custom;

public:
  using Entry = getParameter::Type<parameter::Entry, Parameters>;
  using Key = GetKey<Entry>;
  using Value = GetValue<Entry>;

  static_assert(!std::is_same_v<Key, void>);
  static_assert(!std::is_same_v<Value, void>);

private:
  using Allocator = getParameter::Type<parameter::Allocator, Parameters>;
  using Bucket = _::Bucket<Final, Parameters>;
  using Buckets = _::Buckets<Final, Parameters>;
  using Node = _::Node<Final, Parameters>;
  using Pool = _::Pool<Final, Parameters>;
  using GenericPoolHandle = _::GenericPoolHandle<Final, Parameters>;

public:
  Buckets const buckets = {};
  Pool const pool = {};
  size_t const numItems = 0;

private:
  Buckets &_buckets() { return const_cast<Buckets &>(this->buckets); }
  Pool &_pool() { return const_cast<Pool &>(this->pool); }
  size_t &_numItems() { return const_cast<size_t &>(this->numItems); }

public:
  Custom() = default;
  Custom(std::initializer_list<Entry> entries) {
    auto numBuckets = std::bit_ceil(entries.size()) * MAX_LOAD_FACTOR_INV;
    auto &buckets = this->_buckets();
    buckets.setNumItems(numBuckets);
    for (auto &entry : entries) {
      if constexpr (std::is_same_v<Value, Entry> ||
                    std::is_same_v<Value, void>) {
        (*this)[entry].insert();
      } else {
        (*this)[getKey(entry)].insert(getValue(entry));
      }
    }
  }

  using ConstAccessor = _::ConstAccessor<Final, Parameters>;
  friend ConstAccessor;
  using Accessor = std::conditional_t<
      std::is_same_v<Value, Entry> || std::is_same_v<Value, void>,
      _::SetAccessor<Final, Parameters>, _::MapAccessor<Final, Parameters>>;
  friend Accessor;
  friend _::SetAccessor<Final, Parameters>;
  friend _::MapAccessor<Final, Parameters>;

  using Iterator = _::Iterator<Final, Parameters>;
  friend Iterator;
  using ConstIterator = _::ConstIterator<Final, Parameters>;
  friend ConstIterator;

private:
  Buckets::Handle _bucketIndex(const Key &key) const {
    auto hash = std::hash<Key>{}(key);
    DCHECK(std::has_single_bit(buckets.numItems));
    // auto index = hash % buckets.numItems;
    auto index = hash & (buckets.numItems - 1);
    return typename Buckets::Handle(index);
  }

private:
  void grow() {
    auto newNumBuckets = buckets.numItems << 1;
    if (!newNumBuckets) [[unlikely]]
      newNumBuckets = 1;
    setNumBuckets(newNumBuckets);
  }

  void setNumBuckets(std::size_t newNumBuckets) {
    DCHECK(std::has_single_bit(newNumBuckets));
    auto &buckets = this->_buckets();
    auto &pool = this->_pool();
    auto oldNumBuckets = buckets.numItems;
    buckets.setNumItems(newNumBuckets);
    for (size_t i = 0; i < oldNumBuckets; ++i) {
      auto &oldBucket = buckets[i].item();
      auto pNode = &oldBucket.firstNode;
      while (*pNode) {
        auto newIndex = _bucketIndex(getKey(pool[*pNode]->entry));
        if (newIndex.value == i) {
          pNode = &pool[*pNode]->nextNode;
        } else if (newIndex.value != i) {
          auto oldBucketRest = pool[*pNode]->nextNode;
          auto &newBucket = buckets[newIndex].item();
          auto newBucketRest = newBucket.firstNode;
          newBucket.firstNode = *pNode;
          pool[*pNode]->nextNode = newBucketRest;
          *pNode = oldBucketRest;
        }
      }
    }
  }

  static constexpr size_t MAX_LOAD_FACTOR_INV = 2; // 0.5 load factor

  bool shouldGrow() const {
    return MAX_LOAD_FACTOR_INV * numItems >= buckets.numItems;
  }

  void maybeGrow() {
    if (shouldGrow()) [[unlikely]]
      grow();
  }

public:
  Accessor operator[](const Key &key) {
    if (buckets.numItems == 0) [[unlikely]]
      return {nullptr, typename Buckets::Handle(0), key, false, *this};
    auto bucket = _bucketIndex(key);
    auto pHandle = &buckets[bucket]->firstNode;
    while (*pHandle && getKey(pool[*pHandle]->entry) != key) {
      // auto &poolNode = pool[*pHandle].item();
      pHandle = &pool[*pHandle]->nextNode;
    }
    bool exists = (bool)(*pHandle);
    return {pHandle, bucket, key, exists, *this};
  }
  ConstAccessor operator[](const Key &key) const {
    if (buckets.numItems == 0) [[unlikely]]
      return {nullptr, typename Buckets::Handle(0), key, false, *this};
    auto bucket = _bucketIndex(key);
    auto pHandle = &buckets[bucket]->firstNode;
    while (*pHandle && getKey(pool[*pHandle]->entry) != key) {
      pHandle = &pool[*pHandle]->nextNode;
    }
    bool exists = *pHandle;
    return {pHandle, bucket, key, exists, *this};
  }

public:
  Iterator begin() {
    auto node = buckets.numItems ? buckets[0]->firstNode : Pool::Handle::null;
    return Iterator{Buckets::Handle(0), node, *this};
  }
  Iterator end() {
    return Iterator{Buckets::Handle(buckets.numItems), Pool::Handle::null,
                    *this};
  }

  ConstIterator begin() const {
    auto node =
        buckets.numItems ? buckets[0]->firstNode : Buckets::Handle::null;
    return ConstIterator{Buckets::Handle(0), node, *this};
  }

  ConstIterator end() const {
    return ConstIterator{Buckets::Handle(buckets.numItems), Pool::Handle::null,
                         *this};
  }

public:
  template <class... NewParameters>
  using With =
      Custom<Final, decltype(std::tuple_cat(
                        std::declval<Parameters>(),
                        std::declval<std::tuple<NewParameters...>>()))>;

  template <class NewAllocator>
  using WithAllocator = With<parameter::Allocator<NewAllocator>>;
};
} // namespace VOLTISO_NAMESPACE::hashTable
// VOLTISO_OBJECT_FINAL(hashTable)
// VOLTISO_OBJECT_TRIVIALLY_RELOCATABLE(hashTable)

namespace VOLTISO_NAMESPACE {
template <class Entry>
class HashTable final
    : public hashTable::Custom<HashTable<Entry>,
                               std::tuple<parameter::Entry<Entry>>> {
  using Base =
      hashTable::Custom<HashTable<Entry>, std::tuple<parameter::Entry<Entry>>>;
  using Base::Base;
};
} // namespace VOLTISO_NAMESPACE
