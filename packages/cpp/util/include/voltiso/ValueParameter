#pragma once
#include <voltiso/_>

#include <type_traits>

namespace VOLTISO_NAMESPACE {

template <auto value, auto defaultValue = value> struct ValueParameter {
  static constexpr auto storedValue = value;
  static constexpr auto storedDefaultValue = defaultValue;
};

namespace _ {
template <class T>
auto test_is_value_argument(int)
    -> decltype(T::storedValue, T::storedDefaultValue, std::true_type{});

template <class> std::false_type test_is_value_argument(...);
} // namespace _

template <class T>
constexpr auto is_value_argument =
    decltype(_::test_is_value_argument<T>(0))::value;

//

// static_assert(is_value_argument<ValueParameter<1, 2>>);
// static_assert(!is_value_argument<int>);

} // namespace VOLTISO_NAMESPACE
