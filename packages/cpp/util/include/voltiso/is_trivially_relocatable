#pragma once
#include <voltiso/_>

#include <memory>
#include <type_traits>

namespace VOLTISO_NAMESPACE {

// ! std::remove_all_extents not working ?????????

template <class T>
static constexpr auto is_trivially_relocatable =
    // !std::is_class_v<T> && !std::is_union_v<T>;
    // !std::is_class_v<std::remove_all_extents<T>> &&
    // !std::is_union_v<std::remove_all_extents<T>>;
    std::is_reference_v<T> ||
    std::is_trivially_copyable_v<T>; // may be incomplete yet

template <class T>
static constexpr auto is_trivially_relocatable<std::unique_ptr<T>> = true;

template <class T>
static constexpr auto is_trivially_relocatable<std::shared_ptr<T>> = true;

// static_assert(is_trivially_relocatable<int>);

} // namespace VOLTISO_NAMESPACE
