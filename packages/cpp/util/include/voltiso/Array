#pragma once
#include <voltiso/_>

#include "voltiso/Handle"
#include "voltiso/Object"
#include "voltiso/ValueParameter"
#include "voltiso/getParameter/VALUE"
#include "voltiso/is_trivially_relocatable"
#include "voltiso/memory/Iterator"

#include <cstddef>
#include <type_traits>

namespace VOLTISO_NAMESPACE {

namespace array {

// Parameter types
namespace parameter {
template <std::make_signed_t<std::size_t> N>
struct StartingIndex : ValueParameter<N, 0> {};
} // namespace parameter

// Main Array class
template <class Final, class Parameters> class Custom : public Object<Final> {
  using Base = Object<Final>;
  using Self = Custom;

public:
  using Item =
      getParameter::Type<VOLTISO_NAMESPACE::parameter::Item, Parameters>;

  static constexpr auto NUM_ITEMS =
      getParameter::VALUE<VOLTISO_NAMESPACE::parameter::NumItems, Parameters>;

  static constexpr auto STARTING_INDEX =
      getParameter::VALUE<parameter::StartingIndex, Parameters>;

  // Make sure required parameters are set
  static_assert(!std::is_same_v<Item, void>, "Item type must be specified");
  static_assert(NUM_ITEMS > 0, "Array size must be greater than 0");

  template <class Type>
  using CustomHandle = Handle::WithBrand<Final>::template WithType<Type>;

  // template <class Type>
  // struct CustomHandle : Handle::WithBrand<Final>::template WithType<Type> {
  //   using Base = Handle::WithBrand<Final>::template WithType<Type>;
  //   using Base::Base;
  //   using Base::operator=;
  // };

  using Handle =
      CustomHandle<std::conditional_t<(STARTING_INDEX < 0),
                                      std::make_signed<size_t>, size_t>>;

  Item items[NUM_ITEMS];

public:
  using Base::Base;
  using Base::operator=;

  Custom() = default;

  Custom(std::initializer_list<Item> list) {
    size_t i = 0;
    for (auto &item : list) {
      items[i++] = item;
    }
    for (; i < NUM_ITEMS; i++) {
      items[i] = Item{};
    }
  }

  template <class InferredHandle,
            std::enable_if_t<std::is_same_v<typename InferredHandle::Brand,
                                            Final>> * = nullptr>
  const Item &operator[](const InferredHandle &handle) const {
    DCHECK_GE(handle.value, STARTING_INDEX);
    DCHECK_LT(handle.value - STARTING_INDEX, NUM_ITEMS);
    return items[handle.value - STARTING_INDEX];
  }

  template <class InferredHandle,
            std::enable_if_t<std::is_same_v<typename InferredHandle::Brand,
                                            Final>> * = nullptr>
  Item &operator[](const InferredHandle &handle) {
    return const_cast<Item &>(const_cast<const Custom &>(*this)[handle]);
  }

  // Automatic deduction does not work when assigning raw value, since the above
  // methods are templated, and creating handle from a raw value is ambiguous
  // (we can create a larger handle from a smaller value), se below we
  // explicitly define `operator[]` for raw values

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  const Item &operator[](const Index &index) const {
    return (*this)[CustomHandle<Index>(index)];
  }

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  Item &operator[](const Index &index) {
    return (*this)[CustomHandle<Index>(index)];
  }

  /**
   *  - Invalidates on relocation
   */
  class Iterator final : public memory::IteratorCrtp<Item, Iterator> {
  public:
    using Self = Iterator;
    using Base = memory::IteratorCrtp<Item, Iterator>;
    using Item = Item;
    using Base::Base;
  };

  /**
   *  - Invalidates on relocation
   */
  class ConstIterator final
      : public memory::ConstIteratorCrtp<Item, ConstIterator> {
  public:
    using Self = ConstIterator;
    using Base = memory::ConstIteratorCrtp<Item, ConstIterator>;
    using Item = Item;
    using Base::Base;
  };

  Iterator begin() { return Iterator{items}; }
  Iterator end() { return Iterator{items + NUM_ITEMS}; }

  ConstIterator begin() const { return ConstIterator{items}; }
  ConstIterator end() const { return ConstIterator{items + NUM_ITEMS}; }

public:
  template <class Parameter>
  using With =
      Custom<Final,
             decltype(std::tuple_cat(std::declval<std::tuple<Parameter>>(),
                                     std::declval<Parameters>()))>;

  template <class T>
  using WithItem = With<VOLTISO_NAMESPACE::parameter::Item<T>>;

  template <std::size_t N>
  using WithSize = With<VOLTISO_NAMESPACE::parameter::NumItems<N>>;

  template <std::size_t N>
  using WithStartingIndex = With<parameter::StartingIndex<N>>;
};

} // namespace array

} // namespace VOLTISO_NAMESPACE

namespace std {
template <class Final, class... Parameters>
ostream &operator<<(
    ostream &os,
    const VOLTISO_NAMESPACE::array::Custom<Final, Parameters...> &array) {
  using Array = VOLTISO_NAMESPACE::array::Custom<Final, Parameters...>;
  os << "[";
  for (size_t i = 0; i < Array::NUM_ITEMS; i++) {
    if (i > 0) {
      os << ", ";
    }
    os << array[i];
  }
  return os << "]";
}
} // namespace std

namespace VOLTISO_NAMESPACE {
template <class Final, class... Parameters>
static constexpr auto
    is_trivially_relocatable<array::Custom<Final, Parameters...>> = true;

template <class Item, size_t NUM_ITEMS>
class Array final
    : public array::Custom<
          Array<Item, NUM_ITEMS>,
          std::tuple<parameter::Item<Item>, parameter::NumItems<NUM_ITEMS>>> {
  using Base = array::Custom<
      Array<Item, NUM_ITEMS>,
      std::tuple<parameter::Item<Item>, parameter::NumItems<NUM_ITEMS>>>;

public:
  using Base::Base; // Inherit constructors
};

} // namespace VOLTISO_NAMESPACE
