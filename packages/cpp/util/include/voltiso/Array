#pragma once
#include <voltiso/_>

#include "voltiso/Handle"
#include "voltiso/Object"
#include "voltiso/Options"
#include "voltiso/memory/Iterator"

#include "glog/logging.h"

#include <cstddef>
#include <type_traits>

namespace VOLTISO_NAMESPACE::array {

struct Defaults {
  using Item = void;                          // need to override
  static constexpr std::size_t NUM_ITEMS = 0; // need to override
  static constexpr std::make_signed_t<size_t> STARTING_INDEX = 0;
};

using DefaultOptions = Options<Defaults>;

//

// similar to `std::array`
template <class _Options> class Build : public Object<_Options> {
  using Self = Build;
  using Base = Object<_Options>;

public:
  using Options = _Options;
  using Item = Options::Item;
  static constexpr auto NUM_ITEMS = Options::NUM_ITEMS;
  static constexpr auto STARTING_INDEX = Options::STARTING_INDEX;
  // static constexpr auto numItems = NUM_ITEMS;

  template <class Type>
  using CustomHandle = Handle::Brand_<Self>::template Type_<Type>;

  using Handle =
      CustomHandle<std::conditional_t<(STARTING_INDEX < 0),
                                      std::make_signed<size_t>, size_t>>;

  Item items[NUM_ITEMS];

public:
  using Base::Base;
  using Base::operator=;

  Build() = default;

  Build(std::initializer_list<Item> list) {
    size_t i = 0;
    for (auto &item : list) {
      items[i++] = item;
    }
    for (; i < NUM_ITEMS; i++) {
      items[i] = Item{};
    }
  }

  template <class Index>
  const Item &operator[](const CustomHandle<Index> &handle) const {
    DCHECK_GE(handle.value, STARTING_INDEX);
    DCHECK_LT(handle.value - STARTING_INDEX, NUM_ITEMS);
    return items[handle.value - STARTING_INDEX];
  }

  template <class Index> Item &operator[](const CustomHandle<Index> &handle) {
    return const_cast<Item &>(const_cast<const Self &>(*this)[handle]);
  }

  // Automatic deduction does not work when assigning raw value, since the above
  // methods are templated, and creating handle from a raw value is ambiguous
  // (we can create a larger handle from a smaller value), se below we
  // explicitly define `operator[]` for raw values

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  const Item &operator[](const Index &index) const {
    return (*this)[CustomHandle<Index>(index)];
  }

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  Item &operator[](const Index &index) {
    return (*this)[CustomHandle<Index>(index)];
  }

  /**
   *  - Invalidates on relocation
   */
  class Iterator final : public memory::IteratorCrtp<Item, Iterator> {
  public:
    using Self = Iterator;
    using Base = memory::IteratorCrtp<Item, Iterator>;
    using Item = Item;
    using Base::Base;
  };

  /**
   *  - Invalidates on relocation
   */
  class ConstIterator final
      : public memory::ConstIteratorCrtp<Item, ConstIterator> {
  public:
    using Self = ConstIterator;
    using Base = memory::ConstIteratorCrtp<Item, ConstIterator>;
    using Item = Item;
    using Base::Base;
  };

  Iterator begin() { return Iterator{items}; }
  Iterator end() { return Iterator{items + NUM_ITEMS}; }

  ConstIterator begin() const { return ConstIterator{items}; }
  ConstIterator end() const { return ConstIterator{items + NUM_ITEMS}; }
};
} // namespace VOLTISO_NAMESPACE::array
VOLTISO_OBJECT_FINAL(array)

//

namespace std {
template <class Options>
ostream &operator<<(ostream &os,
                    const VOLTISO_NAMESPACE::array::Build<Options> &array) {
  os << "[";
  for (size_t i = 0; i < Options::NUM_ITEMS; i++) {
    if (i > 0) {
      os << ", ";
    }
    os << array[i];
  }
  return os << "]";
}
} // namespace std

//

namespace VOLTISO_NAMESPACE {
template <class Options>
static constexpr auto is_trivially_relocatable<array::Build<Options>> = true;

template <class Options>
static constexpr auto is_trivially_relocatable<array::Final<Options>> = true;

template <class Item, size_t NUM_ITEMS>
using Array = array::Final<typename array::DefaultOptions::Item_<
    Item>::template NUM_ITEMS_<NUM_ITEMS>>;

// using A = typename array::DefaultOptions::Item_<int>::template NUM_ITEMS_<5>;
// using B = typename array::DefaultOptions::template NUM_ITEMS_<5>::Item_<int>;
// static_assert(std::is_same_v<A,B>);

} // namespace VOLTISO_NAMESPACE
