#pragma once
#include <voltiso/_>

#include "voltiso/Object"
#include "voltiso/TypeParameter"
#include "voltiso/getParameter/Type"
#include "voltiso/parameter"

#include <cstdint>
#include <limits>
#include <ostream>
#include <type_traits>

//

namespace VOLTISO_NAMESPACE {

namespace handle::parameter {
template <class T> struct Type : TypeParameter<T, void *> {};
} // namespace handle::parameter

namespace handle::_ {
template <class Type> constexpr auto getNullValue() noexcept {
  if constexpr (std::is_pointer_v<Type>) {
    return uintptr_t(0);
  } else {
    return std::numeric_limits<Type>::max();
  }
}
} // namespace handle::_

namespace handle {
template <class Final, class Parameters = std::tuple<>>
class Custom : public Object<Final> {
private:
  using Self = Custom;

public:
  using Brand =
      getParameter::Type<VOLTISO_NAMESPACE::parameter::Brand, Parameters>;

  using Type = getParameter::Type<parameter::Type, Parameters>;

  using Value =
      std::conditional_t<std::is_pointer_v<Type>, std::uintptr_t, Type>;

  using Pointer = std::conditional_t<std::is_pointer_v<Type>, Type, void>;

  static_assert(std::is_integral_v<Type> || std::is_pointer_v<Type>);
  static_assert(std::is_integral_v<Value>);

public:
  Value value;

  Custom() noexcept = default;

  template <class OtherValue,
            std::enable_if_t<std::is_integral_v<OtherValue> &&
                             sizeof(Value) >= sizeof(OtherValue)> * = nullptr>
  explicit constexpr Custom(const OtherValue &value) noexcept : value(value) {}

  template <class Other,
            std::enable_if_t<(std::is_same_v<Brand, void> ||
                              std::is_same_v<typename Other::Brand, void> ||
                              std::is_same_v<typename Other::Brand, Brand>) &&
                             sizeof(Value) >= sizeof(typename Other::Value)> * =
                nullptr>
  constexpr Custom(const Other &other) : value(other.value) {}

  template <class P = Pointer, class = std::enable_if_t<std::is_pointer_v<P>>>
  constexpr Custom(const std::nullptr_t &) noexcept
      : value(_::getNullValue<Type>()) {}

  explicit constexpr operator Value() const noexcept { return value; }

  bool operator==(const Self &other) const noexcept {
    return value == other.value;
  }

  bool operator!=(const Self &other) const noexcept {
    return value != other.value;
  }

  static const Final null;

  explicit operator bool() const noexcept { return *this != Self::null; }

  template <class P = Pointer,
            std::enable_if_t<std::is_pointer_v<P>> * = nullptr>
  explicit constexpr Custom(const P &value) noexcept
      : value(reinterpret_cast<Value>(value)) {}

  template <class P = Pointer,
            class = std::enable_if_t<std::is_same_v<P, Pointer> &&
                                     !std::is_same_v<P, void>>>
  operator P() const noexcept {
    return reinterpret_cast<Pointer>(value);
  }

  template <class P = Pointer,
            class = std::enable_if_t<std::is_same_v<P, Pointer> &&
                                     !std::is_same_v<P, void>>>
  operator void *() const noexcept {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
    return std::bit_cast<void *>(value);
#pragma GCC diagnostic pop
  } // operator void *()

  // for pointer-handles
  template <class P = Pointer,
            class = std::enable_if_t<!std::is_same_v<P, void>>>
  auto operator*() const noexcept -> std::remove_pointer_t<P> & {
    return *std::bit_cast<P>(this->value);
  }

  template <class P = Pointer,
            class = std::enable_if_t<!std::is_same_v<P, void>>>
  auto operator->() const noexcept -> P {
    return std::bit_cast<P>(this->value);
  }

public:
  template <class Argument>
  class With : public handle::Custom<With<Argument>,
                                     decltype(std::tuple_cat(
                                         std::declval<std::tuple<Argument>>(),
                                         std::declval<Parameters>()))> {
    using Base =
        handle::Custom<With<Argument>, decltype(std::tuple_cat(
                                           std::declval<std::tuple<Argument>>(),
                                           std::declval<Parameters>()))>;
    using Base::Base;
    // using Base::operator=;
  };

  template <class NewBrand>
  using WithBrand = With<VOLTISO_NAMESPACE::parameter::Brand<NewBrand>>;

  template <class NewType>
  using WithType = With<handle::parameter::Type<NewType>>;

}; // class Custom

template <class Final, class Parameters>
constexpr Final Custom<Final, Parameters>::null = static_cast<Final>(
    _::getNullValue<typename Custom<Final, Parameters>::Type>());

template <class Final, class... Parameters>
std::ostream &operator<<(std::ostream &os,
                         const Custom<Final, Parameters...> &handle) {
  if (handle == Custom<Final, Parameters...>::null) [[unlikely]] {
    return os << "Handle::null";
  }
  return os << "Handle(" << handle.value << ")";
}

} // namespace handle

// Define Handle after Custom is complete
class Handle : public handle::Custom<Handle> {
  using Base = handle::Custom<Handle>;
  using Base::Base;
};

} // namespace VOLTISO_NAMESPACE

//

namespace std {
template <class Final, class Parameters>
struct hash<VOLTISO_NAMESPACE::handle::Custom<Final, Parameters>> {
  using HandleType = VOLTISO_NAMESPACE::handle::Custom<Final, Parameters>;
  auto operator()(const HandleType &handle) const {
    return ::std::hash<typename HandleType::Value>{}(handle.value);
  }
};

template <> struct hash<VOLTISO_NAMESPACE::Handle> {
  using HandleType = VOLTISO_NAMESPACE::Handle;
  auto operator()(const HandleType &handle) const {
    return ::std::hash<typename HandleType::Value>{}(handle.value);
  }
};
} // namespace std
