#pragma once
#include <voltiso/_>

namespace VOLTISO_NAMESPACE::concepts::_ {
// Example parameter for testing
template <class T> struct ExampleTypeOption {
  using StoredType = T;
  using StoredDefault = int;
  static constexpr auto VALUE = 42;
  static constexpr auto DEFAULT = 0;
};

template <auto V> struct ExampleValueOption {
  static constexpr auto VALUE = V;
  static constexpr auto DEFAULT = 0;
};
} // namespace VOLTISO_NAMESPACE::concepts::_

namespace VOLTISO_NAMESPACE::concepts {
template <class A>
concept Options = requires {
  typename A::template Get<_::ExampleTypeOption>;

	// ! this causes compiler to crash (clang-20)
	// A::template GET<_::ExampleValueOption>; // !!!!!

	typename A::template With<_::ExampleTypeOption<int>>;
  typename A::template With<_::ExampleValueOption<42>>;
};
} // namespace VOLTISO_NAMESPACE::concepts
