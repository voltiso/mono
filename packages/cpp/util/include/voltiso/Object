#pragma once
#include <voltiso/_>

// #include "voltiso/has"
// #include "voltiso/is_derived_from"
// #include "voltiso/is_trivially_relocatable"

// #include "glog/logging.h"

#include <cstring>

//

namespace VOLTISO_NAMESPACE {

// Here we could test if Final is actually final, but it's impossible, because:
//  - We want `Object` default-constructible (can't test in
//  constructor/destructor)
//  - Can't test in `Object` body, because `Final` may be incomplete
template <class Final> class Object {
  // private:
  //   using Self = Object;

  // private:
  //   static void _test() noexcept {
  //     static_assert(std::is_final_v<Final>);
  //     // static_assert(is_derived_from<Final, Self>);

  //     static_assert(!std::is_polymorphic_v<Final>);
  //     static_assert(!std::is_polymorphic_v<Self>);
  //   }

  // private:
  //   // - move-only (enable_if)
  //   // - cannot enable_if `is_trivially_relocatable` here - Final may be
  //   //   incomplete yet
  //   template <class Other,
  //             std::enable_if_t<!std::is_reference_v<Other>> * = nullptr>
  //   void _relocate(Other &&other) noexcept {
  //     _test();
  //     static_assert(is_trivially_relocatable<Final>);
  //     static_assert(is_trivially_relocatable<Other>);
  //     static_assert(is_trivially_relocatable<Self>);

  //     static_assert(!std::is_polymorphic_v<Other>);
  //     static_assert(is_derived_from<Final, Other>);
  //     static_assert(sizeof(Final) == sizeof(Other));

  //     static_assert(!has::_assumeRelocated<Final>,
  //                   "_assumeRelocated() should be private");

  //     ::memcpy(this, &other, sizeof(Final));
  //     other._assumeRelocated();
  //   }

  //   auto &_finalSelf() noexcept {
  //     _test();
  //     return reinterpret_cast<Final &>(*this);
  //   }

public:
  Object() = default; // must be trivially default constructible
  // Object() { _test(); }

  ~Object() = default; // must be trivially destructible

  // // - move-only (enable_if)
  // // - cannot enable_if `is_trivially_relocatable` here - Final may be
  // //   incomplete yet
  // template <class Other,
  //           std::enable_if_t<!std::is_reference_v<Other>> * = nullptr>
  // Object(Other &&other) noexcept {
  //   // DLOG(INFO) << "Object(Other &&other) noexcept";
  //   _relocate(std::forward<Other>(other));
  // }

  // // - move-only (enable_if)
  // // - cannot enable_if `is_trivially_relocatable` here - Final may be
  // //   incomplete yet
  // template <class Other,
  //           std::enable_if_t<!std::is_reference_v<Other>> * = nullptr>
  // Final &operator=(Other &&other) noexcept {
  //   // DLOG(INFO) << "Final &operator=(Other &&other) noexcept";
  //   auto &final = _finalSelf();
  //   final.~Final();
  //   _relocate(std::move(other));
  //   return final;
  // }
};

// struct MyTest : Object<MyTest> {};
// static_assert(std::is_trivially_destructible_v<MyTest>);
// static_assert(std::is_trivially_default_constructible_v<MyTest>);

} // namespace VOLTISO_NAMESPACE
