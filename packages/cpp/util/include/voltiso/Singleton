#pragma once
#include <voltiso/_>

#include "voltiso/Storage"

// #include <iostream>

// #ifndef VOLTISO_DEBUG_SINGLETON
// #define VOLTISO_DEBUG_SINGLETON VOLTISO_DEBUG
// #endif

// #if VOLTISO_DEBUG_SINGLETON
// #include "voltiso/throwError"
// #endif

// namespace VOLTISO_NAMESPACE::singleton {
// template <class T> auto &get() {
//   static T instance;
//   return instance;
// }
// } // namespace VOLTISO_NAMESPACE::singleton

namespace VOLTISO_NAMESPACE {
// struct perThread {
//   template <class T> static auto &instance() {
//     static thread_local T instance;
//     return instance;
//   }
// }; // struct perThread

template <class T> class Singleton {
private:
  struct Data {
    Storage<T> storage;
    std::size_t numReferences = 1;
    Data() {
      // storage.construct();

      // can't use storage.construct(), because Storage is not a friend
      new (&storage.item()) T();
    }
    void decrement() {
      --numReferences;
      if (numReferences == 0) [[unlikely]] {
        // std::cout << "singleton::Data destroy " << typeid(T).name()
        //           << std::endl;
        storage.destroy();
      }
    }
    ~Data() { decrement(); }
  }; // struct Data

  static Data &data() {
    static Data data;
    return data;
  }

public:
  static T &instance() {
    // #if VOLTISO_DEBUG_SINGLETON
    //     if (data().numReferences == 0) [[unlikely]] {
    //       throwError(
    //           std::runtime_error("singleton::instance() numReferences ==
    //           0"));
    //     }
    // #endif
    return data().storage.item();
  }

  // ! if your singletons depend on each other, derive the user-singleton class
  // from `Guard`
  class Guard {
  public:
    Guard() { ++data().numReferences; }
    ~Guard() { data().decrement(); }
  }; // class Guard
}; // class Singleton
} // namespace VOLTISO_NAMESPACE
