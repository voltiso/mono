#pragma once
#include <voltiso/_>

#include <voltiso/WithCopy>
#include <voltiso/WithMove>
#include <voltiso/WithSize>
#include <voltiso/has>

#include <glog/logging.h>

#include <experimental/type_traits>
#include <memory>
#include <type_traits>

namespace VOLTISO_NAMESPACE {

template <class T> class Owned : public std::unique_ptr<T> {
public:
  // explicit constructor (memory allocation)
  template <class _Derived,
            class = std::enable_if_t< // !isInPlace &&
                !std::is_class_v<std::decay_t<_Derived>> ||
                (std::is_final_v<std::decay_t<_Derived>> ||
                 (std::is_polymorphic_v<std::decay_t<_Derived>> &&
                  (has::move<std::decay_t<_Derived>> ||
                   has::copy<std::decay_t<_Derived>>)))>>
  explicit Owned(_Derived &&value)
      : std::unique_ptr<T>([&value]() {
          using Derived = std::decay_t<_Derived>;

          if constexpr (!std::is_class_v<Derived> || std::is_final_v<Derived>)
            return std::make_unique<Derived>(std::forward<_Derived>(value));
          else if constexpr (!std::is_lvalue_reference_v<_Derived> &&
                             has::move<Derived>) {
            // move
            auto data = malloc(sizeof(Derived));
            value.move(data);
            return (Derived *)data;
          } else if constexpr (has::copy<Derived>) {
            auto data = malloc(sizeof(Derived));
            value.copy(data);
            return (Derived *)data;
          } else {
            DCHECK(false) << "Not implemented";
            // static_assert(false, "Not implemented");
            return nullptr;
          }
        }()) {}

  // template <class TT = T,
  //           std::enable_if_t<!(!std::is_class_v<TT> ||
  //                              (has_size<TT> && has_copy<TT>))> * = nullptr>
  // Owned(const Owned<T> &other) = delete;

  // template <class TT = T,
  //           std::enable_if_t<!std::is_class_v<TT> ||
  //                            (has_size<TT> && has_copy<TT>)> * = nullptr>
  explicit Owned(const Owned<T> &other)
      : std::unique_ptr<T>([&]() {
          auto data = malloc(other->size());
          other->copy(data);
          return (T *)data;
        }()) {
    static_assert(!std::is_class_v<T> || (has::size<T> && has::copy<T>));
  }

  //

  // template <class TT = T,
  //           std::enable_if_t<!(!std::is_class_v<TT> ||
  //                              (has_size<TT> && has_copy<TT>))> * = nullptr>
  // Owned<T> &operator=(const Owned<T> &other) = delete;

  // template <class TT = T,
  //           std::enable_if_t<!std::is_class_v<TT> ||
  //                            (has_size<TT> && has_copy<TT>)> * = nullptr>
  auto &operator=(const Owned &other) {
    static_assert(!std::is_class_v<T> || (has::size<T> && has::copy<T>));

    auto data = malloc(other->size());
    other->copy(data);
    std::unique_ptr<T>::reset((T *)data);
    return *this;
  };

  Owned(Owned<T> &&) = default;               // simply move the `unique_ptr`
  Owned<T> &operator=(Owned<T> &&) = default; // simply move the `unique_ptr`

  // ~Owned() {
  //   if constexpr (isInPlace)
  //     get()->~T();
  //   else
  //   ((std::unique_ptr<T> *)_data)->~unique_ptr();
  // }

  // using std::unique_ptr<T>::get;
  // using std::unique_ptr<T>::operator->;
  // using std::unique_ptr<T>::operator*;

  // T *get() {
  //   if constexpr (isInPlace)
  //     return (T *)_data;
  //   else
  //   return ((std::unique_ptr<T> *)_data)->get();
  // }

  // const T *get() const {
  //   if constexpr (isInPlace)
  //     return (T *)_data;
  //   else
  //   return ((std::unique_ptr<T> *)_data)->get();
  // }

  // auto operator->() { return get(); }
  // auto operator->() const { return get(); }

  // auto &operator*() { return *get(); }
  // auto &operator*() const { return *get(); }

  operator T &() { return *std::unique_ptr<T>::get(); }
  operator const T &() const { return *std::unique_ptr<T>::get(); }

  operator T &&() { return (T &&)*std::unique_ptr<T>::get(); }
  operator const T &&() const { return (T &&)*std::unique_ptr<T>::get(); }
};

// deduction guide
template <class T> Owned(T &&) -> Owned<std::decay_t<T>>;

// operators

#define DEFINE_OPERATOR(op)                                                    \
  template <class T, class Other>                                              \
  auto operator op(const Owned<T> &lhs, Other &&rhs)                           \
      ->decltype(*lhs op std::forward<Other>(rhs)) {                           \
    return *lhs op std::forward<Other>(rhs);                                   \
  }                                                                            \
                                                                               \
  template <class T, class Other>                                              \
  auto operator op(Other &&lhs, const Owned<T> &rhs)                           \
      ->decltype(std::forward<Other>(lhs) op * rhs) {                          \
    return std::forward<Other>(lhs) op * rhs;                                  \
  }

DEFINE_OPERATOR(==)
DEFINE_OPERATOR(!=)

DEFINE_OPERATOR(<)
DEFINE_OPERATOR(<=)

DEFINE_OPERATOR(>)
DEFINE_OPERATOR(>=)

DEFINE_OPERATOR(+)
DEFINE_OPERATOR(+=)

DEFINE_OPERATOR(-)
DEFINE_OPERATOR(-=)

DEFINE_OPERATOR(*)
DEFINE_OPERATOR(*=)

DEFINE_OPERATOR(/)
DEFINE_OPERATOR(/=)

DEFINE_OPERATOR(%)
DEFINE_OPERATOR(%=)

DEFINE_OPERATOR(<<)
DEFINE_OPERATOR(<<=)

DEFINE_OPERATOR(>>)
DEFINE_OPERATOR(>>=)

DEFINE_OPERATOR(&)
DEFINE_OPERATOR(&=)

DEFINE_OPERATOR(|)
DEFINE_OPERATOR(|=)

DEFINE_OPERATOR(^)
DEFINE_OPERATOR(^=)

DEFINE_OPERATOR(&&)
DEFINE_OPERATOR(||)

#undef DEFINE_OPERATOR

// template <class Base, int ReserveSize = sizeof(Base)> struct MaybeInPlace {
//   template <class Derived>
//   MaybeInPlace(Derived &&value)
//       : _value([&value]() {
//           if constexpr (sizeof(Derived) <= sizeof(InPlace<Base>))
//             return InPlace<Base, ReserveSize>(std::forward<Derived>(value));
//           else
//             return std::make_unique<Derived>(std::forward<Derived>(value));
//         }()) {}

//   auto operator->() { if }
//   auto operator->() const { return (const Base *)_value.data(); }

// private:
//   // union {
//   //   InPlace<Base, ReserveSize> inPlace;
//   //   std::unique_ptr<Base> pointer;
//   // } _value;
//   std::variant<InPlace<Base, ReserveSize>, std::unique_ptr<Base>> _value;
// };

} // namespace VOLTISO_NAMESPACE
