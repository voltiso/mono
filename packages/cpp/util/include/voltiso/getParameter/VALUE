#pragma once

#include <tuple>

namespace VOLTISO_NAMESPACE::getParameter {

namespace _ {

// Get value from parameter if it matches, or fallback value if not
template <template <auto> class Parameter, class T, auto Fallback>
struct get_param_value {
  static constexpr auto value = Fallback;
};

template <template <auto> class Parameter, auto V, auto Fallback>
struct get_param_value<Parameter, Parameter<V>, Fallback> {
  static constexpr auto value = Parameter<V>::storedValue;
};

// Implementation helper
template <template <auto> class Parameter, class Tuple> struct ValueImpl {
  static constexpr auto value = Parameter<0>::storedDefaultValue;
};

// Specialization for non-empty tuples
template <template <auto> class Parameter, class Head, class... Tail>
struct ValueImpl<Parameter, std::tuple<Head, Tail...>> {
  static constexpr auto value = get_param_value<
      Parameter, Head,
      ValueImpl<Parameter, std::tuple<Tail...>>::value>::value;
};

} // namespace _

// Helper variable template
template <template <auto> class Parameter, class Tuple>
inline constexpr auto VALUE = _::ValueImpl<Parameter, Tuple>::value;

} // namespace VOLTISO_NAMESPACE::getParameter
