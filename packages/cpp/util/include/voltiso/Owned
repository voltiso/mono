#pragma once

#include "voltiso/Pool"

#include <iostream>
#include <type_traits>
#include <utility>

namespace VOLTISO_NAMESPACE {
template <class Item> class Owned {
  static_assert(!std::is_class_v<Item> || std::is_final_v<Item>);
  using Pool = Pool<Item>;

public:
  template <class... Args> static Owned create(Args &&...args) {
    Owned self;
    self.item = pool().insert(std::forward<Args>(args)...);
    return self;
  }

  static Owned create(const Item &item) {
    Owned self;
    self.item = pool().insert(item);
    return self;
  }

  static Owned create(Item &&item) {
    Owned self;
    self.item = pool().insert(std::move(item));
    return self;
  }

  ~Owned() {
    if (this->item) [[likely]] {
      std::cout << "erase" << std::endl;
      pool()[this->item].erase();
    }
  }

  Owned() = default;

  Owned(const Owned &) = delete;
  Owned &operator=(const Owned &) = delete;

  Owned(Owned &&other) noexcept : item(other.item) {
    other.item = Pool::Handle::null;
  }

  Owned &operator=(Owned &&other) noexcept {
    if (this->item) // ? [[likely]]
      pool()[this->item].erase();
    this->item = other.item;
    other.item = Pool::Handle::null;
    return *this;
  }

  Item &operator*() { return pool()[item].item(); }
  const Item &operator*() const { return pool()[item].item(); }

  Item *operator->() { return &**this; }
  const Item *operator->() const { return &**this; }

  operator Item &() { return **this; }
  operator const Item &() const { return **this; }

  operator Item &&() { return (Item &&)**this; }
  operator const Item &&() const { return (Item &&)**this; }

private:
  Pool::Handle item = Pool::Handle::null;

  static auto &pool() {
    // return *(context::tryGet<Pool>() || &singleton::instance<Pool>());
    // return context::getOrSingleton<Pool>();
    return context::get<Pool>();
    // return singleton::instance<Pool>();
  }
}; // class Owned

#define DEFINE_OPERATOR(op)                                                    \
  template <class T, class Other>                                              \
  auto operator op(const Owned<T> &lhs, Other &&rhs)                           \
      ->decltype(*lhs op std::forward<Other>(rhs)) {                           \
    return *lhs op std::forward<Other>(rhs);                                   \
  }                                                                            \
                                                                               \
  template <class T, class Other>                                              \
  auto operator op(Other &&lhs, const Owned<T> &rhs)                           \
      ->decltype(std::forward<Other>(lhs) op * rhs) {                          \
    return std::forward<Other>(lhs) op * rhs;                                  \
  }

DEFINE_OPERATOR(==)
DEFINE_OPERATOR(!=)

DEFINE_OPERATOR(<)
DEFINE_OPERATOR(<=)

DEFINE_OPERATOR(>)
DEFINE_OPERATOR(>=)

DEFINE_OPERATOR(+)
DEFINE_OPERATOR(+=)

DEFINE_OPERATOR(-)
DEFINE_OPERATOR(-=)

DEFINE_OPERATOR(*)
DEFINE_OPERATOR(*=)

DEFINE_OPERATOR(/)
DEFINE_OPERATOR(/=)

DEFINE_OPERATOR(%)
DEFINE_OPERATOR(%=)

DEFINE_OPERATOR(<<)
DEFINE_OPERATOR(<<=)

DEFINE_OPERATOR(>>)
DEFINE_OPERATOR(>>=)

DEFINE_OPERATOR(&)
DEFINE_OPERATOR(&=)

DEFINE_OPERATOR(|)
DEFINE_OPERATOR(|=)

DEFINE_OPERATOR(^)
DEFINE_OPERATOR(^=)

DEFINE_OPERATOR(&&)
DEFINE_OPERATOR(||)

#undef DEFINE_OPERATOR

} // namespace VOLTISO_NAMESPACE
