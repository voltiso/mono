#pragma once

#include <cstddef>
#include <cstdint>
#include <functional>
#include <type_traits>

namespace VOLTISO_NAMESPACE {

template <class T> std::size_t getHash(const T &value) {
  if constexpr (std::is_reference_v<T>) {
    static_assert(sizeof(std::size_t) == sizeof(std::uintptr_t));
    return std::bit_cast<std::size_t>(&value); // hash pointer value
  } else {
    return std::hash<T>{}(value);
  }
}

} // namespace VOLTISO_NAMESPACE
