#pragma once
#include <voltiso/_>

#include <voltiso/is_derived_from>

#include <type_traits>

namespace VOLTISO_NAMESPACE {

namespace _ {

// Type parameter version
template <template <class...> class Base, class... Args>
std::true_type test_ptr_conv(const volatile Base<Args...> *);

template <template <class...> class>
std::false_type test_ptr_conv(const volatile void *);

template <class Derived, template <class...> class BaseTemplate>
auto test_is_derived_from_template(int)
    -> decltype(test_ptr_conv<BaseTemplate>((Derived *)nullptr));

template <class, template <class...> class>
auto test_is_derived_from_template(...)
    -> std::true_type; // private or ambiguous base

// // Non-type parameter version
// template <template <auto...> class Base, auto... Args>
// std::true_type test_ptr_conv_value(Base<Args...> const volatile *);

// template <template <auto...> class>
// std::false_type test_ptr_conv_value(void const volatile *);

// template <class Derived, template <auto...> class BaseTemplate>
// auto test_is_derived_from_template_value(int)
//     -> decltype(test_ptr_conv_value<BaseTemplate>(
//         static_cast<Derived const volatile *>(nullptr)));

// template <class, template <auto...> class>
// auto test_is_derived_from_template_value(...)
//     -> std::true_type; // private or ambiguous base

} // namespace _

// Type parameter version
template <class Derived, template <class...> class BaseTemplate>
inline constexpr bool is_derived_from_template =
    decltype(_::test_is_derived_from_template<Derived, BaseTemplate>(0))::value;

// // Non-type parameter version
// template <class Derived, template <auto...> class BaseTemplate>
// inline constexpr bool is_derived_from_template_value =
//     decltype(_::test_is_derived_from_template_value<Derived, BaseTemplate>(
//         0))::value;

} // namespace VOLTISO_NAMESPACE
