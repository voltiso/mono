#pragma once
#include <voltiso/_>

#include <voltiso/is_derived_from>

#include <type_traits>

namespace VOLTISO_NAMESPACE {

namespace _ {
template <template <class...> class Base, class... Args>
std::true_type test_ptr_conv(const volatile Base<Args...> *);
template <template <class...> class>
std::false_type test_ptr_conv(const volatile void *);

template <class Derived, template <class...> class BaseTemplate>
auto test_is_derived_from_template(int)
    -> decltype(test_ptr_conv<BaseTemplate>((Derived *)nullptr));

template <class, template <class...> class>
auto test_is_derived_from_template(...)
    -> std::true_type; // private or ambiguous base
} // namespace _

//

template <class Derived, template <class...> class BaseTemplate>
inline constexpr bool is_derived_from_template =
    decltype(_::test_is_derived_from_template<Derived, BaseTemplate>(0))::value;

template <class X> struct TestBase {};
struct TestDerived : TestBase<int> {};
struct TestUnrelated {};
struct TestDerivedPrivate : private TestBase<int> {};

static_assert(is_derived_from_template<TestDerived, TestBase>);
static_assert(!is_derived_from_template<TestUnrelated, TestBase>);
static_assert(is_derived_from_template<TestDerivedPrivate, TestBase>);
} // namespace VOLTISO_NAMESPACE
