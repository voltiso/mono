#pragma once
#include <voltiso/_>

#include "voltiso/Bst"
#include "voltiso/DynamicArray"
#include "voltiso/Entry"
#include "voltiso/Object"

namespace VOLTISO_NAMESPACE::splay::_ {
template <class Options> struct AccessPathNode {
  Handle node;
  uint8_t childIndex;
};

template <class Options>
::std::ostream &operator<<(::std::ostream &os,
                           const AccessPathNode<Options> &node) {
  return os << "{node: " << node.node << ", childIndex: " << node.childIndex
            << "}";
}; // struct _

} // namespace VOLTISO_NAMESPACE::splay::_

//

namespace VOLTISO_NAMESPACE::splay {

struct Defaults {
  using Pool = void; // need to override
};

using DefaultOptions = Options<Defaults>;

//

template <class _Options> class Build : public Object<_Options> {
private:
  using Self = Build;

public:
  using Options = _Options;
  using Pool = Options::Pool;
  using Handle = typename Pool::Handle;
  using Allocator = typename Pool::Allocator;
  using Node = typename Pool::Item;
  using Entry = GetEntry<Node>;
  using Key = GetKey<Entry>; // may be implicit

  static_assert(!std::is_same_v<Entry, void>);

private:
  using DynamicArray = DynamicArray<int>::Allocator_<Allocator>;
  using AccessPathNode = _::template AccessPathNode<Options>;
  using AccessPath = DynamicArray::template Item_<AccessPathNode>;
  AccessPath accessPath;

private:
  Pool &v;
  Bst<Pool> bst;

public:
  Build(Pool &pool) : v(pool), bst(pool) {}
  // Splay(Self&&) = default;

public:
  Handle merge(Handle a, Handle b) {
    b = min(b);
    DCHECK(!v[b].children[0]);
    v[b].children[0] = a;
    return b;
  }

  Handle insert(Handle &root, const Entry &entry) {
    return insert<>(root, entry);
  }

  Handle insert(Handle &root, Entry &&entry) {
    return insert<>(root, std::move(entry));
  }

  template <class E,
            class = std::enable_if_t<std::is_same_v<Entry, std::decay_t<E>>>>
  Handle insert(Handle &root, E &&entry) {
    auto node = v.construct(std::forward<E>(entry));
    if (!root) [[unlikely]] {
      root = node;
      return node;
    }

    auto &key = getKey(v[node]);

    auto c = root;
    accessPath.clear();
    while (c) {
      if (key < getKey(v[c])) {
        accessPath.push({c, 0});
        if (!v[c].children[0]) [[unlikely]] {
          v[c].children[0] = node;
          break;
        }
        c = v[c].children[0];
      } else {
        accessPath.push({c, 1});
        if (!v[c].children[1]) [[unlikely]] {
          v[c].children[1] = node;
          break;
        }
        c = v[c].children[1];
      }
    }
    accessPath.push({node, 0});
    root = _splay();
    DCHECK_EQ(root, node);
    return node;
  }

  Entry erase(Handle &root, const Handle &nodeToErase) {
    const auto &n = nodeToErase;
    find(root, n);
    DCHECK_EQ(root, n);
    if (!v[n].children[0]) [[unlikely]] {
      root = v[n].children[1];
    } else if (!v[n].children[1]) [[unlikely]] {
      root = v[n].children[0];
    } else {
      root = merge(v[n].children[0], v[n].children[1]);
    }
    auto entry = getEntry(v[n]);
    v.destroy(n);
    return entry;
  }

  Handle find(Handle &root, const Handle &nodeToFind) {
    auto current = root;
    auto &key = getKey(v[nodeToFind]);
    accessPath.clear();
    while (current) {
      if (current == nodeToFind) [[unlikely]]
        break;

      if (key < getKey(v[current])) {
        accessPath.push({current, 0});
        current = v[current].children[0];
      } else {
        accessPath.push({current, 1});
        current = v[current].children[1];
      }
    }
    root = _splay();
    DCHECK_EQ(current, root);
    return current;
  }

  Handle lowerBound(Handle &root, const Key &key) {
    if (!root) [[unlikely]]
      return Handle::null;
    DCHECK(root);
    auto node = root;
    auto cand = node;
    accessPath.clear();
    while (node) {
      if (key < getKey(v[node])) {
        accessPath.push({node, 0});
        node = v[node].children[0];
      } else {
        accessPath.push({node, 1});
        cand = node;
        node = v[node].children[1];
      }
    }
    root = _splay();
    return cand;
  }

  Handle min(Handle &root) {
    auto x = root;
    using Stack = DynamicArray::template Item_<Handle>;
    static thread_local Stack stack;
    stack.clear();
    stack.push(x);
    while (v[x].children[0]) {
      x = v[x].children[0];
      stack.push(x);
    }

    // _splayRight(stack);
    auto iNode = stack.numItems - 1;
    while (iNode >= 3) {
      auto &x1 = stack[iNode - 1];
      auto &x2 = stack[iNode - 2];
      auto &x3 = stack[iNode - 3];
      bst.rotateRight(x2);
      bst.rotateRight(x1);
      v[x3].children[0] = x;
      iNode -= 2;
    }

    if (iNode == 2) {
      auto &x1 = stack[iNode - 1];
      auto &x2 = stack[iNode - 2];
      bst.rotateRight(x2);
      bst.rotateRight(x1);
      iNode -= 2;
    }

    if (iNode == 1) {
      auto &x1 = stack[iNode - 1];
      bst.rotateRight(x1);
    }

    DCHECK_EQ(x, root);
    return x;
  }

private:
  // splay last accessPath
  Handle _splay() {
    DCHECK_GT(accessPath.numItems, 0);
    LOG(INFO) << "accessPath " << accessPath;
    auto iNode = accessPath.numItems - 1;
    auto node = accessPath[iNode].node;
    while (iNode >= 3) {
      auto &node1 = accessPath[iNode - 1];
      auto &node2 = accessPath[iNode - 2];
      auto &node3 = accessPath[iNode - 3];

      if (node2.childIndex) {
        if (node1.childIndex) {
          // zig-zig
          bst.rotateLeft(node2.node);
          bst.rotateLeft(node1.node);
        } else {
          // zig-zag
          bst.rotateRight(node1.node);
          bst.rotateLeft(node2.node);
        }
      } else {
        if (node1.childIndex) {
          // zag-zig
          bst.rotateLeft(node1.node);
          bst.rotateRight(node2.node);
        } else {
          // zag-zag
          bst.rotateRight(node2.node);
          bst.rotateRight(node1.node);
        }
      }
      v[node3.node].children[node3.childIndex] = node;
      iNode -= 2;
    }

    if (iNode == 2) {
      auto &node1 = accessPath[iNode - 1];
      auto &node2 = accessPath[iNode - 2];

      if (node2.childIndex) {
        if (node1.childIndex) {
          // zig-zig
          bst.rotateLeft(node2.node);
          bst.rotateLeft(node1.node);
        } else {
          // zig-zag
          bst.rotateRight(node1.node);
          bst.rotateLeft(node2.node);
        }
      } else {
        if (node1.childIndex) {
          // zag-zig
          bst.rotateLeft(node1.node);
          bst.rotateRight(node2.node);
        } else {
          // zag-zag
          bst.rotateRight(node2.node);
          bst.rotateRight(node1.node);
        }
      }
      iNode -= 2;
    }

    if (iNode == 1) {
      auto &node1 = accessPath[iNode - 1];
      if (node1.childIndex) {
        bst.rotateLeft(node1.node);
      } else {
        bst.rotateRight(node1.node);
      }
    }

    return node;
  }
}; // class Build
} // namespace VOLTISO_NAMESPACE::splay

VOLTISO_OBJECT_FINAL(splay)

//

namespace VOLTISO_NAMESPACE {
template <class Pool>
using Splay = splay::Final<splay::DefaultOptions::Pool_<Pool>>;
} // namespace VOLTISO_NAMESPACE
