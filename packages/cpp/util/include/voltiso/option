#pragma once

#include "voltiso/TypeOption"
#include "voltiso/ValueOption"
#include "voltiso/allocator/Malloc.forward.hpp"
#include "voltiso/memory/PAGE_SIZE"

#include <cstddef>

namespace VOLTISO_NAMESPACE::option {

//
// Type parameters
//

template <class T> struct Item : TypeOption<T, void> {};
template <class T> struct Brand : TypeOption<T, void> {};
template <class T> struct Allocator : TypeOption<T, allocator::Malloc> {};
template <class T> struct Pool : TypeOption<T, void> {};

template <class T> struct Entry : TypeOption<T, void> {};
// template <class T> struct Key : TypeOption<T, void> {};
// template <class T> struct Value : TypeOption<T, void> {};

//
// Value parameters
//

template <std::size_t N> struct NUM_ITEMS : ValueOption<N, 0> {};
template <std::make_signed_t<std::size_t> N>
struct StartingIndex : ValueOption<N, 0> {};

template <std::size_t N>
struct PAGE_SIZE : ValueOption<N, memory::PAGE_SIZE> {};

template <std::size_t N> struct IN_PLACE : ValueOption<N, 0> {};
template <std::size_t N> struct IN_PLACE_ONLY : ValueOption<N, 0> {};
template <bool B> struct WEAK : ValueOption<B, false> {};

// Handle-specific
template <class T> struct HandleType : TypeOption<T, void *> {};

} // namespace VOLTISO_NAMESPACE::option
