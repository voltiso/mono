#pragma once
#include <voltiso/_>

#include <voltiso/allocator/Malloc>
#include <voltiso/has>
#include <voltiso/is_instantiated_from>
#include <voltiso/is_trivially_relocatable>
#include <voltiso/override>
#include <voltiso/singleton>
#include <voltiso/storage/Storage>
#include <voltiso/throwError>

#include <cstddef>
#include <cstdlib>
#include <type_traits>

// items: numItems, setNumItems
// slots: numSlots, setNumSlots
// bytes: numBytes, setNumBytes

namespace VOLTISO_NAMESPACE::allocation::_ {

template <class Allocation> auto &allocator(Allocation &allocation) {
  return singleton::perThread::get<typename Allocation::Allocator>();
}

template <class Allocation>
const auto &allocator(const Allocation &allocation) {
  return allocator(const_cast<Allocation &>(allocation));
}

template <class Options> struct Base {
  using Item = typename Options::Item;
  using ParentHandle = Options::Allocator::template HandleForItem<Item>;
};
template <class Options> struct BaseWithBytes : Base<Options> {
  using Base = Base<Options>;
  Base::ParentHandle const bytes = nullptr;
};
template <class Options> struct BaseWithItems : Base<Options> {
  using Base = Base<Options>;
  Base::ParentHandle const items = nullptr;
};
template <class Options> struct BaseWithSlots : Base<Options> {
  using Base = Base<Options>;
  Base::ParentHandle const slots = nullptr;
};
template <class Options>
using BaseWithBytesOrItems = std::conditional_t<
    std::is_same_v<typename Options::Item, void>, BaseWithBytes<Options>,
    std::conditional_t<is_instantiated_from<typename Options::Item, Storage>,
                       BaseWithSlots<Options>, BaseWithItems<Options>>>;
template <class Options>
struct DataMembersWithoutSize : BaseWithBytesOrItems<Options> {};
template <class Options>
struct DataMembersWithNumBytes : BaseWithBytesOrItems<Options> {
  size_t const numBytes = 0;
};
template <class Options>
struct DataMembersWithNumItems : BaseWithBytesOrItems<Options> {
  size_t const numItems = 0;
};
template <class Options>
struct DataMembersWithNumSlots : BaseWithBytesOrItems<Options> {
  size_t const numSlots = 0;
};
template <class Options>
using DataMembers = std::conditional_t<
    Options::IS_WITH_SIZE,
    std::conditional_t<std::is_same_v<typename Options::Item, void>,
                       DataMembersWithNumBytes<Options>,
                       std::conditional_t<is_instantiated_from<
                                              typename Options::Item, Storage>,
                                          DataMembersWithNumSlots<Options>,
                                          DataMembersWithNumItems<Options>>>,
    DataMembersWithoutSize<Options>>;

template <class Allocation> auto &getData(Allocation &allocation) {
  if constexpr (has::bytes<Allocation>) {
    return const_cast<Allocation::ParentHandle &>(allocation.bytes);
  } else if constexpr (has::slots<Allocation>) {
    return const_cast<Allocation::ParentHandle &>(allocation.slots);
  } else {
    return const_cast<Allocation::ParentHandle &>(allocation.items);
  }
}

template <class Allocation> auto &getNumItems(Allocation &allocation) {
  static_assert(!std::is_same_v<void, typename Allocation::Options::Item>);
  if constexpr (has::numItems<Allocation>) {
    return const_cast<size_t &>(allocation.numItems);
  } else {
    return const_cast<size_t &>(allocation.numSlots);
  }
}
} // namespace VOLTISO_NAMESPACE::allocation::_

namespace VOLTISO_NAMESPACE::allocation {
struct DefaultOptions {
  using Item = void;
  using Allocator = allocator::Malloc;
  static constexpr bool IS_WITH_SIZE = false;
};

//

template <class _Options> class BUILD : public _::DataMembers<_Options> {
  using Self = BUILD;

public:
  using Base = _::DataMembers<_Options>;
  using Options = _Options;
  using Item = Base::Item;
  using Allocator = Options::Allocator;
  using ParentHandle = Base::ParentHandle;
  static constexpr bool IS_WITH_SIZE = Options::IS_WITH_SIZE;

  template <class Index> using CustomHandle = handle::Custom<Self, Index>;
  using Handle = CustomHandle<size_t>;

  const auto &allocator() const { return _::allocator(*this); }

  ~BUILD() {
    static_assert(
        std::is_same_v<typename Options::Item, void> ||
            std::is_trivially_destructible_v<typename Options::Item> ||
            Options::IS_WITH_SIZE,
        "Allocation: `Item` must be trivially destructible or IS_WITH_SIZE "
        "must be true");

    if constexpr (!std::is_same_v<Item, void> && Options::IS_WITH_SIZE) {
      for (size_t i = 0; i < _::getNumItems(*this); ++i) {
        _::allocator (*this)(_::getData(*this), i).~Item();
      }
    }
    Options::Allocator::get().freeBytes(_::getData(*this));
  }

  // void _assumeRelocated() {
  //   _::getData(*this) = nullptr;
  //   if constexpr (IS_WITH_SIZE) {
  //     if constexpr (has::numBytes<Self>) {
  //       (size_t &)this->numBytes = 0;
  //     } else {
  //       _::getNumItems(*this) = 0;
  //     }
  //   }
  // }

  BUILD() noexcept = default;

  static Self allocateBytes(size_t numBytes, size_t alignment = alignof(Item)) {
    Self allocation;

    _::getData(allocation) =
        Options::Allocator::allocateBytes(numBytes, alignment);

    if constexpr (Options::IS_WITH_SIZE) {
      if constexpr (std::is_same_v<typename Options::Item, void>) {
        (size_t &)allocation.numBytes = numBytes;
      } else {
        _::getNumItems(allocation) = numBytes / sizeof(Item);
      }
    }
    return allocation;
  }

  template <class O = Options,
            class = std::enable_if_t<!std::is_same_v<typename O::Item, void>>>
  static Self allocateItems(size_t numItems) {
    static_assert(
        std::is_trivially_destructible_v<typename Options::Item> ||
            Options::IS_WITH_SIZE,
        "Allocation::allocateItems(): `Item` must be trivially destructible or "
        "IS_WITH_SIZE must be true");

    Self allocation;
    _::getData(allocation) =
        Options::Allocator::allocateBytes(numItems * sizeof(Item));
    auto memory = &allocation[0];
    static_assert(std::is_same_v<decltype(memory), Item *>);
    for (size_t i = 0; i < numItems; ++i) {
      new (&memory[i]) Item();
    }
    if constexpr (Options::IS_WITH_SIZE) {
      (size_t &)allocation.numItems = numItems;
    }
    return allocation;
  }

  explicit BUILD(const Self &other) = delete;

  template <class O = Options, std::enable_if_t<O::IS_WITH_SIZE> * = nullptr>
  explicit BUILD(const Self &other) {
    static_assert(Options::IS_WITH_SIZE);
    (ParentHandle &)this->data =
        (ParentHandle)Options::Allocator::allocateBytes(other.numBytes);
    if constexpr (std::is_same_v<Item, void>) {
      ::memcpy(this->data, other.data, other.numBytes);
      if constexpr (Options::IS_WITH_SIZE) {
        (size_t &)this->numBytes = other.numBytes;
      }
    } else {
      for (size_t i = 0; i < other.numItems; ++i) {
        new (&this->data[i]) Item(other.data[i]);
      }
      if constexpr (Options::IS_WITH_SIZE) {
        (size_t &)this->numItems = other.numItems;
      }
    }
  }

  Self &operator=(const Self &other) = delete;

  template <class O = Options, std::enable_if_t<O::IS_WITH_SIZE> * = nullptr>
  Self &operator=(const Self &other) {
    static_assert(Options::IS_WITH_SIZE);
    if (this == &other) [[unlikely]]
      return *this;
    Options::Allocator::freeBytes(this->data);
    (ParentHandle &)this->data =
        Options::Allocator::allocateBytes(other.numBytes);
    ::memcpy(this->data, other.data, other.numBytes);
    (size_t &)this->numBytes = other.numBytes;
    return *this;
  }

  BUILD(Self &&other) noexcept {
    _::getData(*this) = _::getData(other);
    _::getData(other) = nullptr;
    if constexpr (IS_WITH_SIZE) {
      if constexpr (has::numBytes<Self>) {
        (size_t &)this->numBytes = other.numBytes;
        (size_t &)other.numBytes = 0;
      } else {
        _::getNumItems(*this) = _::getNumItems(other);
        _::getNumItems(other) = 0;
      }
    }
  }

  Self &operator=(Self &&other) noexcept {
    Options::Allocator::freeBytes(_::getData(*this));
    _::getData(*this) = _::getData(other);
    _::getData(other) = nullptr;
    if constexpr (IS_WITH_SIZE) {
      if constexpr (has::numBytes<Self>) {
        (size_t &)this->numBytes = other.numBytes;
        (size_t &)other.numBytes = 0;
      } else {
        _::getNumItems(*this) = _::getNumItems(other);
        _::getNumItems(other) = 0;
      }
    }
    return *this;
  }

  void setNumBytes(size_t newNumBytes) {
    // simply don't allow to avoid accidental slow copying
    static_assert(is_trivially_relocatable<Item>,
                  "Allocation::setNumBytes(): Item must be marked as trivially "
                  "relocatable using "
                  "`is_trivially_relocatable<Item> = true`");
    _::getData(*this) =
        Options::Allocator::setNumBytes(_::getData(*this), newNumBytes);
    if constexpr (IS_WITH_SIZE) {
      if constexpr (has::numBytes<Self>) {
        (size_t &)this->numBytes = newNumBytes;
      } else {
        _::getNumItems(*this) = newNumBytes / sizeof(Item);
      }
    }
  }

  // template <class S = Self, class = std::enable_if_t<has_numSlots<S>>>
  void setNumSlots(size_t newNumSlots) {
    setNumBytes(newNumSlots * sizeof(Item));
  }

  template <class S = Self, class = std::enable_if_t<has::numItems<S>>>
  void setNumItems(size_t newNumItems) {
    setNumBytes(newNumItems * sizeof(Item));
  }

  //

  template <class Index> auto &operator[](const CustomHandle<Index> &handle) {
    auto &parentHandle = _::getData(*this);
    static_assert(!std::is_same_v<Item, void>);
    return _::allocator(*this)(parentHandle, handle.value);
  }

  template <class Index>
  const auto &operator[](const CustomHandle<Index> &handle) const {
    return const_cast<Self &>(*this)[handle];
  }

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  auto &operator[](const Index &index) {
    return this->operator[](CustomHandle<Index>(index));
  }

  template <class Index, class = std::enable_if_t<std::is_integral_v<Index>>>
  const auto &operator[](const Index &index) const {
    return const_cast<Self &>(*this)[index];
  }

  // template <class Int> auto &operator[](const CustomHandle<Int> &handle)
  // const {
  //   return ((const Item *)this->data)[handle.value];
  // }

  // operator Item *() { return static_cast<Item *>(this->data); }
  // operator const Item *() const { return static_cast<Item *>(this->data); }

  //
  // type-builder
  //
  template <class NewItem>
  using WithItem = BUILD<override::Item_<NewItem, Options>>;

  using WithSize = BUILD<override::IS_WITH_SIZE_<true, Options>>;

  template <class NewAllocator>
  using WithAllocator = BUILD<override::Allocator_<NewAllocator, Options>>;
};
} // namespace VOLTISO_NAMESPACE::allocation

namespace VOLTISO_NAMESPACE {
using Allocation = allocation::BUILD<allocation::DefaultOptions>;
static_assert(sizeof(Allocation) == sizeof(void *));

// static_assert(!Allocation::IS_WITH_SIZE);
// static_assert(Allocation::WithItem<int>::WithSize::IS_WITH_SIZE);

} // namespace VOLTISO_NAMESPACE
