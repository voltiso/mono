#pragma once
#include <voltiso/_>

// #include "voltiso/has"

#include <cstddef>
#include <type_traits>

#define OPTION_TYPE(Name)                                                      \
private:                                                                       \
  template <class X> struct _##Name : Defaults {                               \
    using Name = X;                                                            \
  };                                                                           \
                                                                               \
public:                                                                        \
  template <class X> using Name##_ = Options<_##Name<X>>;

//

#define OPTION_TYPE_TEMPLATE(Name)                                             \
private:                                                                       \
  template <template <class> class X> struct _##Name : Defaults {              \
    template <class T> using Name = X<T>;                                      \
  };                                                                           \
                                                                               \
public:                                                                        \
  template <template <class> class X> using Name##_ = Options<_##Name<X>>;

//

#define OPTION_VALUE(NAME, type)                                               \
private:                                                                       \
  template <type x> struct _##NAME : Defaults {                                \
    static constexpr auto NAME = x;                                            \
  };                                                                           \
                                                                               \
public:                                                                        \
  template <type x> using NAME##_ = Options<_##NAME<x>>;

//

// #define DERIVE_TYPE(name) with_##name<true>
// #define DERIVE_TYPE(name) with_##name<has::type::name<DerivedOptions>>

// #define DERIVE_VALUE(name) with_##name<true>
// #define DERIVE_VALUE(name) with_##name<has::name<DerivedOptions>>

namespace VOLTISO_NAMESPACE {
template <class Defaults> struct Options : Defaults {
  OPTION_TYPE_TEMPLATE(FinalTemplate);
  OPTION_TYPE(Final)

  OPTION_TYPE(Allocator)
  OPTION_TYPE(Item)
  OPTION_TYPE(Entry)
  OPTION_TYPE(Brand)
  OPTION_TYPE(Type)
  OPTION_TYPE(Pool)
  OPTION_VALUE(IN_PLACE, std::size_t)
  OPTION_VALUE(NUM_ITEMS, std::size_t)
  OPTION_VALUE(BUCKET_IN_PLACE, std::size_t)
  OPTION_VALUE(STARTING_INDEX, std::make_signed_t<std::size_t>);
};
} // namespace VOLTISO_NAMESPACE

#undef OPTION_TYPE
#undef OPTION_VALUE
#undef DERIVE_TYPE
#undef DERIVE_VALUE
