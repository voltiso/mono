#pragma once

#include "voltiso/Pool"
#include "voltiso/Singleton"
#include "voltiso/has"

namespace VOLTISO_NAMESPACE::shared::_ {
template <class Item> struct ControlBlock {
  Item item;
  std::size_t numReferences = 1;
  // std::atomic<int> refCount = 1;

  template <class... Args>
  ControlBlock(Args &&...args) : item(std::forward<Args>(args)...) {}
  void dereference() {
    if (--numReferences == 0) [[unlikely]] {
      using Pool = Pool<ControlBlock>;
      using Handle = Pool::Handle;
      Singleton<Pool>::instance().erase(Handle(this));
    }
  }
};
} // namespace VOLTISO_NAMESPACE::shared::_

namespace VOLTISO_NAMESPACE {
template <class Item> class Shared {
  using Self = Shared;
  static_assert(!std::is_class_v<Item> || std::is_final_v<Item>);
  using Pool = Pool<shared::_::ControlBlock<Item>>;

public:
  template <class... Args> static Self create(Args &&...args) {
    Self self;
    self._controlBlock = pool().insert(std::forward<Args>(args)...);
    return self;
  }

  static Self create(const Item &item) {
    Self self;
    self._controlBlock = pool().insert(item);
    return self;
  }

  static Self create(Item &&item) {
    Self self;
    self._controlBlock = pool().insert(std::move(item));
    return self;
  }

  ~Shared() {
    if (this->_controlBlock) [[likely]] {
      // std::cout << "erase" << std::endl;
      this->_controlBlock->dereference();
    }
  }

  // public: Shared() = default; // convenient, but runtime-bug-prone
private:
  Shared() = default;

public:
  Shared(const Self &other) : _controlBlock(other._controlBlock) {
    if (other._controlBlock) [[likely]]
      ++other._controlBlock->numReferences;
  }

  Shared &operator=(const Self &other) {
    DCHECK_NE(this->_controlBlock,
              other._controlBlock); // self-assignment forbidden
    // if (this->_controlBlock == other._controlBlock) [[unlikely]]
    //   return *this;

    if (this->_controlBlock) [[likely]] {
      this->_controlBlock->dereference();
    }
    this->_controlBlock = other._controlBlock;
    if (other._controlBlock) [[likely]]
      ++other._controlBlock->numReferences;
    return *this;
  }

  Shared(Self &&other) noexcept : _controlBlock(other._controlBlock) {
    other._controlBlock = Pool::Handle::null;
  }

  Shared &operator=(Self &&other) noexcept {
    this->_controlBlock->dereference();
    this->_controlBlock = other._controlBlock;
    other._controlBlock = Pool::Handle::null;
    return *this;
  }

  Item &item() const { return _controlBlock->item; }
  Item &operator*() const { return item(); }
  Item *operator->() const { return &**this; }
  operator Item &() const { return **this; }
  operator Item &&() const { return (Item &&)**this; }

  //

  operator Shared<const Item> &() {
    return reinterpret_cast<Shared<const Item> &>(*this);
  }

  auto clone() const {
    DCHECK(_controlBlock);
    using NewSelf = Shared<std::remove_cv_t<Item>>;
    if constexpr (has::clone<Item>)
      return NewSelf::create(item().clone());
    else
      return NewSelf::create(item());
  }

  auto &&freeze() && {
    using NewSelf = Shared<const Item>;
    return static_cast<NewSelf &>(*this);
  }

private:
  Pool::Handle _controlBlock = Pool::Handle::null;

  static auto &pool() {
    // return context::get<Pool>();
    return Singleton<Pool>::instance();
    // return *(context::tryGet<Pool>() || &singleton::instance<Pool>());
  }
}; // class Owned

//

//

#define DEFINE_OPERATOR(op)                                                    \
  template <class T, class Other>                                              \
  auto operator op(const Shared<T> &lhs, Other &&rhs)                          \
      ->decltype(*lhs op std::forward<Other>(rhs)) {                           \
    return *lhs op std::forward<Other>(rhs);                                   \
  }                                                                            \
                                                                               \
  template <class T, class Other>                                              \
  auto operator op(Other &&lhs, const Shared<T> &rhs)                          \
      ->decltype(std::forward<Other>(lhs) op * rhs) {                          \
    return std::forward<Other>(lhs) op * rhs;                                  \
  }

DEFINE_OPERATOR(==)
DEFINE_OPERATOR(!=)

DEFINE_OPERATOR(<)
DEFINE_OPERATOR(<=)

DEFINE_OPERATOR(>)
DEFINE_OPERATOR(>=)

DEFINE_OPERATOR(+)
DEFINE_OPERATOR(+=)

DEFINE_OPERATOR(-)
DEFINE_OPERATOR(-=)

DEFINE_OPERATOR(*)
DEFINE_OPERATOR(*=)

DEFINE_OPERATOR(/)
DEFINE_OPERATOR(/=)

DEFINE_OPERATOR(%)
DEFINE_OPERATOR(%=)

DEFINE_OPERATOR(<<)
DEFINE_OPERATOR(<<=)

DEFINE_OPERATOR(>>)
DEFINE_OPERATOR(>>=)

DEFINE_OPERATOR(&)
DEFINE_OPERATOR(&=)

DEFINE_OPERATOR(|)
DEFINE_OPERATOR(|=)

DEFINE_OPERATOR(^)
DEFINE_OPERATOR(^=)

DEFINE_OPERATOR(&&)
DEFINE_OPERATOR(||)

#undef DEFINE_OPERATOR

} // namespace VOLTISO_NAMESPACE
