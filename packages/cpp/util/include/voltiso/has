#pragma once
#include <voltiso/_>

#include <experimental/type_traits>

#define VOLTISO_HAS_DEFINE(member)                                             \
  namespace VOLTISO_NAMESPACE::has::_ {                                        \
  template <class TT> using has_##member##_check = decltype(&TT::member);      \
  }                                                                            \
  namespace VOLTISO_NAMESPACE::has {                                           \
  template <class TT>                                                          \
  static constexpr auto member =                                               \
      std::experimental::is_detected_v<_::has_##member##_check, TT>;           \
  }

VOLTISO_HAS_DEFINE(size)
VOLTISO_HAS_DEFINE(bytes)
VOLTISO_HAS_DEFINE(clone)
VOLTISO_HAS_DEFINE(copy)
VOLTISO_HAS_DEFINE(move)
VOLTISO_HAS_DEFINE(item)
VOLTISO_HAS_DEFINE(items)
VOLTISO_HAS_DEFINE(numBytes)
VOLTISO_HAS_DEFINE(numItems)
VOLTISO_HAS_DEFINE(numSlots)
VOLTISO_HAS_DEFINE(NUM_SLOTS)
VOLTISO_HAS_DEFINE(slots)
VOLTISO_HAS_DEFINE(key)
VOLTISO_HAS_DEFINE(value)
VOLTISO_HAS_DEFINE(entry)
VOLTISO_HAS_DEFINE(_assumeRelocated)

#define VOLTISO_HAS_FUNCTION_DEFINE(member)                                    \
  namespace VOLTISO_NAMESPACE::has::function::_ {                              \
  template <class TT>                                                          \
  using has_##member##_check = decltype(std::declval<TT>().member());          \
  }                                                                            \
  namespace VOLTISO_NAMESPACE::has::function {                                 \
  template <class TT>                                                          \
  static constexpr auto member =                                               \
      std::experimental::is_detected_v<_::has_##member##_check, TT>;           \
  }

VOLTISO_HAS_FUNCTION_DEFINE(key)
VOLTISO_HAS_FUNCTION_DEFINE(value)
VOLTISO_HAS_FUNCTION_DEFINE(entry)

//

#define VOLTISO_HAS_TYPE_DEFINE(member)                                        \
  namespace VOLTISO_NAMESPACE::has::type::_ {                                  \
  template <class TT> using has_##member##_check = TT::member;                 \
  }                                                                            \
  namespace VOLTISO_NAMESPACE::has::type {                                     \
  template <class TT>                                                          \
  static constexpr auto member =                                               \
      std::experimental::is_detected_v<_::has_##member##_check, TT>;           \
  }

#define VOLTISO_HAS_TEMPLATE_DEFINE(member)                                    \
  namespace VOLTISO_NAMESPACE::has::type::_ {                                  \
  template <class TT, class X = void>                                          \
  using has_##member##_check = TT::template member<X>;                         \
  }                                                                            \
  namespace VOLTISO_NAMESPACE::has::type {                                     \
  template <class TT>                                                          \
  static constexpr auto member =                                               \
      std::experimental::is_detected_v<_::has_##member##_check, TT>;           \
  }

//

VOLTISO_HAS_DEFINE(IN_PLACE)
VOLTISO_HAS_DEFINE(IN_PLACE_ONLY)
VOLTISO_HAS_DEFINE(NUM_ITEMS)
VOLTISO_HAS_DEFINE(STARTING_INDEX)
VOLTISO_HAS_DEFINE(BUCKET_IN_PLACE)

VOLTISO_HAS_TYPE_DEFINE(Item)
VOLTISO_HAS_TYPE_DEFINE(Entry)
VOLTISO_HAS_TYPE_DEFINE(Allocator)
VOLTISO_HAS_TYPE_DEFINE(Brand)
VOLTISO_HAS_TYPE_DEFINE(Type)
VOLTISO_HAS_TYPE_DEFINE(Final)
VOLTISO_HAS_TEMPLATE_DEFINE(FinalTemplate)

// struct S{
// 	// using Item = int;
// };

// static_assert(!v::has::type::Item<S>);
