#pragma once

// Primary template (fallback case)
template <typename, typename>
inline constexpr bool is_instantiated_from_same = false;

// Specialization for matching template types
template <template <typename...> class T, typename... Args1, typename... Args2>
inline constexpr bool is_instantiated_from_same<T<Args1...>, T<Args2...>> =
    true;

// // Example template classes
// template <typename T> struct Example {};

// template <typename T, typename U> struct Another {};

// // Static assertions for testing
// static_assert(is_instantiated_from_same<Example<int>, Example<double>>,
//               "Should be true");

// static_assert(!is_instantiated_from_same<Example<int>, Another<int, double>>,
//               "Should be false");

// static_assert(
//     is_instantiated_from_same<Another<int, float>, Another<double, char>>,
//     "Should be true");
