#pragma once
#include <v/_/_>

#include <ostream>
#include <utility>

namespace VOLTISO_NAMESPACE {
struct Bit {
	bool value;

	constexpr Bit() noexcept = default;

	template <class Arg>
	constexpr Bit(Arg &&arg) noexcept : value{(bool)std::forward<Arg>(arg)} {}
};

constexpr bool operator==(const Bit &lhs, const Bit &rhs) noexcept {
	return lhs.value == rhs.value;
}

static_assert(
  std::is_same_v<decltype(std::declval<Bit>() == std::declval<Bit>()), bool>);

static_assert(
  std::is_same_v<decltype(std::declval<Bit>() != std::declval<Bit>()), bool>);

static_assert(Bit{0} == 0);
static_assert(Bit{1} == 1);
static_assert(Bit{2} == 1);
static_assert(Bit{1LL << 35} == 1);

} // namespace VOLTISO_NAMESPACE

namespace std {
ostream &operator<<(ostream &os, const VOLTISO_NAMESPACE::Bit &bit) {
	return os << bit.value;
}
} // namespace std
