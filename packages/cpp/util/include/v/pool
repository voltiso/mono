#pragma once
#include <v/_/_>

#include "v/concepts/options"
#include "v/dynamic-array"
#include "v/handle"
// #include "v/option"

#include <v/ON>

#ifndef VOLTISO_DEBUG_POOL
	#define VOLTISO_DEBUG_POOL VOLTISO_DEBUG
#endif

// forward declarations
namespace VOLTISO_NAMESPACE::pool {
template <class Options>
  requires concepts::Options<Options>
class Custom;
} // namespace VOLTISO_NAMESPACE::pool

//

namespace VOLTISO_NAMESPACE::pool::_ {
template <class Item> struct Slot {
	union {
		Storage<Item> storage;
		Slot *next; // must be zero'ed manually
	};
};

template <class Options> struct Block {
	using Item = Options::template Get<option::Item>;
	using Allocator = Options::template Get<option::Allocator>;

	Slot<Item> *allocationStart;
	Slot<Item> *allocationEnd;

	//   static_assert(is::TriviallyRelocatable<decltype(numBytes)>);
	//   static_assert(is::TriviallyRelocatable<decltype(allocation)>);

	Block(size_t numItems) {
		auto numBytes = numItems * sizeof(Slot<Item>);
		auto handle = Singleton<Allocator>::instance().allocateBytes(numBytes);
		static_assert(sizeof(Slot<Item> *) == sizeof(handle));
		this->allocationStart = std::bit_cast<Slot<Item> *>(handle);
		this->allocationEnd = this->allocationStart + numItems;
		std::memset((void *)this->allocationStart, 0, numBytes);
	}

	Block(const Block &) = delete;
	Block &operator=(const Block &) = delete;

	~Block() {
		auto numBytes = (std::byte *)allocationEnd - (std::byte *)allocationStart;
		Singleton<Allocator>::instance().freeBytes(
		  typename Allocator::Handle(allocationStart), numBytes);
	}
};
} // namespace VOLTISO_NAMESPACE::pool::_

namespace VOLTISO_NAMESPACE {
template <class Options>
static constexpr auto is::TriviallyRelocatable<pool::_::Block<Options>> = true;
} // namespace VOLTISO_NAMESPACE

//

namespace VOLTISO_NAMESPACE::pool {
template <class Options, bool IS_CONST> class Accessor {
	using Pool = Custom<Options>;
	using MaybeConstPool = std::conditional_t<IS_CONST, const Pool, Pool>;

	using Item = typename Pool::Item;
	using MaybeConstItem = std::conditional_t<IS_CONST, const Item, Item>;

	using Handle = typename Pool::Handle;

	static_assert(std::is_same_v<typename Handle::Kind, Item *>);

public:
	const Handle handle;
	//   _::Slot<MaybeConstItem> *slot;

private:
	MaybeConstPool &pool;

private:
	friend Pool;
	Accessor(MaybeConstPool &pool, const Handle &handle) noexcept
	    : handle(handle), pool(pool) {}

	Accessor(MaybeConstPool &pool, _::Slot<MaybeConstItem> *slot) noexcept
	    : handle(slot), pool(pool) {}

	Accessor(const Accessor &) = delete;
	Accessor &operator=(const Accessor &) = delete;

public:
	MaybeConstItem &item() noexcept {
		return *std::bit_cast<MaybeConstItem *>(handle);
	}
	const Item &item() const noexcept {
		return *std::bit_cast<const Item *>(handle);
	}

	MaybeConstItem &operator*() noexcept { return item(); }
	const Item &operator*() const noexcept { return item(); }

	MaybeConstItem *operator->() noexcept { return &item(); }
	const Item *operator->() const noexcept { return &item(); }

	template <bool C = IS_CONST, std::enable_if_t<!C> * = nullptr>
	operator Item &() noexcept {
		return item();
	}

	operator const Item &() const noexcept { return item(); }

	operator Handle() const noexcept { return handle; }
	explicit operator bool() const noexcept { return (bool)handle; }

	template <bool C = IS_CONST, std::enable_if_t<!C> * = nullptr>
	void erase() const {
		pool.erase(handle);
	}
};
} // namespace VOLTISO_NAMESPACE::pool

//

namespace VOLTISO_NAMESPACE::pool {

// Current implementation does not ever release memory to the system.
// In the future, it's possible to keep free-lists per block, but additional
// indirection would make things a little bit slower.
template <class Options>
  requires concepts::Options<Options>
class Custom
    : public Object<
        typename Options ::template With<option::CustomTemplate<Custom>>>,
      public Singleton<
        typename Options::template Get<option::Allocator>>::Guard {
	using Base =
	  Object<typename Options::template With<option::CustomTemplate<Custom>>>;
	using Self = Base::Self;

public:
	using Item = Options::template Get<option::Item>;
	static_assert(!std::is_reference_v<Item>);
	static_assert(!std::is_const_v<Item>);
	static_assert(!std::is_volatile_v<Item>);

	using Allocator = Options::template Get<option::Allocator>;

	using Handle = Handle ::WithKind<Item *>::template WithBrand<Self>;

	using Accessor = pool::Accessor<Options, false>;
	using ConstAccessor = pool::Accessor<Options, true>;

	static_assert(std::is_same_v<typename Handle::Kind, Item *>);

private:
	using Slot = _::Slot<Item>;

private:
	DynamicArray<_::Block<Options>> blocks;
	Slot *anyFreeSlot = nullptr;

	// below values could be read from last block instead
	Slot *remainingStart = nullptr;
	Slot *remainingEnd = nullptr;

	size_t numSlots = 0;

	friend Accessor;
	friend ConstAccessor;

#if VOLTISO_DEBUG_POOL
public:
	~Custom() {
		// std::cout << "DESTROYING POOL " << demangle(typeid(decltype(*this)))
		//           << std::endl;
		size_t numSlotsInChain = 0;
		auto nextSlot = anyFreeSlot;
		while (nextSlot) {
			++numSlotsInChain;
			nextSlot = nextSlot->next;
		}
		auto numSlotsInLastBlock = remainingEnd - remainingStart;
		EQ(numSlotsInChain + numSlotsInLastBlock, numSlots);
	}
#endif

public:
	Item &operator[](Handle handle) noexcept {
		CHECK(handle);
		auto slot = std::bit_cast<Item *>(handle);
		static_assert(sizeof(slot) == sizeof(Handle));
		return *slot;
	}

	const Item &operator[](Handle handle) const noexcept {
		CHECK(handle);
		auto slot = std::bit_cast<Item *>(handle);
		static_assert(sizeof(slot) == sizeof(Handle));
		return *slot;
	}

public:
	ConstAccessor operator()(Handle handle) const noexcept {
		return ConstAccessor(*this, handle);
	}

	Accessor operator()(Handle handle) noexcept {
		return Accessor(*this, handle);
	}

	template <class... Args>
	  requires(std::is_constructible_v<Item, Args...>)
	Accessor insert(Args &&...args) {
		if (anyFreeSlot) [[likely]] {
			auto slot = anyFreeSlot;
			anyFreeSlot = anyFreeSlot->next;
			slot->storage.construct(std::forward<Args>(args)...);
			return Accessor(*this, slot);
		} else if (remainingStart != remainingEnd) [[likely]] {
			auto slot = remainingStart;
			++remainingStart;
			slot->storage.construct(std::forward<Args>(args)...);
			return Accessor(*this, slot);
		} else [[unlikely]] {
			auto numNewSlots = numSlots + 1;
			GE(numNewSlots, 1);
			blocks.maybeGrowAndPush(numNewSlots);
			numSlots += numNewSlots;
			remainingStart = blocks.last().allocationStart;
			remainingEnd = blocks.last().allocationEnd;
			auto slot = remainingStart;
			++remainingStart;
			new (&slot->storage) Item{std::forward<Args>(args)...};
			return Accessor(*this, slot);
		}
	}

	auto insert(const Item &item) { return insert<>(item); }
	auto insert(Item &&item) { return insert<>(std::move(item)); }

	void erase(const Handle &handle) noexcept {
		CHECK(handle);
		auto slot = std::bit_cast<_::Slot<Item> *>(handle);
		static_assert(sizeof(slot) == sizeof(Handle));
		slot->storage.destroy();
		slot->next = this->anyFreeSlot;
		this->anyFreeSlot = slot;
	}

private:
	auto &allocator() const { return Allocator::instance(); }

public:
	template <class... MoreOptions>
	using With = Base::template With<MoreOptions...>;

	template <class Item> using WithItem = With<option::Item<Item>>;

	template <class Allocator>
	using WithAllocator = With<option::Allocator<Allocator>>;
}; // class Custom
} // namespace VOLTISO_NAMESPACE::pool

// !

namespace VOLTISO_NAMESPACE {
template <class Item>
class Pool : public pool::Custom<
               Options<option::Item<Item>, option::Self<Pool<Item>>>> {
	using Base =
	  pool::Custom<Options<option::Item<Item>, option::Self<Pool<Item>>>>;
	using Base::Base;
};

} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
