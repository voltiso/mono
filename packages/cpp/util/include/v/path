#pragma once
#include <v/_/_>

#include "v/brand/path"
#include "v/option/extents"
#include "v/option/self"
#include "v/options"
#include "v/size"
#include "v/string"
#include "v/tag/copy-consteval"

// ! the only reason PathString is a separate class is that we can't specify
// deduction guide for alias template, which we need for `operator""_p`
namespace VOLTISO_NAMESPACE {
template <Size NUM_ITEMS>
class Path : public string::Custom<Options<
               option::Extents<ValuePack<NUM_ITEMS>>, brand::Path<>,
               option::Self<Path<NUM_ITEMS>>>> {
	using Base = string::Custom<Options<
	  option::Extents<ValuePack<NUM_ITEMS>>, brand::Path<>,
	  option::Self<Path<NUM_ITEMS>>>>;

public:
	using Base::Base;
	template <class... Args>
	Path(Args &&...args) : Base(std::forward<Args>(args)...) {}

	// public:
	// 	using Base::operator=;
	// 	template <class... Args> decltype(auto) operator=(Args &&...args) {
	// 		return Base::operator=(std::forward<Args>(args)...);
	// 	}

public:
	// `consteval`-only constructor for `operator""_p`
	template <Size NUM_ITEMS_WITH_NULL>
	  requires(NUM_ITEMS_WITH_NULL == NUM_ITEMS + 1)
	consteval Path(const char (&items)[NUM_ITEMS_WITH_NULL])
	    : Base(tag::COPY_CONSTEVAL, items) {
		VOLTISO_EQ(items[NUM_ITEMS], '\0');
	}
};

// deduction guide
template <Size NUM_CHARS>
Path(const char (&)[NUM_CHARS])
  -> Path<NUM_CHARS - 1>; // -1 for null terminator
} // namespace VOLTISO_NAMESPACE

// !

namespace VOLTISO_NAMESPACE::path {
using Dynamic = dynamicString::Custom<Options<brand::Path<>>>;
} // namespace VOLTISO_NAMESPACE::path

// !

namespace VOLTISO_NAMESPACE {
// #pragma GCC diagnostic push
// #pragma GCC diagnostic ignored "-Wuser-defined-literals"
template <Path PATH> consteval auto &operator""_p() { return PATH; }
// #pragma GCC diagnostic pop
} // namespace VOLTISO_NAMESPACE
