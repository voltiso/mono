#pragma once
#include <v/_/_>

#include "v/runner"
#include "v/scope"
#include "v/string"

#include <thread>

#include <v/ON>

namespace VOLTISO_NAMESPACE {
class Thread : private v::Runner::ThreadSafe {
	using Base = std::thread;
	using BaseRunner = v::Runner::ThreadSafe;

protected:
	const string::Dynamic _name;
	std::thread _thread;

public:
	const auto &name() const noexcept { return _name; }

public:
	INLINE void
	join() noexcept(noexcept(BaseRunner::stop()) && noexcept(_thread.join())) {
		BaseRunner::stop();
		_thread.join();
	}

public:
	INLINE ~Thread() noexcept(noexcept(this->join())) {
		// std::cout << "Thread '" << _name << "' stopping..." << std::endl;
		BaseRunner::stop();
		// std::cout << "Thread '" << _name << "' joining..." << std::endl;
		this->join();
		// std::cout << "Thread '" << _name << "' joined." << std::endl;
	}

public:
	template <class TString>
	Thread(TString &&name)
	    : _name(std::forward<TString>(name)), _thread([this] {
		      try {
			      Scope scope{};
			      auto guard = scope.use();
			      v::scope::borrow<v::Runner::ThreadSafe>(*this);
			      BaseRunner::loop();
		      } catch (const std::exception &e) {
			      std::cerr << "Thread '" << _name << "' std::exception: " << e.what()
			                << std::endl;
		      } catch (...) {
			      std::cerr << "Thread '" << _name << "' unknown exception."
			                << std::endl;
		      }
	      }) {}

public:
	using BaseRunner::post;
	using BaseRunner::postRepeating;
};
} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
