#pragma once
#include "v/_/0-namespace.hpp" // IWYU pragma: keep

#include <memory>
#include <type_traits>

namespace VOLTISO_NAMESPACE::is {

// ! std::remove_all_extents not working ?????????

template <class T>
static constexpr auto TriviallyRelocatable =
  // !std::is_class_v<T> && !std::is_union_v<T>;
  // !std::is_class_v<std::remove_all_extents<T>> &&
  // !std::is_union_v<std::remove_all_extents<T>>;
  std::is_reference_v<T> ||
  std::is_trivially_copyable_v<T>; // may be incomplete yet

template <class T>
static constexpr auto TriviallyRelocatable<std::unique_ptr<T>> = true;

template <class T>
static constexpr auto TriviallyRelocatable<std::shared_ptr<T>> = true;

// static_assert(TriviallyRelocatable<int>);

} // namespace VOLTISO_NAMESPACE::is
