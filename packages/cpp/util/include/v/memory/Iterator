#pragma once
#include <v/_/_>

#include <cstddef>
#include <type_traits>

namespace VOLTISO_NAMESPACE::memory {

template <class _Item, class Derived> class IteratorCrtp {
public:
  using Self = IteratorCrtp;
  using Item = _Item;
  // using Item = Derived::Item;

  Item *item; // uninitialized

  IteratorCrtp() { static_assert(std::is_final_v<Derived>); }

  IteratorCrtp(Item *item) : item(item) {
    static_assert(std::is_final_v<Derived>);
  }

  bool operator==(const Self &other) const = default;
  bool operator!=(const Self &other) const = default;

  auto &operator++() {
    ++item;
    return *this;
  }

  auto &operator--() {
    --item;
    return *this;
  }

  auto &operator+=(std::ptrdiff_t difference) {
    item += difference;
    return *this;
  }

  auto operator+(std::ptrdiff_t difference) const {
    return Derived(item + difference);
  }

  auto &operator-=(std::ptrdiff_t difference) {
    item -= difference;
    return *this;
  }

  auto operator-(std::ptrdiff_t difference) const {
    return Derived(item - difference);
  }

  Item &operator*() const { return *item; }
  Item *operator->() const { return item; }
};

//

template <class _Item>
class Iterator final : public IteratorCrtp<_Item, Iterator<_Item>> {
public:
  using Self = Iterator;
  using Base = IteratorCrtp<_Item, Iterator<_Item>>;

  using Item = _Item;

  using Base::Base;
};

//

//

//

template <class _Item, class Derived> class ConstIteratorCrtp {
public:
  using Item = _Item;

  using Self = ConstIteratorCrtp;

  const Item *item;

  ConstIteratorCrtp(const Item *item) : item(item) {}

  bool operator==(const Self &other) const = default;
  bool operator!=(const Self &other) const = default;

  auto &operator++() {
    ++item;
    return *this;
  }

  auto &operator+=(std::ptrdiff_t difference) {
    item += difference;
    return *this;
  }

  auto operator+(std::ptrdiff_t difference) const {
    return Derived(item + difference);
  }

  auto &operator-=(std::ptrdiff_t difference) {
    item -= difference;
    return *this;
  }

  auto operator-(std::ptrdiff_t difference) const {
    return Derived(item - difference);
  }

  const Item &operator*() const { return *item; }
  const Item *operator->() const { return item; }
};

template <class _Item>
class ConstIterator final
    : public ConstIteratorCrtp<_Item, ConstIterator<_Item>> {
public:
  using Self = ConstIterator;
  using Base = ConstIteratorCrtp<_Item, ConstIterator<_Item>>;

  using Item = _Item;

  using Base::Base;
};

} // namespace VOLTISO_NAMESPACE::memory
