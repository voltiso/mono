#pragma once
#include <v/_/_>

#include <cstddef>

#include <v/ON>

namespace VOLTISO_NAMESPACE::memory {
template <class TItem> class Iterator {
	using Self = Iterator;

public:
	using Item = TItem;

	Item *target; // uninitialized

	INLINE Iterator(Item *target) noexcept : target(target) {}

	VOLTISO_FORCE_INLINE auto operator<=>(const Self &other) const = default;

	VOLTISO_FORCE_INLINE auto &operator++() noexcept {
		++target;
		return *this;
	}

	VOLTISO_FORCE_INLINE auto &operator--() noexcept {
		--target;
		return *this;
	}

	VOLTISO_FORCE_INLINE auto &operator+=(std::ptrdiff_t difference) noexcept {
		target += difference;
		return *this;
	}

	VOLTISO_FORCE_INLINE auto
	operator+(std::ptrdiff_t difference) const noexcept {
		return Self{target + difference};
	}

	VOLTISO_FORCE_INLINE auto &operator-=(std::ptrdiff_t difference) noexcept {
		target -= difference;
		return *this;
	}

	VOLTISO_FORCE_INLINE auto
	operator-(std::ptrdiff_t difference) const noexcept {
		return Self{target - difference};
	}

	VOLTISO_FORCE_INLINE Item &operator*() noexcept { return *target; }
	VOLTISO_FORCE_INLINE Item *operator->() noexcept { return target; }
};

} // namespace VOLTISO_NAMESPACE::memory

#include <v/OFF>
