#pragma once
#include <v/_/_>

#include "v/Storage"

#include <type_traits>

#ifndef VOLTISO_DEBUG_SINGLETON
	#define VOLTISO_DEBUG_SINGLETON VOLTISO_DEBUG
#endif

#if VOLTISO_DEBUG_SINGLETON
	#include "v/demangle"
	#include <iostream>
#endif

namespace VOLTISO_NAMESPACE {
template <class T> class Singleton {
	static_assert(!std::is_reference_v<T>);
	static_assert(!std::is_const_v<T>);
	static_assert(!std::is_volatile_v<T>);

private:
	struct Data {
		Storage<T> storage;
		std::size_t numReferences = 1;
		Data() {
#if VOLTISO_DEBUG_SINGLETON
			std::cout << "Singleton<" << demangle(typeid(T)) << "> CREATE"
			          << std::endl;
#endif
			// storage.construct();
			// can't use storage.construct(), because Storage is not a friend
			new (&storage.item()) T();
		}
		void decrement() {
			--numReferences;
			if (numReferences == 0) [[unlikely]] {
#if VOLTISO_DEBUG_SINGLETON
				std::cout << "Singleton<" << demangle(typeid(T)) << "> DESTROY"
				          << std::endl;
#endif
				storage.destroy();
			}
		}
		~Data() { decrement(); }
	}; // struct Data

	static Data &data() {
		static Data data;
		return data;
	}

public:
	static T &instance() {
		// #if VOLTISO_DEBUG_SINGLETON
		//     if (data().numReferences == 0) [[unlikely]] {
		//       throwError(
		//           std::runtime_error("singleton::instance() numReferences ==
		//           0"));
		//     }
		// #endif
		return data().storage.item();
	}

	// ! if your singletons depend on each other, derive the user-singleton class
	// from `Guard`
	class Guard {
	public:
		Guard() { ++data().numReferences; }
		~Guard() { data().decrement(); }
	}; // class Guard
}; // class Singleton
} // namespace VOLTISO_NAMESPACE
