#pragma once

// #define VOLTISO_DEBUG false // !!!
// #define VOLTISO_ENABLE_THREAD_LOCAL false // !!!

// !

#ifndef VOLTISO_DEBUG
	#ifdef NDEBUG
		#define VOLTISO_DEBUG false
	#else
		#define VOLTISO_DEBUG true
	#endif
#endif

// !

#ifndef VOLTISO_ENABLE_THREAD_LOCAL
	#define VOLTISO_ENABLE_THREAD_LOCAL true
#endif

#ifndef VOLTISO_THREAD_LOCAL
	#if VOLTISO_ENABLE_THREAD_LOCAL
		#define VOLTISO_THREAD_LOCAL thread_local
	#else
		#define VOLTISO_THREAD_LOCAL
	#endif
#endif

// !

// #if __has_include(<glog/logging.h>)
// #include <glog/logging.h>
// #else
// #define DCHECK(a) ((void)0)
// #define DCHECK_EQ(a, b) ((void)0)
// #define DCHECK_NE(a, b) ((void)0)
// #define DCHECK_GT(a, b) ((void)0)
// #define DCHECK_GE(a, b) ((void)0)
// #define DCHECK_LT(a, b) ((void)0)
// #define DCHECK_LE(a, b) ((void)0)
// #endif

#if VOLTISO_DEBUG
	#include "v/demangle"
#endif

#include "v/_/0-force-inline.hpp" // IWYU pragma: export

// v::check::lt(a, 10) << "a must be less than 10, got {} instead" << a;

// auto rawMessage = "a must be less than 10" r;
// auto message = "a must be less than 10, got % instead" f % a;

#include "v/_/0-namespace.hpp" // IWYU pragma: export

namespace VOLTISO_NAMESPACE {
#ifdef NDEBUG
inline constexpr bool IS_DEBUG_BUILD = false;
#else
inline constexpr bool IS_DEBUG_BUILD = true;
#endif
} // namespace VOLTISO_NAMESPACE

// !

// #ifndef VOLTISO_HAS_BUILTIN_BIT_CAST
// 	#if (defined(__GNUC__) || defined(__clang__)) && !defined(__ICC)
// 		#define VOLTISO_HAS_BUILTIN_BIT_CAST true
// 	#else
// 		#define VOLTISO_HAS_BUILTIN_BIT_CAST false
// 	#endif
// #endif

#include "v/_/0-operators.hpp" // IWYU pragma: export

// --------------------------------------------------------------
