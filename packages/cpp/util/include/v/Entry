#pragma once
#include <v/_/_>

#include "v/has"
#include "v/is_trivially_relocatable"

namespace VOLTISO_NAMESPACE {
template <class _Key, class _Value> struct Entry {
	using Key = _Key;
	using Value = _Value;
	Key key;
	Value value{};

	[[nodiscard]] auto hash() const noexcept {
		static_assert(noexcept(getHash(key)));
		return getHash(key);
	}
};

template <class Key, class Value>
static constexpr auto is_trivially_relocatable<Entry<Key, Value>> =
  is_trivially_relocatable<Key> && is_trivially_relocatable<Value>;

//

template <hasFunction::entry Item>
constexpr auto &getEntry(Item &item) noexcept {
	static_assert(noexcept(item.entry()));
	return item.entry();
}

template <hasValue::entry Item> constexpr auto &getEntry(Item &item) noexcept {
	return item.entry;
}

// const version (delegates to non-const)
template <class Item>
constexpr const auto &getEntry(const Item &item) noexcept {
	static_assert(noexcept(getEntry(const_cast<Item &>(item))));
	return getEntry(const_cast<Item &>(item));
}

//

// ! getKey

// fallback - identity by default
template <class Item>
// requires(!requires { Item::key; }) && (!requires { Item::entry; })
constexpr auto &getKey(Item &item) noexcept {
	return item; // identity function by default
}

template <hasFunction::key Item> constexpr auto &getKey(Item &item) noexcept {
	static_assert(noexcept(item.key()));
	return item.key();
}

template <hasValue::key Item> constexpr auto &getKey(Item &item) noexcept {
	return item.key;
}

template <has::entry Item> constexpr auto &getKey(Item &item) noexcept {
	static_assert(noexcept(getKey(getEntry(item))));
	return getKey(getEntry(item));
}

// const version (delegates to non-const)
template <class Item>
  requires(!std::is_const_v<Item>)
constexpr const auto &getKey(const Item &item) noexcept {
	static_assert(noexcept(getKey(const_cast<Item &>(item))));
	return getKey(const_cast<Item &>(item));
}

namespace _ {
template <class Item> struct GetKeyImpl {
	using Type = std::decay_t<decltype(getKey(std::declval<Item>()))>;
};
template <class Key, class Value> struct GetKeyImpl<Entry<Key, Value>> {
	using Type = Key;
};
} // namespace _

template <class Item>
using GetKey = std::conditional_t<
  std::is_same_v<typename _::GetKeyImpl<Item>::Type, std::remove_cvref_t<Item>>,
  Item, typename _::GetKeyImpl<Item>::Type>;

//

// ! getValue

// fallback - identity by default
template <class Item>
  requires(!has::value<Item> && !has::entry<Item>)
constexpr auto &getValue(Item &item) noexcept {
	return item; // identity function by default
}

template <hasFunction::value Item>
constexpr auto &getValue(Item &item) noexcept {
	static_assert(noexcept(item.value()));
	return item.value();
}

template <hasValue::value Item> constexpr auto &getValue(Item &item) noexcept {
	return item.value;
}

template <has::entry Item> constexpr auto &getValue(Item &item) noexcept {
	return getValue(getEntry(item));
}

// const version (delegates to non-const version)
template <class Item>
constexpr const auto &getValue(const Item &constItem) noexcept {
	return getValue(const_cast<Item &>(constItem));
}
} // namespace VOLTISO_NAMESPACE

//

namespace VOLTISO_NAMESPACE::_ {
template <class Item> struct GetValueImpl {
	using Type = std::decay_t<decltype(getValue(std::declval<Item>()))>;
};
template <class Key, class Value> struct GetValueImpl<Entry<Key, Value>> {
	using Type = Value;
};
} // namespace VOLTISO_NAMESPACE::_

namespace VOLTISO_NAMESPACE {
template <class Item>
using GetValue = std::conditional_t<
  std::is_same_v<
    std::remove_cvref_t<Item>, typename _::GetValueImpl<Item>::Type>,
  Item, typename _::GetValueImpl<Item>::Type>;

//

template <class Item>
using GetEntry = std::decay_t<decltype(getEntry(std::declval<Item>()))>;
} // namespace VOLTISO_NAMESPACE
