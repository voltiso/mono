#pragma once
#include <v/_/_>

#include <v/ON>

namespace VOLTISO_NAMESPACE {
template <class T>
  requires(!std::is_const_v<T>)
class Ref {
public:
	T &target;

	INLINE constexpr Ref(T &target) noexcept : target(target) {}

	Ref(const Ref &) = delete;
	Ref &operator=(const Ref &) = delete;

	INLINE constexpr operator T &() noexcept { return target; }
	INLINE constexpr operator const T &() const noexcept { return target; }
};
} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
