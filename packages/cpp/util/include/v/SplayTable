#pragma once

#include "v/Entry"
#include "v/Likelihood"
#include "v/Pool"
#include "v/Splay"
#include "v/concepts/Options"
#include "v/option/Entry"

#include <v/ON>

namespace VOLTISO_NAMESPACE::splayTable {
template <class Options>
  requires concepts::Options<Options>
class Custom;
} // namespace VOLTISO_NAMESPACE::splayTable

namespace VOLTISO_NAMESPACE {
template <class Entry> class SplayTable;
} // namespace VOLTISO_NAMESPACE

namespace VOLTISO_NAMESPACE::splayTable::_ {
template <class Options>
  requires concepts::Options<Options>
struct Node {
private:
	using Entry = Options::template Get<option::Entry>;
	using Allocator = Options::template Get<option::Allocator>;
	using Pool = Pool<int>::template WithAllocator<Allocator>; // need to cast
	using Handle = Pool::Handle::template WithBrand<void>;

public:
	Entry entry;
	Array<Handle, 2> children = {handle::INVALID, handle::INVALID};
};
} // namespace VOLTISO_NAMESPACE::splayTable::_

//

namespace VOLTISO_NAMESPACE::splayTable::_ {
template <class Options, bool IS_CONST> class Accessor {
private:
	template <class T>
	using MaybeConst = std::conditional_t<IS_CONST, const T, T>;

private:
	using Custom = MaybeConst<Custom<Options>>;
	using Handle = Custom::Pool::Handle;
	using Key = Custom::Key;
	using Value = Custom::Value;

protected:
	MaybeConst<Custom> &_splayTable;
	const Handle handle;
	bool _exists;

public:
	[[nodiscard]] VOLTISO_FORCE_INLINE bool exists() const {
		return this->_exists;
	}

protected:
	friend Custom;
	Accessor(MaybeConst<Custom> &splayTable, const Handle handle)
	    : _splayTable(splayTable), handle(handle),
	      _exists(handle != handle::INVALID) {}

public:
	const Value &value() const {
		CHECK(this->_exists);
		return getValue(this->_splayTable.pool[this->_splayTable.root].entry);
	}

	Value &value() {
		CHECK(this->_exists);
		return getValue(this->_splayTable.pool[this->_splayTable.root].entry);
	}

public:
	operator const Value &() const { return this->value(); }
	operator Value &()
	  requires(!IS_CONST)
	{
		return this->value();
	}

	const Value &operator*() const { return this->value(); }
	Value &operator*()
	  requires(!IS_CONST)
	{
		return this->value();
	}

	const Value *operator->() const { return &this->value(); }
	Value *operator->()
	  requires(!IS_CONST)
	{
		return &this->value();
	}

	const Value *operator&() const { return &this->value(); }
	Value *operator&()
	  requires(!IS_CONST)
	{
		return &this->value();
	}

public:
	void erase()
	  requires(!IS_CONST)
	{
		CHECK(this->_exists);
		auto &root = this->_splayTable.root;
		this->_splayTable._splay()(root).erase(this->handle);
	}

	template <Likelihood LIKELIHOOD = Likelihood::LIKELY>
	void maybeErase()
	  requires(!IS_CONST)
	{
		if constexpr (LIKELIHOOD == Likelihood::UNKNOWN) {
			if (this->_exists) {
				erase();
			}
		} else if constexpr (LIKELIHOOD == Likelihood::LIKELY) {
			if (this->_exists) [[likely]] {
				erase();
			}
		} else if constexpr (LIKELIHOOD == Likelihood::UNLIKELY) {
			if (this->_exists) [[unlikely]] {
				erase();
			}
		} else {
			static_assert(false);
		}
	}
};

//

template <class Options, bool IS_CONST>
class SetAccessor : public Accessor<Options, IS_CONST> {
	using Base = Accessor<Options, IS_CONST>;

private:
	template <class T>
	using MaybeConst = std::conditional_t<IS_CONST, const T, T>;

private:
	using Custom = Custom<Options>;
	using Entry = Custom::Entry;

private:
	const Entry &entry;

private:
	friend Custom;
	SetAccessor(
	  const Entry &entry, MaybeConst<Custom> &splayTable, const auto &handle)
	    : Base(splayTable, handle), entry(entry) {}

public:
	auto &insert() {
		CHECK(!this->_exists);
		auto &root = this->_splayTable.root;
		this->_splayTable._splay()(root).insert(this->entry);
		return *this;
	}

	auto &maybeInsert() { return maybeInsertLikely(); }

	auto &maybeInsertLikely() {
		if (!this->_exists) [[likely]] {
			insert();
		}
		return *this;
	}

	auto &maybeInsertUnlikely() {
		if (!this->_exists) [[unlikely]] {
			insert();
		}
		return *this;
	}
};

//

template <class Options, bool IS_CONST>
class MapAccessor : public Accessor<Options, IS_CONST> {
	using Base = Accessor<Options, IS_CONST>;
	using Base::Base;

private:
	template <class T>
	using MaybeConst = std::conditional_t<IS_CONST, const T, T>;

private:
	using Custom = Custom<Options>;
	using Value = Custom::Value;
	using Key = Custom::Key;

private:
	const Key &key; // can be move-only

private:
	friend Custom;
	MapAccessor(
	  const Key &key, MaybeConst<Custom> &splayTable, const auto &handle)
	    : Base(splayTable, handle), key(key) {}

public:
	template <class... Args> auto &insert(Args &&...args) {
		CHECK(!this->_exists);
		auto &root = this->_splayTable.root;
		this->_splayTable._splay()(root).insert(
		  Entry{this->key, Value{std::forward<Args>(args)...}});
		this->_exists = true;
		return *this;
	}

	template <class... Args> auto &maybeInsert(Args &&...args) {
		return maybeInsertLikely(std::forward<Args>(args)...);
	}

	template <class... Args> auto &maybeInsertLikely(Args &&...args) {
		if (!this->_exists) [[likely]] {
			insert(std::forward<Args>(args)...);
		}
		return *this;
	}

	template <class... Args> auto &maybeInsertUnlikely(Args &&...args) {
		if (!this->_exists) [[unlikely]] {
			insert(std::forward<Args>(args)...);
		}
		return *this;
	}

}; // class MapAccessor

template <class Options> class Iterator {
private:
	using Custom = Custom<Options>;
	using Pool = Custom::Pool;

private:
	// !!! this was wrong - splay can have linear height
	// using Stack =
	//   DynamicArray<typename Pool::Handle>::template WithInPlaceOnly<32>;
	using Stack = DynamicArray<typename Pool::Handle>;
	Stack stack;

private:
	Custom &splayTable;

private:
	friend Custom;
	Iterator(bool end, Custom &splayTable) : splayTable(splayTable) {
		if (!end) {
			auto current = splayTable.root;
			while (current) {
				stack.maybeGrowAndPush(current);
				current = splayTable.pool[current].children[0];
			}
		}
	}

public:
	void operator++() {
		GT(stack.numItems(), 0);
		auto &pool = splayTable.pool;
		auto current = stack.last();
		if (pool[current].children[1]) {
			current = pool[current].children[1];
			stack.maybeGrowAndPush(current);
			while (pool[current].children[0]) {
				current = pool[current].children[0];
				stack.maybeGrowAndPush(current);
			}
		} else {
			do {
				current = stack.pop();
			} while (stack.numItems() && pool[stack.last()].children[1] == current);
		}
	}

	// ! only for `for auto`
	bool operator==(const Iterator &other) const {
		return stack.numItems() == other.stack.numItems();
	}

	auto &operator*() const { return splayTable.pool[stack.last()].entry; }
}; // class Iterator

} // namespace VOLTISO_NAMESPACE::splayTable::_

//

namespace VOLTISO_NAMESPACE::splayTable {
template <class Options>
  requires concepts::Options<Options>
class Custom : public Object<Options> {
	using Base = Object<Options>;
	using Self = Base::Self;

public:
	using Entry = Options::template Get<option::Entry>;
	using Key = GetKey<Entry>;
	using Value = GetValue<Entry>;
	using Allocator = Options::template Get<option::Allocator>;

	// using ConstAccessor = _::ConstAccessor<Final, Parameters>;
	using SetAccessor = _::SetAccessor<Options, false>;
	using ConstSetAccessor = _::SetAccessor<Options, true>;

	using MapAccessor = _::MapAccessor<Options, false>;
	using ConstMapAccessor = _::MapAccessor<Options, true>;

	friend SetAccessor;
	friend MapAccessor;
	friend ConstSetAccessor;
	friend ConstMapAccessor;
	friend _::Accessor<Options, false>;
	friend _::Accessor<Options, true>;

	// using ConstIterator = ConstIterator<Options>;
	using Iterator = _::Iterator<Options>;
	friend Iterator;

private:
	using Node = _::Node<Options>;
	using Pool = Pool<Node>::template WithAllocator<Allocator>;

private:
	static_assert(!std::is_const_v<Pool>);
	Pool pool;
	Pool::Handle root = handle::INVALID;

public:
	~Custom() { _destroy(root); }

private:
	void _destroy(Pool::Handle node) {
		if (!node) [[likely]] { // optimize empty splay path (fast)
			return;
		}

		DynamicArray<typename Pool::Handle> stack = {node};
		while (stack.numItems()) {
			auto node = stack.pop();

			if (node->children[0]) [[likely]] {
				stack.maybeGrowAndPush(node->children[0]);
			}

			if (node->children[1]) [[likely]] {
				stack.maybeGrowAndPush(node->children[1]);
			}

			pool.erase(node);
		}
	}
	// // non-stack-overflow friendly
	// void _destroy(Pool::Handle node) {
	//   if (!node)
	//     return;

	//   _destroy(node->children[0]);
	//   _destroy(node->children[1]);
	//   pool.erase(node);
	// }

public:
	Custom() = default;
	Custom(std::initializer_list<Entry> entries) {
		for (auto &entry : entries) {
			insert(entry);
		}
	}

public:
	template <class... Args>
	  requires std::is_constructible_v<Entry, Args...>
	VOLTISO_FORCE_INLINE auto insert(Args &&...args) {
		auto newHandle = _splay()(root).insert(std::forward<Args>(args)...);
		EQ(newHandle, root);
		return SetAccessor{root->entry, *this, newHandle};
	}

public:
	template <Likelihood LIKELIHOOD = Likelihood::UNKNOWN, class TEntry>
	  requires std::is_same_v<Entry, std::decay_t<TEntry>>
	VOLTISO_FORCE_INLINE auto maybeInsert(TEntry &&entry) {
		auto &key = getKey(entry);
		auto handle = _splay()(root).find(key);
		bool exists = handle != handle::INVALID;
		if constexpr (LIKELIHOOD == Likelihood::LIKELY) {
			if (!exists) [[likely]] {
				return insert(entry);
			}
		} else if constexpr (LIKELIHOOD == Likelihood::UNLIKELY) {
			if (!exists) [[unlikely]] {
				return insert(entry);
			}
		} else if constexpr (LIKELIHOOD == Likelihood::UNKNOWN) {
			if (!exists) {
				return insert(entry);
			}
		} else {
			static_assert(false);
		}
		return SetAccessor{entry, *this, handle};
	}

	template <Likelihood LIKELIHOOD = Likelihood::UNKNOWN, class... Args>
	  requires std::is_constructible_v<Entry, Args...>
	VOLTISO_FORCE_INLINE auto maybeInsert(Args &&...args) {
		auto entry = Entry{std::forward<Args>(args)...};
		return maybeInsert<LIKELIHOOD>(std::move(entry));
	}

private:
	VOLTISO_FORCE_INLINE auto _splay() { return Splay<Pool>(this->pool); }

public:
	template <class... Args> Value &operator[](Args &&...args) {
		return operator()(std::forward<Args>(args)...).value();
	}

	template <class... Args> const Value &operator[](Args &&...args) const {
		return operator()(std::forward<Args>(args)...).value();
	}

public:
	SetAccessor operator()(const Entry &entry) {
		auto splay = this->_splay();
		auto handle = splay(this->root).find(getKey(entry));
		return SetAccessor{entry, *this, handle};
	}

	ConstSetAccessor operator()(const Entry &entry) const {
		auto splay = this->_splay();
		auto handle = splay(this->root).find(getKey(entry));
		return ConstSetAccessor{entry, *this, handle};
	}

	template <
	  class K = Key, std::enable_if_t<!std::is_same_v<K, Entry>> * = nullptr>
	MapAccessor operator()(const Key &key) {
		auto splay = this->_splay();
		auto handle = splay(this->root).find(key);
		return MapAccessor{key, *this, handle};
	}

	template <
	  class K = Key, std::enable_if_t<!std::is_same_v<K, Entry>> * = nullptr>
	ConstMapAccessor operator()(const Key &key) const {
		auto splay = this->_splay();
		auto handle = splay(this->root).find(key);
		return ConstMapAccessor{key, *this, handle};
	}

public:
	Iterator begin() { return Iterator(false, *this); }
	Iterator end() { return Iterator(true, *this); }
}; // class Custom
} // namespace VOLTISO_NAMESPACE::splayTable

// !

namespace VOLTISO_NAMESPACE {
template <class Entry>
class SplayTable
    : public splayTable::Custom<
        Options<option::Entry<Entry>, option::Self<SplayTable<Entry>>>> {
	using Base = splayTable::Custom<
	  Options<option::Entry<Entry>, option::Self<SplayTable<Entry>>>>;
	using Base::Base;
};

} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
