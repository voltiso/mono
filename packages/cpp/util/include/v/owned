#pragma once
#include <v/_/_>

#include "v/concepts/options"
#include "v/is/instantiated-from"
#include "v/is/trivially-relocatable"
#include "v/object"
#include "v/option/custom-template"
#include "v/option/weak"
#include "v/options"
#include "v/pool"

#include <type_traits>

// forward declarations
namespace VOLTISO_NAMESPACE::owned {
template <class Options>
  requires concepts::Options<Options>
class Custom;

template <class Item> class Weak;
} // namespace VOLTISO_NAMESPACE::owned

namespace VOLTISO_NAMESPACE {
template <class Item> class Owned;
} // namespace VOLTISO_NAMESPACE

namespace VOLTISO_NAMESPACE::owned {
template <class Options>
  requires concepts::Options<Options>
struct Specializations;
} // namespace VOLTISO_NAMESPACE::owned

// !

namespace VOLTISO_NAMESPACE::owned::_ {
template <class... Ts>
// requires concepts::Options<Options>
using GetCustom = Specializations<Ts...>::Result;
} // namespace VOLTISO_NAMESPACE::owned::_

//

// ! SPECIALIZATIONS MAP
namespace VOLTISO_NAMESPACE::owned {
template <class Options>
  requires concepts::Options<Options>
struct Specializations {
	using Result = Custom<Options>;
};
template <class Item, template <class...> class CustomTemplate>
struct Specializations<
  Options<option::Item<Item>, option::CustomTemplate<CustomTemplate>>> {
	using Result = Owned<Item>;
};
template <class Item, template <class...> class CustomTemplate>
struct Specializations<Options<
  option::Item<Item>, option::WEAK<true>,
  option::CustomTemplate<CustomTemplate>>> {
	using Result = owned::Weak<Item>;
};
} // namespace VOLTISO_NAMESPACE::owned

// !

namespace VOLTISO_NAMESPACE::owned {
template <class Options>
  requires concepts::Options<Options>
class Custom : public Object<typename Options ::template With<
                 option::CustomTemplate<_::GetCustom>>> {
private:
	using Base = Object<
	  typename Options ::template With<option::CustomTemplate<_::GetCustom>>>;
	using Self = Base::Self;

	using Item = Options::template Get<option::Item>;
	static_assert(
	  !std::is_reference_v<Item>, "you probably don't want Owned<Item&>");

	using CanonicalItem = std::remove_cv_t<Item>;
	using Pool = Pool<CanonicalItem>;
	static constexpr bool WEAK = Options::template GET<option::WEAK>;

public:
	template <class... Args> static Self create(Args &&...args) {
		return Self(pool().insert(std::forward<Args>(args)...), nullptr);
	}

	static Self create(const Item &item) {
		return Self(pool().insert(item), nullptr);
	}

	VOLTISO_FORCE_INLINE ~Custom() {
		if constexpr (!WEAK) {
			// moving out causes empty handle
			// should rarely happen other than inlined
			// also, prefer relocation than moving
			if (this->_target) [[likely]] {
				pool().erase(this->_target);
			}
		}
	}

private:
	// @internal
	template <class Item>
	Custom(Item &&item, void *_unusedTag) : _target{std::forward<Item>(item)} {
		// std::cout << "create " << _item << std::endl;
	}

public:
	// reference semantics, can't have null ref (unless moving-out)
	Custom() = delete;

	// disable copy-constructor for non-weak
	Custom(const Custom &)
	  requires(!WEAK)
	= delete;

	// copy constructor (for weak)
	template <class OtherOptions>
	  requires(
	    WEAK && concepts::Options<OtherOptions> &&
	    std::is_convertible_v<
	      typename OtherOptions::template Get<option::Item> *, Item *>)
	Custom(const Custom<OtherOptions> &other) : _target(other._target) {}

	template <class OtherOptions>
	  requires concepts::Options<OtherOptions>
	friend class Custom;

	// move constructor - ownership transfer (not for weak)
	Custom(Custom &&other) noexcept : _target(other._target) {
		other._target = handle::INVALID;
	}

	// move constructor - ownership transfer (not for weak)
	template <class Other>
	  requires(
	    !WEAK && !Other::Options::template GET<option::WEAK> &&
	    is::InstantiatedFrom<Other, Custom>)
	Custom(Other &&other) noexcept : _target(other._item) {
		other._item = handle::INVALID;
		// std::cout << other._item.value << std::endl;
	}

	Custom &operator=(const Custom &) = delete;

public:
	// assign to underlying value
	template <class OtherItem>
	  requires(std::is_assignable_v<Item &, OtherItem>)
	Custom &operator=(OtherItem &&other) noexcept(
	  noexcept(pool()[this->_target] = std::forward<OtherItem>(other))) {
		pool()[this->_target] = std::forward<OtherItem>(other);
		return *this;
	}

public:
	VOLTISO_FORCE_INLINE constexpr Item &target() const noexcept {
		return *_target;
	}

	// ! ambiguous
	void operator&() const = delete;

	// ! ambiguous
	void operator*() const = delete;

	VOLTISO_FORCE_INLINE constexpr Item *operator->() const noexcept {
		return _target;
	}

	// ref semantics
	VOLTISO_FORCE_INLINE constexpr operator Item &() const noexcept {
		return *_target;
	}
	// operator Item *() const { return &**this; }

	// ! is this even legal?
	VOLTISO_FORCE_INLINE explicit constexpr operator Item &&() const noexcept {
		return std::move(*_target);
	}

private:
	Pool::Handle _target = handle::INVALID;
	static constexpr auto &pool() { return Singleton<Pool>::instance(); }

public:
	template <class Item>
	using WithItem = Base::template With<option::Item<Item>>;
	using Weak = Base::template With<option::WEAK<true>>;

public:
	Weak weak() const { return *this; }

public:
	template <
	  class OtherOptions,
	  std::enable_if_t<std::is_same_v<
	    Item, typename OtherOptions::template Get<option::Item>>> * = nullptr>
	constexpr bool operator==(const Custom<OtherOptions> &other) const noexcept {
		static_assert(noexcept(this->_target == other._target));
		return this->_target == other._target;
	}

public:
	constexpr auto &key() const noexcept {
		// return this->_target.value;
		return this->_target;
	}

	// public:
	// 	VOLTISO_FORCE_INLINE auto hash() const noexcept {
	// 		static_assert(noexcept(getHash(this->_target)));
	// 		// static_assert(
	// 		//   std::is_same_v<decltype(getHash(this->_target)), std::size_t>);
	// 		// return getHash(this->_target);

	// 		return 1;
	// 		// return this->_target.value;
	// 		// return this->_target.value / sizeof(Item);
	// 	}

public:
	VOLTISO_FORCE_INLINE explicit operator bool() const noexcept
	  requires(std::is_convertible_v<Item, bool>)
	{
		return this->target();
	}

public:
	// rvalue-only
	template <class Self>
	  requires(!std::is_reference_v<Self>)
	[[nodiscard]] decltype(auto) freeze(this Self &&self) noexcept {
		static_assert(!std::is_reference_v<Self>);
		static_assert(!std::is_volatile_v<Self>, "not implemented");
		using SelfClass = Self;
		using NewSelfClass = SelfClass::template With<option::Item<const Item>>;
		return std::forward<decltype(self)>(self).template as<NewSelfClass>();
	}

	// lvalue-only
	[[nodiscard]] decltype(auto) frozen(this auto &&self) noexcept {
		using Self = decltype(self);
		static_assert(std::is_lvalue_reference_v<Self>);
		using SelfClass = std::remove_reference_t<Self>;
		static_assert(!std::is_volatile_v<SelfClass>, "not implemented");
		using NewSelfClass = SelfClass::template With<option::Item<const Item>>;
		return std::forward<decltype(self)>(self).template as<NewSelfClass>();
	}
}; // class Custom

template <class Item>
class Weak
    : public owned::Custom<Options<
        option::Item<Item>, option::WEAK<true>, option::Self<Weak<Item>>>> {
	using Base = owned::Custom<
	  Options<option::Item<Item>, option::WEAK<true>, option::Self<Weak<Item>>>>;
	using Base::Base;

public:
	using Base::operator=;
};

//

template <class Options>
VOLTISO_FORCE_INLINE decltype(auto)
operator!(const Custom<Options> &self) noexcept {
	return !(self.target());
}

#define DEFINE_OPERATOR(op)                                                    \
	template <class Options, class Other>                                        \
	VOLTISO_FORCE_INLINE auto operator op(                                       \
	  const Custom<Options> &lhs, Other &&rhs) noexcept                          \
	  -> decltype((*lhs)op std::forward<Other>(rhs)) {                           \
		return (*lhs)op std::forward<Other>(rhs);                                  \
	}                                                                            \
                                                                               \
	template <class Options, class Other>                                        \
	VOLTISO_FORCE_INLINE auto operator op(                                       \
	  Other &&lhs, const Custom<Options> &rhs) noexcept                          \
	  -> decltype(std::forward<Other>(lhs) op(*rhs)) {                           \
		return std::forward<Other>(lhs) op(*rhs);                                  \
	}

// ! reference semantics !
DEFINE_OPERATOR(==)
DEFINE_OPERATOR(!=)

DEFINE_OPERATOR(<)
DEFINE_OPERATOR(<=)

DEFINE_OPERATOR(>)
DEFINE_OPERATOR(>=)

DEFINE_OPERATOR(+)
DEFINE_OPERATOR(+=)

DEFINE_OPERATOR(-)
DEFINE_OPERATOR(-=)

DEFINE_OPERATOR(*)
DEFINE_OPERATOR(*=)

DEFINE_OPERATOR(/)
DEFINE_OPERATOR(/=)

DEFINE_OPERATOR(%)
DEFINE_OPERATOR(%=)

DEFINE_OPERATOR(<<)
DEFINE_OPERATOR(<<=)

DEFINE_OPERATOR(>>)
DEFINE_OPERATOR(>>=)

DEFINE_OPERATOR(&)
DEFINE_OPERATOR(&=)

DEFINE_OPERATOR(|)
DEFINE_OPERATOR(|=)

DEFINE_OPERATOR(^)
DEFINE_OPERATOR(^=)

DEFINE_OPERATOR(&&)
DEFINE_OPERATOR(||)

#undef DEFINE_OPERATOR
} // namespace VOLTISO_NAMESPACE::owned

// !

namespace VOLTISO_NAMESPACE {
template <class Options>
static constexpr auto is::TriviallyRelocatable<owned::Custom<Options>> = true;

template <class Item>
static constexpr auto is::TriviallyRelocatable<owned::Weak<Item>> = true;
} // namespace VOLTISO_NAMESPACE

// !

// !

namespace VOLTISO_NAMESPACE {
template <class Item>
class Owned : public owned::Custom<
                Options<option::Item<Item>, option::Self<Owned<Item>>>> {
	using Base =
	  owned::Custom<Options<option::Item<Item>, option::Self<Owned<Item>>>>;
	using Base::Base;

public:
	using Base::operator=;
}; // class Owned

template <class Item>
static constexpr auto is::TriviallyRelocatable<Owned<Item>> = true;

} // namespace VOLTISO_NAMESPACE
