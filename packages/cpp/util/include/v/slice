#pragma once
#include <v/_/_>

#include "v/_/const-string-slice.forward.hpp"
#include "v/extent"
#include "v/get/extent"
#include "v/memory/iterator"
#include "v/object"
#include "v/options"

#include <cstddef>
#include <ostream>
#include <string_view>
#include <tuple>
#include <type_traits>

#include <v/ON>

//

namespace VOLTISO_NAMESPACE::_ {
template <Extent T_EXTENT> class SliceData : public Object<Options<>> {
public:
	static constexpr auto EXTENT = T_EXTENT;
	// constexpr SliceData() noexcept { static_assert(T_EXTENT !=
	// Extent::DYNAMIC); }
};

template <> class SliceData<Extent::DYNAMIC> : public Object<Options<>> {
public:
	const Extent extent;

	constexpr SliceData(const Extent &extent) noexcept : extent(extent) {
		NE(extent, Extent::DYNAMIC);
	}
};
} // namespace VOLTISO_NAMESPACE::_

// !

namespace VOLTISO_NAMESPACE::slice::_ {
template <class TItem, Extent T_EXTENT> struct GetItems {
	using Result = TItem[T_EXTENT.value];
};

// template <class TItem, Extent T_EXTENT>
//   requires(std::is_reference_v<TItem>)
// struct GetItems<TItem, T_EXTENT> {
// 	using Result = void;
// };

template <class TItem, Extent T_EXTENT>
  requires(T_EXTENT == Extent::UNBOUND || T_EXTENT == Extent::DYNAMIC)
struct GetItems<TItem, T_EXTENT> {
	using Result = TItem[];
};

} // namespace VOLTISO_NAMESPACE::slice::_

// !

namespace VOLTISO_NAMESPACE {
// TExtent = -1 means dynamic extent
// TExtent = 0 means unknown extent
template <class TItem, Extent T_EXTENT = Extent::DYNAMIC>
class Slice : public _::SliceData<T_EXTENT> {
	using Base = _::SliceData<T_EXTENT>;

public:
	using Item = TItem;
	// using Scalar = TScalar;

public:
	[[nodiscard]] VOLTISO_FORCE_INLINE constexpr auto extent() const noexcept {
		if constexpr (requires { Base::extent; }) {
			return Base::extent;
		} else {
			return T_EXTENT;
		}
	}

public:
	using Items = typename slice::_::GetItems<Item, T_EXTENT>::Result;

	// Items &items;
	// Items *const items; // ! super-bug-prone
	Item *const items;

public:
	// create from single item (static extent)
	constexpr Slice(Item &item) noexcept
	  requires(T_EXTENT.value == 1)
	    : items(&item) {}

	// create from raw array - static extent
	constexpr Slice(Items &items) noexcept
	  requires(T_EXTENT != Extent::DYNAMIC)
	    : items(items) {
		// static_assert(
		//   !std::is_same_v<std::remove_const_t<Item>, char>,
		//   "allow slices of char?");
		static_assert(std::is_array_v<Items>);
		static_assert(!requires { this->extent; }); // no need to set?
	}

	// create from anything - static extent, unbound
	template <class TSource>
	  requires(T_EXTENT == Extent::UNBOUND)
	constexpr Slice(TSource &&source) noexcept
	  requires(requires {
		  { &source[0] } -> std::convertible_to<Item *>;
	  } && get::EXTENT<std::remove_reference_t<TSource>> == Extent::UNBOUND)
	    : items(&source[0]) {}

	// create from anything - static extent
	template <class TSource>
	  requires(
	    T_EXTENT != Extent::DYNAMIC && T_EXTENT != Extent::UNBOUND &&
	    T_EXTENT == get::EXTENT<std::remove_reference_t<TSource>>)
	constexpr Slice(TSource &&source) noexcept
	  requires requires {
		  { &source[0] } -> std::convertible_to<Item *>;
	  }
	    : items(&source[0]) {
		static_assert(!requires { this->extent; }); // no need to set?
		static_assert(get::extent(source) == T_EXTENT.value);
	}

	// create from anything - dynamic extent
	template <class TSource>
	  requires(T_EXTENT == Extent::DYNAMIC)
	constexpr Slice(TSource &&source) noexcept
	  requires(requires {
		          { &source[0] } -> std::convertible_to<Item *>;
	          })
	    : Base(get::extent(source)), items(&source[0]) {}

	// create from pointer - static extent
	template <class ItemsPointer>
	  requires(
	    T_EXTENT != Extent::DYNAMIC &&
	    std::is_pointer_v<std::remove_reference_t<ItemsPointer>> &&
	    !std::is_array_v<std::remove_reference_t<ItemsPointer>>)
	constexpr Slice(ItemsPointer &&pFirstItem) noexcept : items(pFirstItem) {
		static_assert(!requires { this->extent; }); // no need to set?
	}

	// create from pointer - dynamic extent
	template <class ItemsPointer>
	  requires(T_EXTENT == Extent::DYNAMIC &&
	           std::is_pointer_v<std::remove_reference_t<ItemsPointer>> &&
	           !std::is_array_v<std::remove_reference_t<ItemsPointer>>)
	constexpr Slice(ItemsPointer &&pFirstItem, std::size_t numItems) noexcept
	    : Base(numItems), items(pFirstItem) {}

	// constexpr Slice(Item *pFirstItem, std::size_t size)
	//   requires(T_EXTENT == Extent::DYNAMIC)
	//     : items(pFirstItem) {
	// 	Base::extent = size;
	// }

	// cheap copy, so implicit
	constexpr Slice(const Slice &) noexcept = default;

	constexpr Slice &operator=(const Slice &) = delete; // ref semantics

	// ! explicit - raw arrays don't handle comparison nicely
	explicit operator Items &() const { return items; }

	auto &operator[](size_t i) {
		LT(i, extent());
		return items[i];
	}

	const auto &operator[](size_t i) const {
		LT(i, extent());
		return items[i];
	}

	template <std::size_t START, std::size_t END>
	[[nodiscard]] constexpr auto slice() const noexcept {
		auto ptr = items + START;
		return Slice<Item, END - START>(ptr);
	}

	[[nodiscard]] constexpr auto
	slice(std::size_t start, std::size_t end) const noexcept {
		LT(start, extent());
		LT(end, extent());
		return Slice<Item, Extent::DYNAMIC>(items + start, end - start);
	}

	[[nodiscard]] constexpr operator std::string_view() const noexcept
	  requires std::is_same_v<Item, char> || std::is_same_v<Item, const char>
	{
		return std::string_view(items, extent().value);
	}

	// ! iteration
	auto begin() const noexcept { return memory::Iterator(items); }
	auto end() const noexcept { return memory::Iterator(items + extent().value); }
}; // class Slice

// deduction guide for raw arrays
template <class Item, size_t NUM_ITEMS>
Slice(Item (&array)[NUM_ITEMS]) -> Slice<Item, NUM_ITEMS>;

// deduction guide for anything - static extent
template <class TArray>
  requires(!std::is_array_v<TArray>)
Slice(TArray &array)
  -> Slice<std::remove_reference_t<decltype(array[0])>, get::EXTENT<TArray>>;

// // deduction guide for anything - dynamic extent
// template <class TArray>
//   requires(!std::is_array_v<TArray> && get::EXTENT<TArray> ==
//   Extent::DYNAMIC)
// Slice(TArray &array)
//   -> Slice<std::remove_reference_t<decltype(array[0])>, get::EXTENT<TArray>>;

//

// if both sides are convertible to ConstStringSlice, compare this way
template <class A, class B>
[[nodiscard]] inline constexpr bool operator==(const A &a, const B &b)
  requires requires {
	  ConstStringSlice(a);
	  ConstStringSlice(b);
  }
{
	auto sliceA = ConstStringSlice(a);
	auto sliceB = ConstStringSlice(b);
	if constexpr (requires {
		              sliceA.EXTENT;
		              sliceB.EXTENT;
	              }) {
		static_assert(sliceA.EXTENT == sliceB.EXTENT, "String sizes mismatch");
		return std::equal(
		  sliceA.items, sliceA.items + sliceA.EXTENT.value, sliceB.items);
	} else {
		// dynamic branch

		// ! we could force user to check this
		// EQ(sliceA.extent(), sliceB.extent());

		// ! or allow this, bad for performance if slices are always the same length
		// likely / unlikely ?? really depends - let compiler decide
		if (sliceA.extent() != sliceB.extent()) /* [[unlikely]] */ {
			return false;
		}

		NE(sliceA.extent(), Extent::DYNAMIC); // should never happen
		NE(sliceA.extent(), Extent::UNBOUND); // can happen
		if (sliceA.items == sliceB.items) [[likely]] {
			// this will usually be *unlikely*, but we speed-up this path
			return true;
		}
		return std::equal(
		  sliceA.items, sliceA.items + sliceA.extent().value, sliceB.items);
	}
}

// if both sides are convertible to Slice, compare this way
// ! NOTE: This currently asserts that both sides are the same size and point to
// different memory. (performance)
template <class A, class B>
[[nodiscard]] inline constexpr auto operator==(const A &a, const B &b)
  requires requires {
	  Slice(a);
	  Slice(b);
  } && (!(requires { ConstStringSlice(a); }) ||
        !(requires { ConstStringSlice(b); }))
{
	// int aa = ConstStringSlice(a);
	// static_assert(requires { ConstStringSlice(a); });
	auto sliceA = Slice(a);
	auto sliceB = Slice(b);
	// if constexpr (std::is_same_v<A, v::Array<int, 3>>) {
	//   // int x = sliceA;
	//   static_assert(sliceA.EXTENT == 3);
	// }
	// int aa = sliceB;
	if constexpr (requires {
		              sliceA.EXTENT;
		              sliceB.EXTENT;
	              }) {
		static_assert(sliceA.EXTENT == sliceB.EXTENT, "String sizes mismatch");
		return std::equal(
		  sliceA.items, sliceA.items + sliceA.EXTENT.value, sliceB.items);
	} else {
		// dynamic branch
		if (sliceA.extent() != sliceB.extent()) [[unlikely]] {
			return false;
		}
		NE(sliceA.extent(), Extent::DYNAMIC); // should never happen
		NE(sliceA.extent(), Extent::UNBOUND); // can happen

		// ! check in client code (performance)
		EQ(sliceA.extent(), sliceB.extent());

		// ! check in client code (performance)
		NE(sliceA.items, sliceB.items);

		return std::equal(
		  sliceA.items, sliceA.items + sliceA.extent().value, sliceB.items);
	}
}

// !

// ! rhs voltiso types concatenation (array or string)

// if lhs is convertible to ConstStringSlice, and RHS is a voltiso type,
// we can convert LHS to ConstStringSlice and use its operator<<
template <class A, class B>
[[nodiscard]] inline constexpr auto operator<<(const A &a, const B &b)
  requires(requires { ConstStringSlice(a); } && !is::VoltisoType<A>)
{
	// static_assert(std::is_same_v<
	//               decltype(ConstStringSlice(a).copy()), ConstStringSlice<2>
	//               &&>);
	return ConstStringSlice(a).copy() << b;
}

// otherwise, try Slice(a), but only if can't convert lhs to ConstStringSlice
template <class A, class B>
[[nodiscard]] inline constexpr auto operator<<(const A &a, const B &b)
  requires requires { Slice(a); } &&
           (!(requires { ConstStringSlice(a); }) && !is::VoltisoType<A>)
{
	return Slice(a).copy() << b;
}

// !

template <class TItem, Extent T_EXTENT>
std::ostream &
operator<<(std::ostream &os, const Slice<TItem, T_EXTENT> &slice) {
	os << '[';
	for (std::size_t i = 0; i < slice.extent().value; i++) {
		if (i > 0) {
			os << ", ";
		}
		os << slice.items[i];
	}
	return os << "]";
} // operator<<
} // namespace VOLTISO_NAMESPACE

// !

namespace std {
template <class Item, auto EXTENT>
struct tuple_size<VOLTISO_NAMESPACE::Slice<Item, EXTENT>>
    : std::integral_constant<size_t, EXTENT.value> {};
} // namespace std

//

#include <v/OFF>
