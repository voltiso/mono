#pragma once
#include <v/_/_>

#include "v/divCeil"
#include <v/Array>
#include <v/singleton>
#include <v/storage/Storage>

#include <cstddef>

// tree with fringe indexing... (must benchmark against regular 2i,2i+1)

namespace VOLTISO_NAMESPACE::tree::_ {
static constexpr Size getNumNodes(Size numLeafs, Size arity) {
	Size row = numLeafs;
	Size numNodes = 0;
	while (row > 1) {
		numNodes += row;
		row = (row + arity - 1) / arity;
	}
	return numNodes + 1;
}
static_assert(getNumNodes(8, 2) == 15);
static_assert(getNumNodes(8, 3) == 12);
} // namespace VOLTISO_NAMESPACE::tree::_

namespace VOLTISO_NAMESPACE {
// in-place
// Aggregate must be an associative operation
template <class _Node, Size _NUM_LEAFS, Size Arity = 2> class Tree {
	using Self = Tree;

public:
	using Node = _Node;
	static constexpr auto NUM_LEAFS = _NUM_LEAFS;
	static constexpr auto NUM_NODES = tree::_::getNumNodes(NUM_LEAFS, Arity);

	Array<Storage<Node>, NUM_NODES> nodes;

	Tree() {
		// use constructor taking `numChildren`, if provided
		if constexpr (std::is_same_v<decltype(nodes[0].construct(0), 0), int>) {
			for (Size iLeafNode = 0; iLeafNode < NUM_LEAFS; ++iLeafNode) {
				auto numChildren = 0;
				nodes[iLeafNode].construct(numChildren);
			}

			Size rowSize = NUM_LEAFS;
			Size prevRowRemainder = 0;
			Size rowFirstNodeIndex = 0;

			while (rowSize > 1) [[likely]] {
				rowFirstNodeIndex += rowSize;
				rowSize = divCeil(rowSize, Arity);
				prevRowRemainder = rowSize % Arity;

				for (Size iNode = rowFirstNodeIndex;
				     iNode < rowFirstNodeIndex + rowSize - 1; ++iNode) {
					auto numChildren = Arity;
					nodes[iNode].construct(numChildren);
				}

				nodes[rowFirstNodeIndex + rowSize - 1].construct(
				  prevRowRemainder ? prevRowRemainder : Arity);
			}
		} else {
			for (Size iNode = 0; iNode < NUM_NODES; ++iNode) {
				nodes[iNode].construct();
			}
		}
	}

	~Tree() {
		for (auto &node : nodes) {
			node.destroy();
		}
	}

	template <class Index>
	using CustomHandle = decltype(nodes)::template CustomHandle<Index>;
	using Handle = decltype(nodes)::Handle;

	template <class Index> Node &operator[](const CustomHandle<Index> &handle) {
		return nodes[handle.value];
	}

	template <class Index>
	const Node &operator[](const CustomHandle<Index> &handle) const {
		return const_cast<Self &>(*this)[handle];
	}

	Node &root() { return nodes.last(); }
	const Node &root() const { return nodes.last(); }

	template <class Index>
	void aggregateAncestors(const CustomHandle<Index> &leafHandle) {
		auto iRowNode = leafHandle.value;
		DCHECK_LT(iRowNode, NUM_LEAFS);
		Size rowSize = NUM_LEAFS;
		Size rowFirstNodeIndex = 0;
		for (;;) {
			auto iNode = rowFirstNodeIndex + iRowNode;

			// use `.reset()` if provided (support for large heap objects)
			if constexpr (std::is_same_v<
			                decltype(nodes[iNode].aggregate.reset(), 0), int>) {
				nodes[iNode].aggregate.reset();
			} else {
				nodes[iNode].aggregate = decltype(nodes[iNode].aggregate)();
			}

			for (auto iChild = 0; iChild < Arity; ++iChild) {
				if constexpr (
				  std::is_same_v<
				    decltype(nodes[0].aggregate.compoundApply(nodes[0].aggregate, 0), 0),
				    int>) {
					nodes[iNode].aggregate.compoundApply(
					  nodes[(iNode - rowFirstNodeIndex) * Arity + iChild].aggregate,
					  iChild);
				} else if constexpr (
				  std::is_same_v<
				    decltype((nodes[0].aggregate += nodes[0].aggregate), 0), int>) {
					nodes[iNode].aggregate +=
					  nodes[(iNode - rowFirstNodeIndex) * Arity + iChild].aggregate;
				} else {
					static_assert(
					  false, "node.aggregate should provide either "
					         "`operator+=` or `.compoundApply`");
				}
			}

			if (iNode == NUM_NODES - 1) [[unlikely]] {
				break;
			}

			rowFirstNodeIndex += rowSize;
			rowSize = divCeil(rowSize, Arity);
		}
	}
};

#ifndef NDEBUG
struct Aggregate {
	int sum = 0;
	void operator+=(const Aggregate &other) { sum += other.sum; }
};
struct Node {
	Aggregate aggregate;
};
static_assert(sizeof(Tree<Node, 8>) == 15 * sizeof(Node));
static_assert(sizeof(Tree<Node, 8, 3>) == 12 * sizeof(Node));
#endif
} // namespace VOLTISO_NAMESPACE
