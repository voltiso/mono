#pragma once
#include <v/_/_>

#include "v/_/Maybe.forward.hpp"

#include "v/_/Storage.forward.hpp"

#include <v/ON>

namespace VOLTISO_NAMESPACE {
template <class Value> class Maybe {
	Storage<Value> _storage;
	bool _hasValue = false;

public:
	Maybe() = default;
	Maybe(const Value &value) : _storage(value), _hasValue(true) {}

public:
	[[nodiscard]] INLINE constexpr bool hasValue() const noexcept {
		return this->_hasValue;
	}

	[[nodiscard]] INLINE constexpr Value &value() noexcept {
		return this->_storage.object();
	}

	[[nodiscard]] INLINE constexpr const Value &value() const noexcept {
		return this->_storage.object();
	}

	[[nodiscard]] operator Value &() noexcept { return this->value(); }

	[[nodiscard]] operator const Value &() const noexcept {
		return this->value();
	}
};
} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
