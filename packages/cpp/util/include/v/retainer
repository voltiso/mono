#pragma once

#include "v/dynamic-array"
#include "v/handle"
#include "v/pool"

#include <ranges>

#include <v/ON>

namespace VOLTISO_NAMESPACE {

class Retainer {
private:
	// struct alignas(std::max_align_t) TStorage {};
	// static_assert(sizeof(TStorage) == alignof(std::max_align_t));

	// using Data = DynamicArray<TStorage>;
	// Data data;

	using Deleter = void (*)(Handle);

	struct Item {
		Handle handle;
		Deleter deleter;
	};
	DynamicArray<Item> items;

public:
	~Retainer() {
		for (auto &item : items | std::views::reverse) {
			item.deleter(item.handle);
		}
	}

public:
	Retainer() = default;

	Retainer(const Retainer &) = delete;
	Retainer &operator=(const Retainer &) = delete;

	// Retainer(Retainer &&) = default;

private:
	template <class T, class... Args>
	  requires std::is_constructible_v<T, Args...>
	INLINE auto &_retain(Args &&...args) {
		// static_assert(is::TriviallyRelocatable<T>);
		// auto numNewStorageItems = divCeil(sizeof(T), sizeof(TStorage));
		// data.setNumSlotsAtLeast(data.numItems() + numNewStorageItems);
		// auto memory = &data.slots()->object() + data.numItems();
		// auto prevNumStorageItems = data.numItems();
		// data.setNumItems(data.numItems() + numNewStorageItems);
		// new (memory) T(std::forward<Args>(args)...);
		auto handle =
		  Singleton<Pool<T>>::instance().insert(std::forward<Args>(args)...).handle;

		items.maybeGrowAndPush(Item{.handle = handle, .deleter = [](Handle handle) {
			                            Singleton<Pool<T>>::instance().erase(handle);
		                            }});
		return *handle.value;
	}

public:
	template <class T, class... Args>
	  requires std::is_constructible_v<T, Args...>
	INLINE auto &retain(Args &&...args) {
		return _retain<T>(std::forward<Args>(args)...);
	}

	template <class T>
	  requires(!std::is_reference_v<T>)
	INLINE auto &retain(T &&value) {
		return _retain<std::remove_reference_t<T>>(std::forward<T>(value));
	}
};

} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
