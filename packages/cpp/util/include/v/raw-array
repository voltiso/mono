#pragma once
#include <v/_/_>

#include "v/extent"
#include "v/value-pack"

#include <type_traits>

#include <v/ON>

namespace VOLTISO_NAMESPACE {

namespace _::rawArray {

template <class T, auto... ES> struct Rec;
template <class T> struct Rec<T> {
	using Result = T;
};
template <class T, auto E, auto... ES> struct Rec<T, E, ES...> {
	using Result = Rec<T, ES...>::Result[E];
};
template <class T, auto... ES> struct Rec<T, (Size)V::extent::DYNAMIC, ES...> {
	using Result = Rec<T, ES...>::Result[];
};
template <class T, auto... ES> struct Rec<T, V::extent::DYNAMIC, ES...> {
	using Result = Rec<T, ES...>::Result[];
};

//

template <class T, auto... ES> struct Get {
	using Result = typename Rec<T, ES...>::Result;
};

template <class T> struct Get<T> {
	using Result = T[];
};

} // namespace _::rawArray

/**
 * `RawArray<int>` -> `int[]`
 * `RawArray<int, 3>` -> `int[3]`
 * `RawArray<int, 2, 3>` -> `int[2][3]`
 * `RawArray<int, V::extent::DYNAMIC, 2, 3>` -> `int[][2][3]`
 * `RawArray<int, V::extent::DYNAMIC>` -> `int[]`
 */
template <class Item, auto... ES>
using RawArray = typename _::rawArray::Get<Item, ES...>::Result;

// RawArray<int, 5> a;
// template <class T> using Arr = T;
// Arr<int[][2][3]> b;

static_assert(std::is_same_v<RawArray<int>, int[]>);

static_assert(std::is_same_v<RawArray<int, V::extent::DYNAMIC>, int[]>);
static_assert(std::is_same_v<RawArray<int, 3>, int[3]>);
static_assert(std::is_same_v<RawArray<int, 2, 3>, int[2][3]>);
static_assert(
  std::is_same_v<RawArray<int, V::extent::DYNAMIC, 2, 3>, int[][2][3]>);

// static_assert(
//     std::is_same_v<v::RawArray<const char, 123> &, const char (&)[123]>);

} // namespace VOLTISO_NAMESPACE

// !

namespace V::_::rawArray {
template <class Item, class Extents> struct GetRawArray;
template <class Item, auto... ES> struct GetRawArray<Item, ValuePack<ES...>> {
	using Result = RawArray<Item, ES...>;
};
} // namespace V::_::rawArray

namespace V {
template <class Item, class Extents>
using GetRawArray = typename _::rawArray::GetRawArray<Item, Extents>::Result;
}

#include <v/OFF>
