#pragma once
#include <v/_/_>

#include "v/any-function"
#include "v/concepts/options"
#include "v/context"
#include "v/hash-set"
#include "v/heap"
#include "v/object"
#include "v/option/custom-template"
#include "v/option/input-options"
#include "v/option/mutable"
#include "v/option/noexcept"
#include "v/option/self"
#include "v/option/thread-safe"
#include "v/options"
#include "v/owned"
#include "v/retainer"

#include <chrono>
#include <cstdint>
#include <thread>

#include <v/ON>

// forward declarations
namespace VOLTISO_NAMESPACE::runner {
template <class Options>
  requires concepts::Options<Options>
class Custom;
} // namespace VOLTISO_NAMESPACE::runner

namespace VOLTISO_NAMESPACE {
class Runner;
} // namespace VOLTISO_NAMESPACE

namespace VOLTISO_NAMESPACE::runner::_ {
using Clock = std::chrono::high_resolution_clock;
using TimePoint = Clock::time_point;
using Delay = Clock::duration;
using Priority = int;

template <class TRunner> class Task {
public:
	using Clock = runner::_::Clock;
	using TimePoint = runner::_::TimePoint;
	using Duration = Clock::duration;
	using Priority = runner::_::Priority;
	using AnyCallback = TRunner::AnyCallback;

	struct Options {
		Priority priority = 0;
		Duration delay = std::chrono::nanoseconds(0);

		bool isRepeating = false;

		// only if isRepeating
		Duration period = std::chrono::nanoseconds(0);

		// only if isRepeating && period > 0
		Duration maxLagCompensationDuration = std::chrono::nanoseconds(0);
	};

public:
	Task(const Task &) = delete;
	Task &operator=(const Task &) = delete;

	inline ~Task();

public:
	inline void cancel();
	inline void maybeCancel();
	inline void pause();
	inline void maybePause();
	inline void resume();
	inline void maybeResume();

	// private:
	// friend Runner;

public:
	// has to be public - so that it can be created using
	// `Owned<Runner>::create()`

	/** @internal for Runner */
	template <
	  class TFunction, class TOptions,
	  std::enable_if_t<
	    std::is_convertible_v<TFunction, AnyCallback> &&
	    std::is_convertible_v<TOptions, Options>> * = nullptr>
	Task(TRunner *runner, TFunction &&run, TOptions &&options)
	    : run{std::forward<TFunction>(run)}, runner{runner},
	      options{std::forward<TOptions>(options)},
	      targetExecutionTime{Clock::now() + options.delay} {}

public:
	AnyCallback run;
	TRunner *runner = nullptr;
	Options options;
	TimePoint targetExecutionTime = TimePoint::min();

	// increated on re-schedule (in order to ignore old `Heap` entries)
	uint64_t scheduleId = 0;
}; // class Task
} // namespace VOLTISO_NAMESPACE::runner::_

namespace VOLTISO_NAMESPACE::runner::_ {
template <class TRunner> struct ImmediateTaskRef {
	static constexpr bool IS_TRIVIALLY_RELOCATABLE = true;
	using Task = TRunner::Task;

	Task &task;
	const uint64_t scheduleId = 0;
	const Priority priority; // have to copy - task may be deleted already

	ImmediateTaskRef(Task &task)
	    : task(task), scheduleId(task.scheduleId),
	      priority(task.options.priority) {}

	bool operator<(const ImmediateTaskRef &other) const {
		return priority < other.priority;
	}
};

template <class TRunner> struct ScheduledTaskRef {
	static constexpr bool IS_TRIVIALLY_RELOCATABLE = true;
	using Task = TRunner::Task;

	Task &task;
	const uint64_t scheduleId = 0;
	const TimePoint targetExecutionTime;

	ScheduledTaskRef(Task &task)
	    : task(task), scheduleId(task.scheduleId),
	      targetExecutionTime(task.targetExecutionTime) {}

	// smaller time -> greater order (priority)
	bool operator<(const ScheduledTaskRef &other) const {
		return targetExecutionTime > other.targetExecutionTime;
		// return task->targetExecutionTime > other.task->targetExecutionTime;
	}
}; // struct ScheduledTaskRef
} // namespace VOLTISO_NAMESPACE::runner::_

//

namespace VOLTISO_NAMESPACE::runner::_ {
template <bool IS_THREAD_SAFE> struct ThreadSafeData {};
template <> struct ThreadSafeData<true> {
	std::mutex queuesMutex;
	std::condition_variable wakeUp;
};
} // namespace VOLTISO_NAMESPACE::runner::_

//

namespace VOLTISO_NAMESPACE::runner {
template <class Options>
  requires concepts::Options<Options>
class Custom
    : public Object<typename Options::template WithDefault<
        option::CustomTemplate<Custom>, option::InputOptions<Options>>> {
private:
	using Base = Object<typename Options::template WithDefault<
	  option::CustomTemplate<Custom>, option::InputOptions<Options>>>;
	using Self = Base::Self;

public:
	using Task = runner::_::Task<Custom>;
	using Clock = runner::_::Clock;
	using Duration = Clock::duration;
	using TimePoint = runner::_::TimePoint;
	using Delay = runner::_::Delay;
	static constexpr bool IS_NOEXCEPT = Options::template GET<option::NOEXCEPT>;
	static constexpr bool IS_MUTABLE = Options::template GET<option::MUTABLE>;
	static constexpr bool IS_THREAD_SAFE =
	  Options::template GET<option::THREAD_SAFE>;
	using AnyCallback = AnyFunction<void()>::With<
	  option::NOEXCEPT<IS_NOEXCEPT>, option::MUTABLE<IS_MUTABLE>>;

private:
	using ImmediateTaskRef = runner::_::ImmediateTaskRef<Custom>;
	using ScheduledTaskRef = runner::_::ScheduledTaskRef<Custom>;

private:
	bool _keepRunning = true;

	friend Task;
	HashSet<Task &> _allTasks;

	Heap<ImmediateTaskRef> _immediateTasks;
	Heap<ScheduledTaskRef> _scheduledTasks;

	[[no_unique_address]] _::ThreadSafeData<IS_THREAD_SAFE> _threadSafeData;

public:
	const std::thread::id threadId = std::this_thread::get_id();

public:
	Custom() = default;

	// not relocatable - tasks reference it
	Custom(const Custom &) = delete;
	Custom &operator=(const Custom &) = delete;

public:
	~Custom() {
		for (auto &task : _allTasks) {
			task.runner = nullptr;
		}
	}

private:
	INLINE auto _lockQueues() noexcept(noexcept(std::unique_lock{
	  this->_threadSafeData.queuesMutex}))
	  requires(IS_THREAD_SAFE)
	{
		return std::unique_lock{this->_threadSafeData.queuesMutex};
	}

	INLINE auto _lockQueues() noexcept
	  requires(!IS_THREAD_SAFE)
	{
		return 0;
	}

	INLINE void _wakeUp() noexcept
	  requires(IS_THREAD_SAFE)
	{
		_threadSafeData.wakeUp.notify_one();
	}

	INLINE void _wakeUp() noexcept
	  requires(!IS_THREAD_SAFE)
	{}

private:
	// ⚠️ not thread-safe
	void _updateImmediateTasks() {
		auto now = Clock::now();

		// move all tasks that are ready to run to immediateTasks
		// (and remove old scheduleIds before re-scheduling)
		while (_scheduledTasks.hasItems() &&
		       _scheduledTasks.peek().targetExecutionTime <= now) [[unlikely]] {
			auto taskRef = _scheduledTasks.pop();
			// auto taskRef = scheduledTasks.peek();
			// scheduledTasks.pop();
			if (
			  _allTasks.has(taskRef.task) &&
			  taskRef.task.scheduleId == taskRef.scheduleId) [[likely]] {
				_immediateTasks.maybeGrowAndPush(taskRef.task);
			}
		}

		// ignore already canceled scheduledTasks (and old scheduleIds before
		// re-scheduling)
		while (_scheduledTasks.hasItems() &&
		       (!_allTasks.has(_scheduledTasks.peek().task) ||
		        _scheduledTasks.peek().task.scheduleId !=
		          _scheduledTasks.peek().scheduleId)) [[unlikely]] {
			_scheduledTasks.pop();
		}

		// ignore already canceled immediateTasks
		while (_immediateTasks.hasItems() &&
		       (!_allTasks.has(_immediateTasks.peek().task) ||
		        _immediateTasks.peek().task.scheduleId !=
		          _immediateTasks.peek().scheduleId)) [[unlikely]] {
			_immediateTasks.pop();
		}
	}

public:
	// process one task if available (only if not stopped)
	bool processOneImmediateTask() {
		auto lock = _lockQueues();

		_updateImmediateTasks();
		if (!_immediateTasks.hasItems()) [[unlikely]] {
			return false; // no tasks to process
		}

		if (!_keepRunning) [[unlikely]] {
			return false; // stop processing
		}
		auto &task = _immediateTasks.pop().task;
		if constexpr (IS_THREAD_SAFE) {
			lock.unlock(); // unlock before running the task
		}
		// std::cout << "run task..." << std::endl;
		try {
			task.run();
		} catch (const std::exception &e) {
			std::cerr << "Exception in task: " << e.what() << std::endl;
			throw;
		} catch (...) {
			std::cerr << "Unknown exception in task" << std::endl;
			throw;
		}
		// std::cout << "run task DONE." << std::endl;

		if (task.options.isRepeating) [[likely]] {
			// speed up high-performance repeating tasks
			task.targetExecutionTime += task.options.period;
			if (
			  task.targetExecutionTime <
			  Clock::now() - task.options.maxLagCompensationDuration) [[unlikely]] {
				task.targetExecutionTime =
				  Clock::now() - task.options.maxLagCompensationDuration;
			}
			task.scheduleId += 1;
			_scheduledTasks.maybeGrowAndPush(task);
		} else [[unlikely]] {
			// the task is no longer registered with Runner
			task.runner = nullptr;
			_allTasks(task).erase(); // !
		}
		return true;
	}

	// process all immediate tasks (only if not stopped)
	void processAllImmediateTasks() {
		while (processOneImmediateTask()) {
			// continue
		}
	}

	// Blocks (sleep)
	// ⚠️ Adding new task will not wake up the thread
	// (meant for single-threaded apps)
	void processAllTasksSync()
	  requires(!IS_THREAD_SAFE)
	{
		for (;;) {
			processAllImmediateTasks();

			if (!_keepRunning) [[unlikely]] {
				break;
			}

			// sleep
			if (_scheduledTasks.hasItems()) [[likely]] {
				auto sleepUntil = _scheduledTasks.peek().targetExecutionTime;
				std::this_thread::sleep_until(sleepUntil);
				continue;
			}

			break;
		}
	}

	void loop()
	  requires(IS_THREAD_SAFE)
	{
		for (;;) {
			processAllImmediateTasks();

			// wakeable sleep
			std::unique_lock<std::mutex> lock = _lockQueues();
			if (!_keepRunning) [[unlikely]] {
				break;
			}
			_updateImmediateTasks();
			if (_immediateTasks.hasItems()) [[likely]] {
				continue;
			}
			if (_scheduledTasks.hasItems()) [[likely]] {
				auto waitUntil = _scheduledTasks.peek().targetExecutionTime;
				_threadSafeData.wakeUp.wait_until(lock, waitUntil);
			} else {
				// no tasks to process
				_threadSafeData.wakeUp.wait(lock);
			}
		}
	}

	// finish current tasks, break out of processing loops
	INLINE void stop() {
		{
			auto lock = _lockQueues();
			_keepRunning = false;
		}
		_wakeUp();
	}

	// post, or run sync if on the same thread
	template <class TCallback>
	void postOrRunSync(TCallback &&callback)
	  requires(IS_THREAD_SAFE && requires { callback(); })
	{
		if (this->threadId == std::this_thread::get_id()) [[likely]] {
			callback();
		} else [[unlikely]] {
			post(std::forward<TCallback>(callback));
		}
	}

	v::Owned<Task>::Weak post(const Task::Options &options, AnyCallback &&run)
	// requires(!IS_THREAD_SAFE)
	{
		auto task = Owned<Task>::create(this, std::move(run), options);

		auto lock = _lockQueues();
		_allTasks.insert(task);
		if (options.isRepeating) [[unlikely]] {
			_scheduledTasks.maybeGrowAndPush(task);
		} else [[likely]] {
			_immediateTasks.maybeGrowAndPush(task);
		}
		if constexpr (IS_THREAD_SAFE) {
			lock.unlock();
			_wakeUp();
		}

		auto &retainer = context::get<Retainer>();
		auto weakTask = task.weak();
		retainer.retain(std::move(task));
		return weakTask;
	}

	v::Owned<Task>::Weak post(AnyCallback &&run)
	// requires(!IS_THREAD_SAFE)
	{
		auto task =
		  Owned<Task>::create(this, std::move(run), typename Task::Options{});

		auto lock = _lockQueues();
		_allTasks.insert(task);
		_immediateTasks.maybeGrowAndPush(task);
		if constexpr (IS_THREAD_SAFE) {
			lock.unlock();
			_wakeUp();
		}
		auto &retainer = context::get<Retainer>();
		auto weakTask = task.weak();
		retainer.retain(std::move(task));
		return weakTask;
	}

	v::Owned<Task>::Weak postRepeating(Delay period, AnyCallback &&run) {
		return post(
		  {
		    // .delay = delayAndPeriod, // 0
		    .isRepeating = true,
		    .period = period,
		  },
		  std::move(run));
	}

public:
	using ThreadSafe = Base::template With<option::THREAD_SAFE<true>>;

}; // class Custom
} // namespace VOLTISO_NAMESPACE::runner

namespace VOLTISO_NAMESPACE {
class Runner : public runner::Custom<Options<option::Self<Runner>>> {
	using Base = runner::Custom<VOLTISO_NAMESPACE::Options<option::Self<Runner>>>;
	using Base::Base;
};
} // namespace VOLTISO_NAMESPACE

//

namespace VOLTISO_NAMESPACE::runner::_ {
template <class TRunner> inline Task<TRunner>::~Task() {
	if (runner) [[likely]] {
		{
			auto lock = runner->_lockQueues();
			runner->_allTasks.maybeErase(*this);
		}
		runner->_wakeUp(); // probably not needed
	}
}

template <class TRunner> inline void Task<TRunner>::cancel() {
	CHECK(runner);
	{
		auto lock = runner->_lockQueues();
		runner->_allTasks.maybeErase(*this); // might be paused
	}
	runner->_wakeUp(); // probably not needed
	runner = nullptr;
}

template <class TRunner> inline void Task<TRunner>::maybeCancel() {
	if (runner) [[likely]] {
		{
			auto lock = runner->_lockQueues();
			runner->_allTasks.maybeErase(*this);
		}
		runner->_wakeUp(); // probably not needed
		runner = nullptr;
	}
}

template <class TRunner> inline void Task<TRunner>::pause() {
	CHECK(options.isRepeating);
	CHECK(runner);
	{
		auto lock = runner->_lockQueues();
		runner->_allTasks.erase(*this);
	}
	runner->_wakeUp(); // probably not needed
}

template <class TRunner> inline void Task<TRunner>::maybePause() {
	CHECK(options.isRepeating);
	if (runner) [[likely]] {
		{
			auto lock = runner->_lockQueues();
			runner->_allTasks.maybeErase(*this);
		}
		runner->_wakeUp(); // probably not needed
	}
}

template <class TRunner> inline void Task<TRunner>::resume() {
	CHECK(options.isRepeating);
	CHECK(runner);
	{
		auto lock = runner->_lockQueues();
		runner->_allTasks.insert(*this);
		this->targetExecutionTime = Clock::now();
		this->scheduleId += 1;
		runner->_immediateTasks.maybeGrowAndPush(*this);
	}
	runner->_wakeUp(); // probably not needed
}

template <class TRunner> inline void Task<TRunner>::maybeResume() {
	CHECK(options.isRepeating);
	if (runner) [[likely]] {
		{
			auto lock = runner->_lockQueues();
			auto taskRef = runner->_allTasks(*this);
			if (!taskRef.exists()) [[likely]] {
				taskRef.insert();
				this->targetExecutionTime = Clock::now();
				this->scheduleId += 1;
				runner->_immediateTasks.maybeGrowAndPush(*this);
			}
		}
		runner->_wakeUp(); // probably not needed
	}
}
} // namespace VOLTISO_NAMESPACE::runner::_

#include <v/OFF>
