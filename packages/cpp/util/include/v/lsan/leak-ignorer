#pragma once
#include <v/_/_>

#include <v/ON>

namespace VOLTISO_NAMESPACE::lsan {
class LeakIgnorer {
#if VOLTISO_HAS_LSAN
	static auto &_numIgnores() {
		static VOLTISO_THREAD_LOCAL int numIgnores = 0;
		return numIgnores;
	}
	bool _isIgnoring = false;
#endif

public:
	LeakIgnorer() { this->resumeIgnoring(); }
	~LeakIgnorer() { this->pauseIgnoring(); }

	INLINE void resumeIgnoring() {
#if VOLTISO_HAS_LSAN
		if (_isIgnoring) [[unlikely]] {
			return;
		}
		_isIgnoring = true;

		if (_numIgnores() == 0) {
			__lsan_disable();
		}
		++_numIgnores();
#endif
	}

	INLINE void pauseIgnoring() {
#if VOLTISO_HAS_LSAN
		if (!_isIgnoring) [[unlikely]] {
			return;
		}
		_isIgnoring = false;

		--_numIgnores();
		if (_numIgnores() == 0) {
			__lsan_enable();
		}
#endif
	}
};
} // namespace VOLTISO_NAMESPACE::lsan

#include <v/OFF>
