#pragma once
#include <v/_/_>

#if VOLTISO_DEBUG
	#include "v/demangle"
#endif

#ifndef VOLTISO_CONTEXT_THREAD_LOCAL
	#define VOLTISO_CONTEXT_THREAD_LOCAL VOLTISO_THREAD_LOCAL
#endif

#include <v/ON>

namespace VOLTISO_NAMESPACE::context::_ {
template <class T> inline T *&getPointer() {
	static_assert(std::is_same_v<T, std::remove_cvref_t<T>>, "not supported");
	static VOLTISO_CONTEXT_THREAD_LOCAL T *value = nullptr;
	return value;
}
}; // namespace VOLTISO_NAMESPACE::context::_

namespace VOLTISO_NAMESPACE::context {
template <class T> [[nodiscard]] INLINE auto &get() {
	auto pointer = _::getPointer<T>();
#if VOLTISO_DEBUG
	if (!pointer) {
		throw std::runtime_error(
		  "v::context::get<" + demangle(typeid(T).name()) +
		  ">() called without current context");
	}
#endif
	return *pointer;
}

template <class T> INLINE T *maybeGet() noexcept { return _::getPointer<T>(); }

template <class T> class Guard {
	static_assert(!std::is_reference_v<T>, "not supported");
	static_assert(!std::is_volatile_v<T>, "not supported");

	// Note: there is const-aware implementation in `_deleted` files.
	// However, for performance, we do not support it anymore.
	// Similarly, we don't support polymorphic types.
	static_assert(!std::is_const_v<T>, "not supported");

public:
	Guard(const Guard &) = delete;
	Guard &operator=(const Guard &) = delete;

	INLINE ~Guard() {
		// std::cout << "Guard<" << demangle(typeid(T).name()) << ">::~Guard()"
		//           << std::endl;
		_::getPointer<T>() = _previous;
	}

public:
	template <class Input>
	  requires std::is_lvalue_reference_v<Input &&> &&
	           std::is_convertible_v<std::remove_reference_t<Input> *, T *>
	INLINE Guard(Input &&value) {
		// std::cout << "Guard<" << demangle(typeid(T).name()) << ">::Guard()"
		//           << std::endl;
		_previous = _::getPointer<T>();
		_::getPointer<T>() = &value;
	}

private:
	T *_previous;
};

// ! deduction guide is dangerous !
// We do not support polymorphic context for performance.
template <class Input> Guard(Input &&) -> Guard<std::remove_reference_t<Input>>;
} // namespace VOLTISO_NAMESPACE::context

#include <v/OFF>
