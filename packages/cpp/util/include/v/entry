#pragma once
#include <v/_/_>

#include "v/is/trivially-relocatable"

namespace VOLTISO_NAMESPACE {
template <class TKey, class TValue> class Entry {
public:
	using Key = TKey;
	using Value = TValue;
	Key key;
	Value value{};

	[[nodiscard]] auto hash() const noexcept {
		static_assert(noexcept(getHash(key)));
		return getHash(key);
	}
};

template <class Key, class Value>
static constexpr auto is::TriviallyRelocatable<Entry<Key, Value>> =
  is::TriviallyRelocatable<Key> && is::TriviallyRelocatable<Value>;
} // namespace VOLTISO_NAMESPACE
