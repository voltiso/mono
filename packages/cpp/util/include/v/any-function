#pragma once
#include <v/_/_>

#include "v/concepts/options"
#include "v/is/derived-from-template"
#include "v/is/instantiated-from"
#include "v/is/member-function-const"
#include "v/is/trivially-relocatable"
#include "v/option/input-options"
#include "v/option/mutable"
#include "v/option/noexcept"
#include "v/option/optional"
#include "v/option/parameters"
#include "v/option/return"
#include "v/option/trivially-relocatable"
#include "v/pack"
#include "v/pool"
#include "v/storage"
#include "v/throw-error"

#include <functional>
#include <type_traits>

#include <v/ON>

namespace VOLTISO_NAMESPACE::anyFunction {
template <class Options>
  requires concepts::Options<Options> // && std::is_final_v<Final>
class Custom;

template <class Options>
  requires concepts::Options<Options>
struct Specializations;

template <class... Args> using GetCustom = Specializations<Args...>::Result;
} // namespace VOLTISO_NAMESPACE::anyFunction

namespace VOLTISO_NAMESPACE {
template <class Signature> class AnyFunction;
} // namespace VOLTISO_NAMESPACE

// !

namespace VOLTISO_NAMESPACE::anyFunction {
template <class Options>
  requires concepts::Options<Options>
struct Specializations {
	using Result = Custom<Options>;
};

template <class Return, class... ParametersList>
struct Specializations<Options<
  option::Return<Return>, option::Parameters<Pack<ParametersList...>>>> {
	using Result = AnyFunction<Return(ParametersList...)>;
};
} // namespace VOLTISO_NAMESPACE::anyFunction

// !

/**
 * Type-erasure for functions and other invocable things.
 * One-pointer storage is in-place (if trivially relocatable).
 * Type-safe mutable operator() flag, noexcept flag, optional flag.
 * For in-place storage, trivial relocatability is forced (no type param for
 * this).
 */

namespace VOLTISO_NAMESPACE::anyFunction {
template <class Options, class Parameters>
  requires concepts::Options<Options>
class CustomBase;

template <class Options, class... ParametersList>
  requires concepts::Options<Options>
class CustomBase<Options, Pack<ParametersList...>>
    : public Object<typename Options::template WithDefault<
        option::TRIVIALLY_RELOCATABLE<true>, option::CustomTemplate<GetCustom>,
        option::InputOptions<Options>>> {
	using Base = Object<typename Options::template WithDefault<
	  option::TRIVIALLY_RELOCATABLE<true>, option::CustomTemplate<GetCustom>,
	  option::InputOptions<Options>>>;

private:
	using This = CustomBase;

protected:
	using Self = Base::Self;

public:
	using Return = Options::template Get<option::Return>;
	using Parameters = Options::template Get<option::Parameters>;

	using Signature = std::conditional_t<
	  std::is_same_v<Return, Unset> || std::is_same_v<Parameters, Unset>, Unset,
	  Return(ParametersList...)>;

	static constexpr auto NOEXCEPT = Options::template GET<option::NOEXCEPT>;
	static constexpr auto MUTABLE = Options::template GET<option::MUTABLE>;
	static constexpr auto OPTIONAL = Options::template GET<option::OPTIONAL>;

protected:
	using RawPointer = Return (*)(ParametersList...);
	using Storage = Storage<RawPointer>; // ...or not raw pointer

	using Deleter = void (*)(Storage &);
	using Invoker = Return (*)(const Storage &, ParametersList...);

	Storage _storage;
	Deleter _deleter = nullptr;
	Invoker _invoker = nullptr;

public:
	CustomBase()
	  requires(!OPTIONAL)
	= delete;

	INLINE CustomBase()
	  requires(OPTIONAL)
	= default;

	CustomBase(const CustomBase &) = delete;
	CustomBase &operator=(const CustomBase &) = delete;

	INLINE ~CustomBase() noexcept {
		// speed-up raw pointer path
		if (_deleter) [[unlikely]] {
			_deleter(_storage);
		}
	}

	template <class OtherOptions, class Parameters>
	  requires concepts::Options<OtherOptions>
	friend class CustomBase;

	INLINE CustomBase(CustomBase &&other) noexcept {
		memcpy((void *)this, &other, sizeof(CustomBase));
		other._deleter = nullptr;
	}

	// if signature is unknown (not callable), we can create AnyFunction from any
	// other AnyFunction (typed or not)
	template <class OtherOptions>
	  requires(std::is_same_v<Signature, Unset>)
	INLINE CustomBase(Custom<OtherOptions> &&other) noexcept {
		memcpy((void *)this, &other, sizeof(CustomBase));
		other._deleter = nullptr;
	}

	// reuse move-constructor
	INLINE CustomBase &operator=(CustomBase &&other) noexcept {
		this->~CustomBase();
		new (this) CustomBase(std::move(other));
		return *this;
	}

	// reuse move-constructor
	template <class OtherOptions>
	INLINE CustomBase &operator=(Custom<OtherOptions> &&other) noexcept {
		this->~CustomBase();
		new (this) CustomBase(std::move(other));
		return *this;
	}

	// for HashTable
	INLINE constexpr bool operator==(const CustomBase &other) const noexcept {
		static_assert(sizeof(_storage) == sizeof(std::uintptr_t));
		// ! in some peculiar cases this could not be enough?
		return _storage.bytes == other._storage.bytes;
	}

	// for HashTable
	INLINE constexpr auto &key() const noexcept {
		return *reinterpret_cast<const std::uintptr_t *>(&this->_storage);
	}

	INLINE constexpr Return operator()(ParametersList... args) const
	  noexcept(NOEXCEPT)
	  requires(!MUTABLE && !std::is_same_v<Signature, Unset>)
	{
		if constexpr (!NOEXCEPT && OPTIONAL) {
			if (!_invoker) {
				throwError(std::bad_function_call{});
			}
		}
		return _invoker(
		  _storage, std::forward<ParametersList>(args)...); // always this path
	}

	INLINE constexpr Return operator()(ParametersList... args) noexcept(NOEXCEPT)
	  requires(!std::is_same_v<Signature, Unset>)
	{
		if constexpr (!NOEXCEPT && OPTIONAL) {
			if (!_invoker) {
				throwError(std::bad_function_call{});
			}
		}
		return _invoker(
		  _storage, std::forward<ParametersList>(args)...); // always this path
	}

	// proxy mode (non-owning)
	template <class TCallable>
	CustomBase(TCallable *f)
	  requires requires { (*f)(std::declval<ParametersList>()...); }
	{
		new (&_storage) TCallable *(f);
		_invoker = [](const Storage &storage, ParametersList... args) -> Return {
			auto &target = *std::bit_cast<TCallable *>(storage);
			return target(std::forward<ParametersList>(args)...);
		};
	}

	// bind function pointer or stateless lambda
	template <class TCallable>
	  requires(
	    !std::is_reference_v<TCallable> &&
	    !is::DerivedFromTemplate<TCallable, CustomBase> &&
	    This::template _isCallableOk<TCallable>() &&
	    std::is_convertible_v<std::decay_t<TCallable>, RawPointer>)
	CustomBase(TCallable &&f) {
		static_assert(is::TriviallyRelocatable<std::decay_t<TCallable>>);
		static_assert(!is::InstantiatedFrom<std::decay_t<TCallable>, CustomBase>);
		new (&_storage) RawPointer{std::forward<TCallable>(f)};
		_invoker = [](const Storage &storage, ParametersList... args) -> Return {
			return storage.object()(std::forward<ParametersList>(args)...);
		};
		static_assert(std::is_trivially_destructible_v<RawPointer>);
	}

	// bind small anything
	template <class TCallable>
	  requires(
	    !std::is_reference_v<TCallable> &&
	    !is::DerivedFromTemplate<TCallable, CustomBase> &&
	    This::template _isCallableOk<TCallable>() &&
	    !std::is_convertible_v<std::decay_t<TCallable>, RawPointer> &&
	    (sizeof(std::decay_t<TCallable>) <= sizeof(_storage)))
	CustomBase(TCallable &&f) {
		static_assert(!is::InstantiatedFrom<std::decay_t<TCallable>, CustomBase>);
		static_assert(
		  is::TriviallyRelocatable<std::decay_t<TCallable>>,
		  "mark your type as trivially relocatable, or use createIndirect");
		using Callable = std::decay_t<TCallable>;
		new (&_storage) Callable{std::forward<TCallable>(f)};
		_invoker = [](const Storage &storage, ParametersList... args) -> Return {
			return (*reinterpret_cast<const Callable *>(&storage))(
			  std::forward<ParametersList>(args)...);
		};
		if constexpr (!std::is_trivially_destructible_v<Callable>) {
			_deleter = [](Storage &storage) {
				std::bit_cast<Callable>(storage).~Callable();
			};
		}
	}

	// bind big anything
	template <class TCallable>
	  requires(
	    !std::is_reference_v<TCallable> &&
	    !is::DerivedFromTemplate<TCallable, CustomBase> &&
	    !std::is_convertible_v<std::decay_t<TCallable>, RawPointer> &&
	    (sizeof(std::decay_t<TCallable>) > sizeof(_storage)) &&
	    This::template _isCallableOk<TCallable>())
	CustomBase(TCallable &&f)
	    : CustomBase{CreateIndirectTag{}, std::forward<TCallable>(f)} {
		static_assert(!is::InstantiatedFrom<std::decay_t<TCallable>, CustomBase>);
	}

	// explicit "big anything"
	template <class TCallable>
	  requires(
	    !std::is_reference_v<TCallable> &&
	    !is::DerivedFromTemplate<TCallable, CustomBase> &&
	    This::template _isCallableOk<TCallable>())
	static Self createIndirect(TCallable &&f) {
		static_assert(!is::InstantiatedFrom<std::decay_t<TCallable>, CustomBase>);
		return Self{CreateIndirectTag{}, std::forward<TCallable>(f)};
	}

private:
	struct CreateIndirectTag {};
	// "big anything" implementation
	template <class TCallable>
	  requires(
	    !std::is_reference_v<TCallable> &&
	    !is::DerivedFromTemplate<TCallable, CustomBase> &&
	    This::template _isCallableOk<TCallable>())
	CustomBase(CreateIndirectTag, TCallable &&f) {
		using Callable = std::decay_t<TCallable>;
		using Pool = Pool<Callable>;
		using Handle = typename Pool::Handle;
		auto &pool = Singleton<Pool>::instance();
		auto handle = pool.insert(std::forward<TCallable>(f)).handle;
		new (&_storage) Handle(handle);
		_deleter = [](Storage &storage) {
			auto &pool = Singleton<Pool>::instance();
			pool.erase(storage.template as<Handle>());
		};
		_invoker = [](const Storage &storage, ParametersList... args) -> Return {
			return (*storage.template as<Handle>())(
			  std::forward<ParametersList>(args)...);
		};
	}

private:
	template <class TCallable>
	static INLINE consteval bool _isCallableOk() noexcept {
		using Callable = std::decay_t<TCallable>;
		if constexpr (!(requires(Callable f) {
			              f(std::declval<ParametersList>()...);
		              })) {
			return false;
		}
		if constexpr (!MUTABLE) {
			if constexpr (requires { &Callable::operator(); }) {
				if constexpr (!is::MemberFunctionConst<
				                decltype(&Callable::operator())>) {
					// if constexpr (!std::is_invocable_v<const Callable,
					// ParametersList...>) { // ! `std::is_invocable_v` broken
					return false;
				}
			}
		}
		if constexpr (NOEXCEPT) {
			if constexpr (!(noexcept(std::declval<Callable>()(
			                std::declval<ParametersList>()...)))) {
				return false;
			}
		}
		// static_assert(
		//   is::TriviallyRelocatable<Callable>,
		//   "Mark your type as trivially relocatable");
		// if constexpr (!is::TriviallyRelocatable<TCallable>) {
		// 	return false;
		// }
		return true;
	}

public:
	INLINE constexpr operator bool() const noexcept {
		return _invoker != nullptr;
	}

public:
	template <class... OptionsList>
	using With = Base::template With<OptionsList...>;

	template <class Return> using WithReturn = With<option::Return<Return>>;

	template <class... TParametersList>
	using WithParameters = With<option::Parameters<Pack<TParametersList...>>>;

	using Noexcept = With<option::NOEXCEPT<true>>;
	using Mutable = With<option::MUTABLE<true>>;
	using Optional = With<option::OPTIONAL<true>>;
}; // class CustomBase

// !

namespace _ {
template <class Options>
  requires concepts::Options<Options>
struct GetCustomBase {
	using Result =
	  CustomBase<Options, typename Options::template Get<option::Parameters>>;
}; // struct GetCustomBase

template <class Options>
  requires(
    concepts::Options<Options> &&
    std::is_same_v<typename Options::template Get<option::Parameters>, Unset>)
struct GetCustomBase<Options> {
	// CustomBase requires a true list, so give it an empty one
	using Result = CustomBase<Options, Pack<>>;
}; // struct GetCustomBase
} // namespace _

// !

template <class Options = V::Options<>>
  requires concepts::Options<Options>
class Custom : public _::GetCustomBase<Options>::Result {
	using Base = _::GetCustomBase<Options>::Result;
	using Base::Base;
};
} // namespace VOLTISO_NAMESPACE::anyFunction

// !

namespace VOLTISO_NAMESPACE {
template <class Signature> class AnyFunction;
template <class Return, class... ParametersList>
class AnyFunction<Return(ParametersList...)>
    : public anyFunction::Custom<Options<
        option::Return<Return>, option::Parameters<Pack<ParametersList...>>>> {
	using Base = anyFunction::Custom<Options<
	  option::Return<Return>, option::Parameters<Pack<ParametersList...>>>>;
	using Base::Base;
}; // class AnyFunction
} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
