#pragma once

#include "v/dynamic-array"
#include "v/is/trivially-relocatable"
#include "v/likelihood"
#include "v/option/item"
#include "v/options"
#include "v/relocate"
#include "v/storage"

#include <v/ON>

namespace VOLTISO_NAMESPACE::heap {
template <class Options>
  requires concepts::Options<Options>
class Custom
    : protected dynamicArray::Custom<VOLTISO_NAMESPACE::Options<
        option::Item<Storage<typename Options::template Get<option::Item>>>>> {
	//   using Self = Custom;
	using Base = dynamicArray::Custom<VOLTISO_NAMESPACE::Options<
	  option::Item<Storage<typename Options::template Get<option::Item>>>>>;
	using Self = Base::Self;

public:
	using Item = Options::template Get<option::Item>;
	static_assert(is::TriviallyRelocatable<Item>);

	using Base::hasItems;
	using Base::numItems;

public:
	Custom() = default;

	Custom(std::initializer_list<Item> items) {
		Base::setNumSlotsAtLeast(items.size());
		for (auto &item : items) {
			pushUnchecked(std::move(item));
		}
	}

	template <class... Args>
	  requires(std::is_constructible_v<Item, Args...>)
	VOLTISO_FORCE_INLINE void push(Args &&...args) noexcept {
		pushUnchecked(Item{std::forward<Args>(args)...});
	}

	template <class TItem>
	  requires(std::is_same_v<Item, std::decay_t<TItem>>)
	VOLTISO_FORCE_INLINE void pushUnchecked(TItem &&item) noexcept {
		Base::pushUnchecked(); // do not emplace item yet!
		auto index = Base::_numItems;
		Storage<Item> *array = &Base::first() - 1;
		while (index != 1 && array[index >> 1].object() < item) [[likely]] {
			auto nextIndex = index >> 1;
			static_assert(is::TriviallyRelocatable<Item>);
			// memcpy(array + index, array + nextIndex, sizeof(Item));
			array[index].relocateFrom(array[nextIndex]);
			// std::swap(array[index], array[nextIndex]);
			index = nextIndex;
		}
		array[index].construct(std::move(item));
	}

	template <Likelihood LIKELIHOOD = Likelihood::UNLIKELY, class... Args>
	  requires(std::is_constructible_v<Item, Args...>)
	VOLTISO_FORCE_INLINE void maybeGrowAndPush(Args &&...args) noexcept {
		maybeGrowAndPush(Item{std::forward<Args>(args)...});
	}

	template <Likelihood LIKELIHOOD = Likelihood::UNLIKELY, class TItem>
	  requires(std::is_same_v<Item, std::decay_t<TItem>>)
	VOLTISO_FORCE_INLINE void maybeGrowAndPush(TItem &&item) noexcept {
		if constexpr (LIKELIHOOD == Likelihood::UNKNOWN) {
			if (Base::_numItems == Base::_numSlots) {
				Base::grow();
			}
		} else if constexpr (LIKELIHOOD == Likelihood::LIKELY) {
			if (Base::_numItems == Base::_numSlots) [[likely]] {
				Base::grow();
			}
		} else if constexpr (LIKELIHOOD == Likelihood::UNLIKELY) {
			if (Base::_numItems == Base::_numSlots) [[unlikely]] {
				Base::grow();
			}
		} else {
			static_assert(false);
		}
		pushUnchecked(std::forward<TItem>(item));
	}

	const Item &peek() const {
		NE(Base::_numItems, 0);
		return Base::first().object();
	}

public:
	// relocate item from the heap
	VOLTISO_FORCE_INLINE Item pop() noexcept
	  requires(requires { Base::first().relocate(); })
	{
		NE(Base::_numItems, 0);
		auto item = Base::first().relocate();
		static_assert(std::is_same_v<decltype(item), Item>);
		_pop();
		return item; // hoping for RVO
	}

	// if can't relocate, use move constructor
	VOLTISO_FORCE_INLINE Item pop() noexcept
	  requires(!requires {
		  Base::first().relocate();
	  } && std::is_move_constructible_v<Item>)
	{
		NE(Base::_numItems, 0);
		auto item = std::move(Base::first().object());
		_pop();
		return item; // hoping for RVO
	}

	// (don't try copying implicitly)

	// if everything fails, return `void`
	VOLTISO_FORCE_INLINE void pop() noexcept
	  requires(!requires {
		  Base::first().relocate();
	  } && !std::is_move_constructible_v<Item>)
	{
		NE(Base::_numItems, 0);
		_pop();
	}

private:
	void _pop() {
		NE(Base::_numItems, 0);

		// here we relocate the whole Storage<Item> object,
		// because later we want to relocate it again
		auto lastItem = relocate(Base::last());
		static_assert(std::is_same_v<decltype(lastItem), Storage<Item>>);

		Base::pop();
		Size index = 1;
		// decltype(Base::_numItems) index = 1;
		Storage<Item> *array = &Base::slots()->object() - 1;
		while ((index << 1) <= Base::_numItems) [[likely]] {
			auto indexLeft = (index << 1);
			auto indexRight = indexLeft + 1;
			if (
			  indexRight <= Base::_numItems &&
			  array[indexLeft].object() < array[indexRight].object()) [[unlikely]] {
				if (array[index].object() < array[indexRight].object()) [[likely]] {
					static_assert(is::TriviallyRelocatable<Item>);
					array[index].relocateFrom(array[indexRight]);
					index = indexRight;
				} else {
					break;
				}
			} else [[likely]] {
				if (array[index].object() < array[indexLeft].object()) [[likely]] {
					static_assert(is::TriviallyRelocatable<Item>);
					array[index].relocateFrom(array[indexLeft]);
					index = indexLeft;
				} else {
					break;
				}
			}
		}
		static_assert(is::TriviallyRelocatable<Item>);
		array[index].relocateFrom(lastItem);
	}

public:
	/**
	 *  - Invalidates on resize
	 *  - Invalidates on relocation
	 */
	// using Iterator = memory::Iterator<Item>;
	using ConstIterator = memory::Iterator<const Item>;

public:
	// ! make iterators always const
	ConstIterator begin() const {
		GT(this->_numItems, 0);
		return ConstIterator{std::addressof(Base::slots()->object().object())};
	}
	ConstIterator end() const {
		GT(this->_numItems, 0);
		return ConstIterator{
		  std::addressof(Base::slots()->object().object()) + this->_numItems};
	}
};
} // namespace VOLTISO_NAMESPACE::heap

namespace VOLTISO_NAMESPACE {
template <class Item>
class Heap : public heap::Custom<
               Options<option::Item<Item>, option::Self<Heap<Item>>>> {
	using Base =
	  heap::Custom<Options<option::Item<Item>, option::Self<Heap<Item>>>>;
	using Base::Base;
};

} // namespace VOLTISO_NAMESPACE

#include <v/OFF>
