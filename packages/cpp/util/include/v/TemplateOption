#pragma once
#include <v/_/_>

#include "v/Option"

// #include "v/concepts/Options"

// namespace VOLTISO_NAMESPACE::_ {
// template <template <class> class Final, class Options>
// // requires concepts::Options<Options> // && std::is_final_v<Final>
// using ObjectOptionDefault = Object<Final, Options>;
// } // namespace VOLTISO_NAMESPACE::_

namespace VOLTISO_NAMESPACE {
// derive from this - see `<voltiso/option>`
template <
  template <class...> class TTemplate, template <class...> class TDefault>
struct TemplateOption : Option {
	template <class... Ts>
	// requires concepts::Options<Options>
	using Template = TTemplate<Ts...>;

	template <class... Ts>
	// requires concepts::Options<Options>
	using Default = TDefault<Ts...>;
};

// template<class T>
// struct Example{};
// using A = TemplateOption<Example, Example>::Template<int>;

} // namespace VOLTISO_NAMESPACE
