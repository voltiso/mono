#pragma once
#include <cstdint>
#include <v/_/_>

#include "v/AnyFunction"
#include "v/HashSet"
#include "v/Heap"
#include "v/Owned"
#include "v/Retainer"
#include "v/context"
#include "v/is_trivially_relocatable"

#include <chrono>
#include <thread>

#include <v/ON>

// forward
namespace VOLTISO_NAMESPACE {
class Runner;
} // namespace VOLTISO_NAMESPACE

namespace VOLTISO_NAMESPACE::runner::_ {
using Clock = std::chrono::high_resolution_clock;
using TimePoint = Clock::time_point;
using Delay = Clock::duration;
using Priority = int;

class Task {
public:
	using Clock = runner::_::Clock;
	using TimePoint = runner::_::TimePoint;
	using Duration = Clock::duration;
	using Priority = runner::_::Priority;
	// using Schedule = runner::_::Schedule;

	struct Options {
		Priority priority = 0;
		Duration delay = std::chrono::nanoseconds(0);

		bool isRepeating = false;

		// only if isRepeating
		Duration period = std::chrono::nanoseconds(0);

		// only if isRepeating && period > 0
		Duration maxLagCompensationDuration = std::chrono::nanoseconds(0);
	};

public:
	Task(const Task &) = delete;
	Task &operator=(const Task &) = delete;

	inline ~Task();

public:
	inline void cancel();
	inline void maybeCancel();
	inline void pause();
	inline void maybePause();
	inline void resume();
	inline void maybeResume();

	// private:
	// friend Runner;

public:
	// has to be public - so that it can be created using
	// `Owned<Runner>::create()`

	/** @internal for Runner */
	template <
	  class TFunction, class TOptions,
	  std::enable_if_t<
	    std::is_convertible_v<TFunction, AnyFunction<void()>> &&
	    std::is_convertible_v<TOptions, Options>> * = nullptr>
	Task(Runner *runner, TFunction &&run, TOptions &&options)
	    : run{std::forward<TFunction>(run)}, runner{runner},
	      options{std::forward<TOptions>(options)},
	      targetExecutionTime{Clock::now() + options.delay} {}

public:
	AnyFunction<void()> run;
	Runner *runner = nullptr;
	Options options;
	TimePoint targetExecutionTime = TimePoint::min();

	// increated on re-schedule (in order to ignore old heap entries)
	uint64_t scheduleId = 0;
}; // class Task
} // namespace VOLTISO_NAMESPACE::runner::_

namespace VOLTISO_NAMESPACE::runner::_ {
struct ImmediateTaskRef {
	Task *const task;
	const uint64_t scheduleId = 0;
	const Priority priority; // have to copy - task may be deleted already

	ImmediateTaskRef(Task *task)
	    : task(task), scheduleId(task->scheduleId),
	      priority(task->options.priority) {}

	bool operator<(const ImmediateTaskRef &other) const {
		return priority < other.priority;
		// return task->priority < other.task->priority;
	}
};

struct ScheduledTaskRef {
	Task *const task;
	const uint64_t scheduleId = 0;
	const TimePoint targetExecutionTime;

	ScheduledTaskRef(Task *task)
	    : task(task), scheduleId(task->scheduleId),
	      targetExecutionTime(task->targetExecutionTime) {}

	// smaller time -> greater order (priority)
	bool operator<(const ScheduledTaskRef &other) const {
		return targetExecutionTime > other.targetExecutionTime;
		// return task->targetExecutionTime > other.task->targetExecutionTime;
	}
}; // struct ScheduledTaskRef
} // namespace VOLTISO_NAMESPACE::runner::_

//

namespace VOLTISO_NAMESPACE {
template <>
constexpr auto is_trivially_relocatable<runner::_::ImmediateTaskRef> = true;

template <>
constexpr auto is_trivially_relocatable<runner::_::ScheduledTaskRef> = true;
} // namespace VOLTISO_NAMESPACE

//

namespace VOLTISO_NAMESPACE {
class Runner {
public:
	using Task = runner::_::Task;
	using Clock = runner::_::Clock;
	using Duration = Clock::duration;
	using TimePoint = runner::_::TimePoint;
	using Delay = runner::_::Delay;

private:
	using ImmediateTaskRef = runner::_::ImmediateTaskRef;
	using ScheduledTaskRef = runner::_::ScheduledTaskRef;

private:
	bool keepRunning = true;

	friend Task;
	HashSet<Task *> allTasks;

	Heap<ImmediateTaskRef> immediateTasks;
	Heap<ScheduledTaskRef> scheduledTasks;

public:
	Runner() = default;

	// not relocatable - tasks reference it
	Runner(const Runner &) = delete;
	Runner &operator=(const Runner &) = delete;

public:
	~Runner() {
		for (auto &task : allTasks) {
			task->runner = nullptr;
		}
	}

private:
	void updateImmediateTasks() {
		auto now = Clock::now();

		// move all tasks that are ready to run to immediateTasks
		// (and remove old scheduleIds before re-scheduling)
		while (scheduledTasks.hasItems() &&
		       scheduledTasks.peek().targetExecutionTime <= now) [[unlikely]] {
			auto taskRef = scheduledTasks.pop();
			if (
			  allTasks.has(taskRef.task) &&
			  taskRef.task->scheduleId == taskRef.scheduleId) [[likely]] {
				immediateTasks.maybeGrowAndPush(taskRef.task);
			}
		}

		// ignore already canceled scheduledTasks (and old scheduleIds before
		// re-scheduling)
		while (scheduledTasks.hasItems() &&
		       (!allTasks.has(scheduledTasks.peek().task) ||
		        scheduledTasks.peek().task->scheduleId !=
		          scheduledTasks.peek().scheduleId)) [[unlikely]] {
			scheduledTasks.pop();
		}

		// ignore already canceled immediateTasks
		while (immediateTasks.hasItems() &&
		       (!allTasks.has(immediateTasks.peek().task) ||
		        immediateTasks.peek().task->scheduleId !=
		          immediateTasks.peek().scheduleId)) [[unlikely]] {
			immediateTasks.pop();
		}
	}

public:
	void loop() {
		keepRunning = true;
		while (keepRunning) {
			if (updateImmediateTasks(), immediateTasks.hasItems()) [[likely]] {
				auto task = immediateTasks.pop().task;

				task->run();

				if (task->options.isRepeating) [[likely]] {
					// speed up high-performance repeating tasks
					task->targetExecutionTime += task->options.period;
					if (
					  task->targetExecutionTime <
					  Clock::now() - task->options.maxLagCompensationDuration)
					  [[unlikely]] {
						task->targetExecutionTime =
						  Clock::now() - task->options.maxLagCompensationDuration;
					}
					task->scheduleId += 1;
					scheduledTasks.maybeGrowAndPush(task);
				} else [[unlikely]] {
					// the task is no longer registered with Runner
					task->runner = nullptr;
					allTasks(task).erase(); // !
				}

				continue;
			}

			// sleep
			if (scheduledTasks.hasItems()) [[likely]] {
				// std::cout << "SLEEP "
				//           << scheduledTasks.peek().targetExecutionTime - Clock::now()
				//           << std::endl;
				std::this_thread::sleep_until(
				  scheduledTasks.peek().targetExecutionTime);
			} else [[unlikely]] {
				// LOG(INFO) << "No more tasks! Shutting down v::Runner.";
				keepRunning = false; // !
			}
		}
	}

	// finish current tasks, break out of `loop()`
	void stop() { keepRunning = false; }

	//   // break out of `loop()`, do not finish current tasks
	//   void terminate() {}

	v::Owned<Task>::Weak
	post(const Task::Options &options, AnyFunction<void()> &&run) {
		auto task = Owned<Task>::create(this, std::move(run), options);
		this->allTasks.insert(task);
		if (options.isRepeating) [[unlikely]] {
			this->scheduledTasks.maybeGrowAndPush(task);
		} else [[likely]] {
			this->immediateTasks.maybeGrowAndPush(task);
		}
		auto &retainer = context::get<Retainer>();
		auto weakTask = task.weak();
		retainer.retain(std::move(task));
		return weakTask;
	}

	v::Owned<Task>::Weak post(AnyFunction<void()> &&run) {
		auto task = Owned<Task>::create(this, std::move(run), Task::Options{});
		this->allTasks.insert(task);
		this->immediateTasks.maybeGrowAndPush(task);
		auto &retainer = context::get<Retainer>();
		auto weakTask = task.weak();
		retainer.retain(std::move(task));
		return weakTask;
	}

	v::Owned<Task>::Weak postRepeating(Delay period, AnyFunction<void()> &&run) {
		return post(
		  {
		    // .delay = delayAndPeriod, // 0
		    .isRepeating = true,
		    .period = period,
		  },
		  std::move(run));
	}
};
} // namespace VOLTISO_NAMESPACE

//

namespace VOLTISO_NAMESPACE::runner::_ {
inline Task::~Task() {
	if (runner) [[likely]] {
		runner->allTasks.maybeErase(this);
	}
}

inline void Task::cancel() {
	CHECK(runner);
	runner->allTasks.maybeErase(this); // might be paused
	runner = nullptr;
}

inline void Task::maybeCancel() {
	if (runner) [[likely]] {
		runner->allTasks.maybeErase(this);
		runner = nullptr;
	}
}

inline void Task::pause() {
	CHECK(options.isRepeating);
	CHECK(runner);
	runner->allTasks.erase(this);
}

inline void Task::maybePause() {
	CHECK(options.isRepeating);
	if (runner) [[likely]] {
		runner->allTasks.maybeErase(this);
	}
}

inline void Task::resume() {
	CHECK(options.isRepeating);
	CHECK(runner);
	runner->allTasks.insert(this);
	this->targetExecutionTime = Clock::now();
	this->scheduleId += 1;
	runner->immediateTasks.maybeGrowAndPush(this);
}

inline void Task::maybeResume() {
	CHECK(options.isRepeating);
	if (runner) [[likely]] {
		auto taskRef = runner->allTasks(this);
		if (!taskRef.exists()) [[likely]] {
			taskRef.insert();
			this->targetExecutionTime = Clock::now();
			this->scheduleId += 1;
			runner->immediateTasks.maybeGrowAndPush(this);
		}
	}
}
} // namespace VOLTISO_NAMESPACE::runner::_

#include <v/OFF>
