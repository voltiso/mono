#pragma once
#include <v/_/_>

#include "v/get/extent"

#include <cstddef>

#include <v/ON>

namespace VOLTISO_NAMESPACE::get {
template <class T>
[[nodiscard]] constexpr std::size_t numItems(const T &t) noexcept {
	if constexpr (requires { t.numItems(); }) {
		static_assert(noexcept(t.numItems()));
		return t.numItems();
	} else if constexpr (requires { t.numItems; }) {
		return t.numItems;
	} else if constexpr (requires { t.NUM_ITEMS; }) {
		return t.NUM_ITEMS;
	} else if constexpr (std::is_array_v<T>) {
		return std::extent_v<T>;
	} else if constexpr (requires { get::extent(t).value; }) {
		static_assert(noexcept(get::extent(t)));
		NE(get::extent(t), Extent::UNBOUND);
		return get::extent(t).value;
	} else if constexpr (requires { t.size(); }) {
		static_assert(noexcept(t.size()));
		return t.size();
	} else if constexpr (requires { t.size; }) {
		return t.size;
	} else {
		static_assert(false, "numItems: no known member or trait for this type");
	}
}
} // namespace VOLTISO_NAMESPACE::get

#include <v/OFF>
