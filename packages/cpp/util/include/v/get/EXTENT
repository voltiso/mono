#pragma once
#include <v/_/_>

#include "v/Extent"
#include "v/STATIC_ERROR"
#include "v/has"

#include <tuple>
#include <type_traits>

namespace VOLTISO_NAMESPACE::get {
template <class TArg>
constexpr auto EXTENT = [] {
	using Arg = std::remove_cvref_t<TArg>;
	if constexpr (has::EXTENT<Arg>) {
		return Extent{Arg::EXTENT};
	} else if constexpr (std::is_array_v<Arg>) {
		return Extent{std::extent_v<Arg>};
	} else if constexpr (requires { std::tuple_size<Arg>::value; }) {
		return Extent{std::tuple_size_v<Arg>};
	} else if constexpr (has::extent<Arg>) {
		return Extent::DYNAMIC;
	} else {
		return STATIC_ERROR;
	}
}();

// template <class T> constexpr auto TEST = [] { static_assert(false); }();

// auto a = get::EXTENT<int>;

} // namespace VOLTISO_NAMESPACE::get
