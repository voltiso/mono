// Gemini 2.5 pro experimental
#pragma once
#include <v/_/_> // Assuming this provides VOLTISO_NAMESPACE

// Include the internal helper implementation
#include "v/_/BrandHelpers.hpp" // Or wherever GetBrandsHelper is defined

namespace VOLTISO_NAMESPACE::get {

/**
 * @brief Extracts Brand options from a given type or option pack.
 *
 * Overloads:
 * 1. get::Brands<Options<As...>>: Extracts brands from the pack As...
 * 2. get::Brands<Option1, Option2...>: Extracts brands from the provided pack.
 * 3. get::Brands<T>: Extracts brands from T::Options if it exists, otherwise
 * returns Options<>.
 *
 * An option is considered a "Brand" if it defines a static constexpr member
 * `IS_BRAND` that evaluates to true.
 *
 * @tparam Args Either a single type T, an Options<As...> type, or a pack of
 * option types.
 * @return Options<Brand1, Brand2...> containing only the brand options found,
 * preserving their relative order.
 */
template <typename... Args>
using Brands = typename ::v::_::GetBrandsHelper<Args...>::Result;

} // namespace VOLTISO_NAMESPACE::get
