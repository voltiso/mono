#pragma once
#include <v/_/_>

#include "v/is/optional"
#include "v/optional"

#include <v/ON>

namespace VOLTISO_NAMESPACE::get {

template <class TValue> INLINE decltype(auto) optional(TValue &&value) {
	using Value = std::remove_cvref_t<TValue>;
	if constexpr (v::is::OPTIONAL<Value>) {
		return std::forward<TValue>(value);
	} else if constexpr (requires {
		                     typename Value::Optional{std::forward<TValue>(value)};
	                     }) {
		return typename Value::Optional{std::forward<TValue>(value)};
	} else {
		return Optional<Value>{std::forward<TValue>(value)};
	}
}
} // namespace VOLTISO_NAMESPACE::get

// template <class T>
// using Optional = std::remove_cvref_t<decltype(optional(std::declval<T>()))>;

namespace VOLTISO_NAMESPACE::get {
template <class T>
using Optional = std::conditional_t<v::is::OPTIONAL<T>, T, V::Optional<T>>;
} // namespace VOLTISO_NAMESPACE::get

#include <v/OFF>
