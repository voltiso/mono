#pragma once
#include <v/_/_>

#include "v/has"

namespace VOLTISO_NAMESPACE::get {

template <class T>
  requires hasValue::NUM_SLOTS<T>
[[nodiscard]] constexpr decltype(auto) numSlots(const T &t) noexcept {
	return t.NUM_SLOTS;
}

template <class T>
  requires hasFunction::NUM_SLOTS<T>
[[nodiscard]] constexpr decltype(auto) numSlots(const T &t) noexcept {
	return t.NUM_SLOTS(); // quite exotic
}

// !

template <class T>
  requires(!has::NUM_SLOTS<T> && hasValue::numSlots<T>)
[[nodiscard]] constexpr decltype(auto) numSlots(const T &t) noexcept {
	return t.numSlots;
}

template <class T>
  requires(!has::NUM_SLOTS<T> && hasFunction::numSlots<T>)
[[nodiscard]] constexpr decltype(auto) numSlots(const T &t) noexcept {
	return t.numSlots();
}

// !

// std compatibility
template <class T>
  requires(!has::NUM_SLOTS<T> && !has::numSlots<T> && hasValue::capacity<T>)
[[nodiscard]] constexpr decltype(auto) numSlots(const T &t) noexcept {
	return t.capacity;
}

// std compatibility
template <class T>
  requires(!has::NUM_SLOTS<T> && !has::numSlots<T> && hasFunction::capacity<T>)
[[nodiscard]] constexpr decltype(auto) numSlots(const T &t) noexcept {
	return t.capacity();
}

} // namespace VOLTISO_NAMESPACE::get
