#pragma once
#include <v/_/_>

#include "v/entry"
#include "v/get/entry"
#include "v/get/stable"

#include <v/ON>

namespace V::_ {
template <class T>
[[nodiscard]] INLINE constexpr decltype(auto) optional_value(T &&t) noexcept {
	// ! note: if t.value is a member function, this should not pass !
	if constexpr (requires { t.value; }) {
		// parentheses and `forward` critical for decltype(auto)
		return (std::forward<T>(t).value);
	} else if constexpr (requires { t.value(); }) {
		static_assert(noexcept(t.value()));
		return std::forward<T>(t).value();
	} else if constexpr (requires { t.entry(); }) {
		return optional_value(get::entry(std::forward<T>(t)));
	} else {
		return std::forward<T>(t);
	}
}
} // namespace V::_

// !

namespace V::has {
template <class T>
constexpr bool value =
  !is::StaticError<decltype(_::optional_value(std::declval<T>()))>;
} // namespace V::has

// !

namespace V::get {
[[nodiscard]] INLINE constexpr decltype(auto) value(auto &&item) noexcept
  requires(has::value<decltype(item)>)
{
	return get::stable(
	  catchStaticError(V::_::optional_value(std::forward<decltype(item)>(item))));
}
} // namespace V::get

namespace V::get {
template <class T> struct ValueSpecializations {
	using Result =
	  std::remove_cvref_t<decltype(V::_::optional_value(std::declval<T>()))>;
};

template <class Key, class Value>
struct ValueSpecializations<V::Entry<Key, Value>> {
	using Result = Value;
};

template <class T>
  requires(std::is_same_v<decltype(V::_::optional_value(std::declval<T>())), T>)
struct ValueSpecializations<T> {
	using Result = T; // preserve ref-ness
};

// ! short-circuit references to avoid incomplete type errors
// template <class T>
//   requires(std::is_reference_v<T>)
// struct ValueSpecializations<T> {
// 	using Result = T;
// };

template <class T>
  requires has::value<T>
using Value = typename ValueSpecializations<T>::Result;
} // namespace V::get

#include <v/OFF>
