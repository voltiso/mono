// gemini 2.5 pro experimental
#pragma once
#include <v/_/_>

#include "v/options" // Include the definition of Options

#include <type_traits> // For concepts requires clause if needed

namespace VOLTISO_NAMESPACE::get::_ {

// Primary template: Default case, returns empty Options
template <typename T, typename = void> // SFINAE friendly primary template
struct GetOptionsImpl {
	using Result = Options<>; // Default to empty Options
};

// Specialization 1: T has a nested ::Options type
template <typename T>
  requires requires {
	  typename T::Options;
  } // C++20 constraint (optional but good)
struct GetOptionsImpl<T, std::void_t<typename T::Options>> {
	using Result = typename T::Options;
};

// Specialization 2: T is already an Options<...> type (Identity case)
template <typename... As> struct GetOptionsImpl<Options<As...>, void> {
	using Result = Options<As...>; // Return the input type itself
};

} // namespace VOLTISO_NAMESPACE::get::_

// !

namespace VOLTISO_NAMESPACE::get {

/**
 * @brief Gets the associated Options type for T.
 *
 * - If T defines a nested type `T::Options`, returns `T::Options`.
 * - If T is already `Options<As...>`, returns T itself.
 * - Otherwise, returns `Options<>`.
 *
 * @tparam T The type to extract Options from.
 */
template <typename T>
using Options = typename _::GetOptionsImpl<std::remove_cvref_t<T>>::Result;

} // namespace VOLTISO_NAMESPACE::get
