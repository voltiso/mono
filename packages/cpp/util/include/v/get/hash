#pragma once
#include <v/_/_>

// #include "v/demangle"
#include "v/get/stable"
#include "v/static-error"

#include <functional>

#include <v/ON>

namespace V::_ {
template <class T> constexpr auto optional_hash(T &&t) noexcept {
	if constexpr (std::is_enum_v<std::remove_reference_t<T>>) {
		return static_cast<std::underlying_type_t<std::remove_reference_t<T>>>(t);
	} else if constexpr (std::is_pointer_v<std::remove_reference_t<T>>) {
		// ! hash raw pointers
		using Target = std::remove_pointer_t<std::remove_reference_t<T>>;
		// std::cout << "target is " << demangle(typeid(Target)) << std::endl;
		// std::cout << "DIVISION by " << sizeof(Target) << std::endl;
		// ! we want to divide by `sizeof(Target)`, but it's not always possible
		// ! Target may be incomplete type from some API like `GLFWwindow*`
		if constexpr (requires { sizeof(Target); }) {
			// ! divide here !
			return std::bit_cast<std::uintptr_t>(t) / sizeof(Target);
		} else {
			return std::bit_cast<std::uintptr_t>(t);
		}
		// ! node: this division causes 2.80ns -> 1.74ns speedup
	} else if constexpr (std::is_integral_v<std::remove_reference_t<T>>) {
		return std::forward<T>(t);
	} else if constexpr (requires { t.hash(); }) {
		static_assert(noexcept(t.hash()));
		return std::forward<T>(t).hash();
	} else if constexpr (requires { t.hash; }) {
		return (std::forward<T>(t).hash);
	} else if constexpr (requires { std::hash<T>{}(t); }) {
		static_assert(noexcept(std::hash<T>{}(t)));
		return std::hash<T>{}(std::forward<T>(t));
		// } else if constexpr (std::is_reference_v<T>) {
		// 	// fringe case when people want to hash references
		// 	// i.e. `get::hash<T&>(...)` - has to be explicit
		// 	static_assert(noexcept(optional_hash(&t)));
		// 	return optional_hash(&t);
	} else {
		return STATIC_ERROR;
		// static_assert(false, "get::hash(t) - unable to figure out how to get
		// hash");
	}
}
} // namespace V::_

namespace V::has {
template <class T>
constexpr bool hash =
  !is::StaticError<decltype(V::_::optional_hash(std::declval<T>()))>;
} // namespace V::has

// !

namespace V::get {
template <class T>
[[nodiscard]] INLINE constexpr decltype(auto) hash(T &&item) noexcept
  requires(has::hash<decltype(item)>)
{
	return get::stable(catchStaticError(V::_::optional_hash(item)));
}
} // namespace V::get

#include <v/OFF>
