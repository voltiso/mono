#pragma once

#include "v/pool"
#include "v/thread-singleton"

namespace VOLTISO_NAMESPACE::shared::_ {
template <class Item> struct ControlBlock {
	Item item;
	std::size_t numReferences = 1;
	// std::atomic<int> refCount = 1;

	template <class... Args>
	ControlBlock(Args &&...args) : item(std::forward<Args>(args)...) {}
	void dereference() {
		if (--numReferences == 0) [[unlikely]] {
			using Pool = Pool<ControlBlock>;
			using Handle = Pool::Handle;
			ThreadSingleton<Pool>::instance().erase(Handle(this));
		}
	}
};
} // namespace VOLTISO_NAMESPACE::shared::_

namespace VOLTISO_NAMESPACE {
template <class Item> class Shared {
	using Self = Shared;
	// static_assert(!std::is_class_v<Item> || std::is_final_v<Item>);

	static_assert(
	  !std::is_reference_v<Item>, "you probably don't want Shared<Item&>");

	using CanonicalItem = std::remove_cv_t<Item>;
	using Pool = Pool<shared::_::ControlBlock<CanonicalItem>>;

public:
	template <class... Args> static Self create(Args &&...args) {
		return Self(pool().insert(std::forward<Args>(args)...), nullptr);
	}

	static Self create(const Item &item) {
		return Self(pool().insert(item), nullptr);
	}

	static Self create(Item &&item) {
		return Self(pool().insert(std::move(item)), nullptr);
	}

	~Shared() {
		if (this->_controlBlock) [[likely]] {
			// std::cout << "erase" << std::endl;
			this->_controlBlock->dereference();
		}
	}

private:
	template <class Arg>
	Shared(Arg &&arg, void *_unusedTag) : _controlBlock{std::forward<Arg>(arg)} {}

public:
	Shared() = delete;

public:
	Shared(const Self &other) : _controlBlock(other._controlBlock) {
		if (other._controlBlock) [[likely]] {
			++other._controlBlock->numReferences;
		}
	}

	// ! no assignment - Shared is reference-like
	// Shared &operator=(const Self &other) {
	//   DCHECK_NE(this->_controlBlock,
	//             other._controlBlock); // self-assignment forbidden
	//   // if (this->_controlBlock == other._controlBlock) [[unlikely]]
	//   //   return *this;

	//   if (this->_controlBlock) [[likely]] {
	//     this->_controlBlock->dereference();
	//   }
	//   this->_controlBlock = other._controlBlock;
	//   if (other._controlBlock) [[likely]]
	//     ++other._controlBlock->numReferences;
	//   return *this;
	// }

	Shared(Self &&other) noexcept : _controlBlock(other._controlBlock) {
		other._controlBlock = handle::INVALID;
	}

	// ! no assignment - Shared is reference-like
	// Shared &operator=(Self &&other) noexcept {
	//   this->_controlBlock->dereference();
	//   this->_controlBlock = other._controlBlock;
	//   other._controlBlock = Pool::Handle::INVALID;
	//   return *this;
	// }

public:
	// assign to underlying value
	template <class OtherItem>
	  requires(
	    std::is_assignable_v<Item &, OtherItem> &&
	    // Only check the second condition if OtherItem actually has operator*
	    (!(requires(OtherItem t) {
		    { *t };
	    }) ||
	     !std::is_assignable_v<Item &, decltype(*std::declval<OtherItem>())>))
	Shared &operator=(OtherItem &&other) {
		item() = std::forward<OtherItem>(other);
		return *this;
	}

public:
	Item &item() const { return _controlBlock->item; }
	Item &operator*() const { return item(); }
	Item *operator->() const { return &**this; }
	operator Item &() const { return **this; }
	operator Item &&() const { return (Item &&)**this; }

	//

	operator Shared<const Item> &() {
		return reinterpret_cast<Shared<const Item> &>(*this);
	}

	// auto clone() const {
	//   DCHECK(_controlBlock);
	//   using NewSelf = Shared<std::remove_cv_t<Item>>;
	//   if constexpr (has::clone<Item>)
	//     return NewSelf::create(item().clone());
	//   else
	//     return NewSelf::create(item());
	// }

	[[nodiscard]] Shared<const Item> &&freeze() && {
		return reinterpret_cast<Shared<const Item> &&>(*this);
	}

	[[nodiscard]] const Shared<const Item> &&freeze() const && {
		return reinterpret_cast<const Shared<const Item> &&>(*this);
	}

	const Shared<const Item> &frozen() const && {
		static_assert(false, "Shared::frozen() works only for lvalue references");
	}

	[[nodiscard]] Shared<const Item> &frozen() & {
		return reinterpret_cast<Shared<const Item> &>(*this);
	}

	[[nodiscard]] const Shared<const Item> &frozen() const & {
		return reinterpret_cast<const Shared<const Item> &>(*this);
	}

private:
	Pool::Handle _controlBlock = Pool::Handle::INVALID;

	static auto &pool() {
		// return context::get<Pool>();
		return ThreadSingleton<Pool>::instance();
		// return *(context::tryGet<Pool>() || &singleton::instance<Pool>());
	}
}; // class Owned

//

//

#define DEFINE_OPERATOR(op)                                                    \
	template <class T, class Other>                                              \
	auto operator op(const Shared<T> &lhs, Other &&rhs)                          \
	  ->decltype(*lhs op std::forward<Other>(rhs)) {                             \
		return *lhs op std::forward<Other>(rhs);                                   \
	}                                                                            \
                                                                               \
	template <class T, class Other>                                              \
	auto operator op(Other &&lhs, const Shared<T> &rhs)                          \
	  ->decltype(std::forward<Other>(lhs) op * rhs) {                            \
		return std::forward<Other>(lhs) op * rhs;                                  \
	}

DEFINE_OPERATOR(==)
DEFINE_OPERATOR(!=)

DEFINE_OPERATOR(<)
DEFINE_OPERATOR(<=)

DEFINE_OPERATOR(>)
DEFINE_OPERATOR(>=)

DEFINE_OPERATOR(+)
DEFINE_OPERATOR(+=)

DEFINE_OPERATOR(-)
DEFINE_OPERATOR(-=)

DEFINE_OPERATOR(*)
DEFINE_OPERATOR(*=)

DEFINE_OPERATOR(/)
DEFINE_OPERATOR(/=)

DEFINE_OPERATOR(%)
DEFINE_OPERATOR(%=)

DEFINE_OPERATOR(<<)
DEFINE_OPERATOR(<<=)

DEFINE_OPERATOR(>>)
DEFINE_OPERATOR(>>=)

DEFINE_OPERATOR(&)
DEFINE_OPERATOR(&=)

DEFINE_OPERATOR(|)
DEFINE_OPERATOR(|=)

DEFINE_OPERATOR(^)
DEFINE_OPERATOR(^=)

DEFINE_OPERATOR(&&)
DEFINE_OPERATOR(||)

#undef DEFINE_OPERATOR

} // namespace VOLTISO_NAMESPACE
