// â €â“¥ 2022     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { ToStringKey } from '../key'
import type { Value } from '../value'

export type IEntry = [keyof any, unknown]

export type Entry<O extends object> = O extends unknown
	? {
			[k in keyof O]-?: Value<O, k> extends never ? never : [k, Value<O, k>]
	  }[keyof O]
	: never

//

export type ICoercedEntry = [ToStringKey<keyof any>, unknown]

export type CoercedEntry<O extends object> = O extends unknown
	? {
			[k in keyof O]-?: [ToStringKey<k>, Value<O, k>]
	  }[keyof O]
	: never
