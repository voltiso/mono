// â €â“¥ 2024     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { nullish } from '~/nullish'
import type { strictNullChecks } from '~/tsc-options'

import type { $PartialComplex_ } from './_PartialComplex.ts_'

type ExcludedPartial<T> = $PartialComplex_<Exclude<T, nullish>>

type NonNeverPartial<T> = ExcludedPartial<T> extends never
	? {}
	: ExcludedPartial<T>

/** Requires `strictNullChecks` */
export type PartialIfNullish_<O> = strictNullChecks extends true
	? null extends O
		? NonNeverPartial<O>
		: undefined extends O
		? NonNeverPartial<O>
		: O
	: O

/** Requires `strictNullChecks` */
export type PartialIfNullish<O extends object | nullish> = PartialIfNullish_<O>
