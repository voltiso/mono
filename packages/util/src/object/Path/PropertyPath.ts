// â €â“¥ 2024     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { NoArgument } from '~/type'

import type { PathSegmentString } from './PathBrand'
import type { PropertyPathPartialOptions } from './PropertyPathString'

//

export type ReadonlyPropertyPath<
	Obj extends unknown | NoArgument = NoArgument,
> = readonly [...PropertyPath<Obj>]

export type PropertyPath<Obj extends unknown | NoArgument = NoArgument> = [
	Obj,
] extends [NoArgument]
	? PropertyPath.Supertype
	: PropertyPath.ForObject<Obj>

//

export namespace PropertyPath {
	/** Use {@link PropertyPath} instead */
	export type Supertype = readonly (
		| Exclude<keyof any, string>
		| PathSegmentString<PropertyPathPartialOptions>
	)[]

	/** Use {@link PropertyPath} instead */
	export type ForObject<O> = O extends object
		? {
				[k in keyof O]-?: [k] | [k, ...ForObject<O[k]>]
			}[keyof O]
		: never
}
