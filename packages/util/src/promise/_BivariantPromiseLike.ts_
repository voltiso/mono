// â €â“¥ 2023     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

export interface BivariantPromiseLike<T> {
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 *
	 * @param onfulfilled - The callback to execute when the Promise is resolved.
	 * @param onrejected - The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| {
					bivarianceHack(value: T): TResult1 | BivariantPromiseLike<TResult1>
			  }['bivarianceHack']
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | BivariantPromiseLike<TResult2>)
			| undefined
			| null,
	): BivariantPromiseLike<TResult1 | TResult2>
}
