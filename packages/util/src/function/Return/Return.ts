// â €â“¥ 2022     ğŸŒ©    ğŸŒ©     â €   â €
// â €         ğŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { AbstractNewable, Callable, Newable } from '~'

/** Similar to the standard `ReturnType` and `InstanceType` */
export type Return_<T> = [T] extends [(...args: any) => infer R]
	? R
	: [T] extends [abstract new (...args: any) => infer R]
	? R
	: never

/** Similar to the standard `ReturnType` and `InstanceType` */
export type Return<T extends Callable | Newable | AbstractNewable> = Return_<T>

//

/** Similar to the standard `ReturnType` and `InstanceType` */
export type $Return_<T> = T extends any ? Return_<T> : never

/** Similar to the standard `ReturnType` and `InstanceType` */
export type $Return<T extends Callable | Newable | AbstractNewable> =
	$Return_<T>
