// â €â“¥ 2022     ðŸŒ©    ðŸŒ©     â €   â €
// â €         ðŸŒ© VÍ›oÍ›Í›Í›ltÍ›Í›Í›iÍ›Í›Í›Í›soÍ›Í›Í›.comâ €  â €â €â €

import type { GetNewableOptions, NewableOptions } from './NewableOptions'

/**
 * - Parameters default to `any` (so that bivariance hack is not required)
 * - See `Bivariant` to make the result bivariant
 * - Use `AbstractNewable` if true newable super-type is needed
 */
export type Newable<O extends Partial<NewableOptions> = {}> = new (
	...args: GetNewableOptions<O>['parameters']
) => GetNewableOptions<O>['return']

//

/**
 * - Parameters default to `any` (so that bivariance hack is not required)
 * - See `Bivariant` to make the result bivariant
 * - Use `Newable` to get a non-abstract newable (which is a sub-type)
 */
export type AbstractNewable<O extends Partial<NewableOptions> = {}> =
	abstract new (
		...args: GetNewableOptions<O>['parameters']
	) => GetNewableOptions<O>['return']
