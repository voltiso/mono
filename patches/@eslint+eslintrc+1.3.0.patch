# generated by patch-package 6.4.14
#
# declared package:
#   @eslint/eslintrc: 1.3.0
#
diff --git a/node_modules/@eslint/eslintrc/dist/eslintrc.cjs b/node_modules/@eslint/eslintrc/dist/eslintrc.cjs
index 8b07ba1..2abdad9 100644
--- a/node_modules/@eslint/eslintrc/dist/eslintrc.cjs
+++ b/node_modules/@eslint/eslintrc/dist/eslintrc.cjs
@@ -563,12 +563,25 @@ class PluginConflictError extends Error {
      * @param {{filePath:string, importerName:string}[]} plugins The resolved plugins.
      */
     constructor(pluginId, plugins) {
-        super(`Plugin "${pluginId}" was conflicted between ${plugins.map(p => `"${p.importerName}"`).join(" and ")}.`);
+        super(`Plugin "${pluginId}" was conflicted between ${plugins.map(p => `"${p.importerName}"`).join(" and ")}. Files not linking to the same place on disk: ${plugins.map(p => p.filePath).join(' and ')}`);
         this.messageTemplate = "plugin-conflict";
         this.messageData = { pluginId, plugins };
     }
 }
 
+function isSameFile(pathA, pathB) {
+	if(pathA === pathB) return true
+  try {
+    const statA = fs.statSync(pathA)
+    const statB = fs.statSync(pathB)
+    if(typeof statA?.ino !== 'number' || typeof statB?.ino !== 'number') return false
+    else return statA.ino === statB.ino
+  } catch(error) {
+    console.error(error)
+    return false
+  }
+}
+
 /**
  * Merge plugins.
  * `target`'s definition is prior to `source`'s.
@@ -594,7 +607,7 @@ function mergePlugins(target, source) {
                 throw sourceValue.error;
             }
             target[key] = sourceValue;
-        } else if (sourceValue.filePath !== targetValue.filePath) {
+        } else if (!isSameFile(sourceValue.filePath, targetValue.filePath)) {
             throw new PluginConflictError(key, [
                 {
                     filePath: targetValue.filePath,
