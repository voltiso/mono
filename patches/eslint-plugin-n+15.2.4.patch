# generated by patch-package 6.4.14
#
# declared package:
#   eslint-plugin-n: 15.2.4
#
diff --git a/node_modules/eslint-plugin-n/lib/rules/file-extension-in-import.js b/node_modules/eslint-plugin-n/lib/rules/file-extension-in-import.js
index db3aa0a..4422ddd 100644
--- a/node_modules/eslint-plugin-n/lib/rules/file-extension-in-import.js
+++ b/node_modules/eslint-plugin-n/lib/rules/file-extension-in-import.js
@@ -8,7 +8,7 @@ const path = require("path")
 const fs = require("fs")
 const mapTypescriptExtension = require("../util/map-typescript-extension")
 const visitImport = require("../util/visit-import")
-const packageNamePattern = /^(?:@[^/\\]+[/\\])?[^/\\]+$/u
+const packageNamePattern = /^[^\.\/_~].*/u
 const corePackageOverridePattern =
     /^(?:assert|async_hooks|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|http2|https|inspector|module|net|os|path|perf_hooks|process|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|trace_events|tty|url|util|v8|vm|worker_threads|zlib)[/\\]$/u
 
@@ -18,18 +18,7 @@ const corePackageOverridePattern =
  * @returns {string[]} File extensions.
  */
 function getExistingExtensions(filePath) {
-    const basename = path.basename(filePath, path.extname(filePath))
-    try {
-        return fs
-            .readdirSync(path.dirname(filePath))
-            .filter(
-                filename =>
-                    path.basename(filename, path.extname(filename)) === basename
-            )
-            .map(filename => path.extname(filename))
-    } catch (_error) {
-        return []
-    }
+    return [path.extname(filePath)]
 }
 
 module.exports = {
@@ -68,6 +57,7 @@ module.exports = {
         const overrideStyle = context.options[1] || {}
 
         function verify({ filePath, name, node }) {
+            filePath = filePath || name
             // Ignore if it's not resolved to a file or it's a bare module.
             if (
                 !filePath ||
